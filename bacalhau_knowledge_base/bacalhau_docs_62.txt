URL: https://docs.bacalhau.org/examples/data-engineering/convert-csv-to-parquet-or-avro

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookConvert CSV To Parquet Or AvroIntroduction​Converting from CSV to parquet or avro reduces the size of the file and allows for faster read and write speeds. With Bacalhau, you can convert your CSV files stored on ipfs or on the web without the need to download files and install dependencies locally.In this example tutorial we will convert a CSV file from a URL to parquet format and save the converted parquet file to IPFSPrerequisites​To get started, you need to install the Bacalhau client, see more informationhereRunning CSV to Avro or Parquet Locally​​Downloading the CSV file​Let's download thetransactions.csvfile:Copywgethttps://cloudflare-ipfs.com/ipfs/QmfKJT13h5k1b23ja3ZCVg5nFL9oKz2bVXc8oXgtwiwhjz/transactions.csvYou can use the CSV files fromhereWriting the Script​Write theconverter.pyPython script, that serves as a CSV converter to Avro or Parquet formats:Copy# converter.pyimportosimportsysfromabcimportABCMeta,abstractmethodimportfastavroimportnumpyasnpimportpandasaspdfrompyarrowimportTable,parquetclassBaseConverter(metaclass=ABCMeta):"""Base class for converters.Validate received parameters for future use."""def__init__(self,csv_file_path:str,target_file_path:str,)->None:self.csv_file_path=csv_file_pathself.target_file_path=target_file_path@propertydefcsv_file_path(self):returnself._csv_file_path@csv_file_path.setterdefcsv_file_path(self,path):ifnotos.path.isabs(path):path=os.path.join(os.getcwd(), path)_,extension=os.path.splitext(path)ifnotos.path.isfile(path)orextension!='.csv':raiseFileNotFoundError(f'No such csv file:{path}')self._csv_file_path=path@propertydeftarget_file_path(self):returnself._target_file_path@target_file_path.setterdeftarget_file_path(self,path):ifnotos.path.isabs(path):path=os.path.join(os.getcwd(), path)target_dir=os.path.dirname(path)ifnotos.path.isdir(target_dir):raiseFileNotFoundError(f'No such directory:{target_dir}\n''Choose existing or create directory for result file.')ifos.path.isfile(path):raiseFileExistsError(f'File{path}has already exists.''Usage of existing file may result in data loss.')self._target_file_path=pathdefget_csv_reader(self):"""Return csv reader which read csv file as a stream"""returnpd.read_csv(self.csv_file_path,iterator=True,chunksize=100000)@abstractmethoddefconvert(self):"""Should be implemented in child class"""passclassParquetConverter(BaseConverter):"""Convert received csv file to parquet file.Take path to csv file and path to result file."""defconvert(self):"""Read csv file as a stream and write data to parquet file."""csv_reader=self.get_csv_reader()writer=Noneforchunkincsv_reader:ifnotwriter:table=Table.from_pandas(chunk)writer=parquet.ParquetWriter(self.target_file_path, table.schema)table=Table.from_pandas(chunk)writer.write_table(table)writer.close()classAvroConverter(BaseConverter):"""Convert received csv file to avro file.Take path to csv file and path to result file."""NUMPY_TO_AVRO_TYPES={np.dtype('?'):'boolean',np.dtype('int8'):'int',np.dtype('int16'):'int',np.dtype('int32'):'int',np.dtype('uint8'):'int',np.dtype('uint16'):'int',np.dtype('uint32'):'int',np.dtype('int64'):'long',np.dtype('uint64'):'long',np.dtype('O'):['null','string','float'],np.dtype('unicode_'):'string',np.dtype('float32'):'float',np.dtype('float64'):'double',np.dtype('datetime64'):{'type':'long','logicalType':'timestamp-micros'},}defget_avro_schema(self,pandas_df):"""Generate avro schema."""column_dtypes=pandas_df.dtypesschema_name=os.path.basename(self.target_file_path)schema={'type':'record','name':schema_name,'fields':[{'name':name,'type':AvroConverter.NUMPY_TO_AVRO_TYPES[dtype]}for(name,dtype)incolumn_dtypes.items()]}returnfastavro.parse_schema(schema)defconvert(self):"""Read csv file as a stream and write data to avro file."""csv_reader=self.get_csv_reader()schema=Nonewithopen(self.target_file_path,'a+b')asf:forchunkincsv_reader:ifnotschema:schema=self.get_avro_schema(chunk)fastavro.writer(f,schema=schema,records=chunk.to_dict('records'))if__name__=='__main__':converters={'parquet':ParquetConverter,'avro':AvroConverter}csv_file,result_path,result_type=sys.argv[1],sys.argv[2],sys.argv[3]ifresult_type.lower()notinconverters:raiseValueError('Invalid target type. Avalible types: avro, parquet.')converter=converters[result_type.lower()](csv_file, result_path)converter.convert()You can find out more information aboutconverter.pyhereInstalling Dependencies​CopypipinstallfastavronumpypandaspyarrowConverting CSV file to Parquet format​Copypythonconverter.py<path_to_csv><path_to_result_file><extension>In our case:Copypython3converter.pytransactions.csvtransactions.parquetparquetViewing the parquet file:​Copyimportpandasaspdpd.read_parquet('transactions.parquet').head()Containerize Script with Docker​You can skip this section entirely and directly go toRunning on BacalhauTo build your own docker container, create aDockerfile, which contains instructions to build your image.CopyFROMpython:3.8RUNapt update && apt install gitRUNgit clone https://github.com/bacalhau-project/Sparkov_Data_GenerationWORKDIR/Sparkov_Data_Generation/RUNpip3 install -r requirements.txtSee more information on how to containerize your script/apphereBuild the container​We will run thedocker buildcommand to build the container:Copydockerbuild-t<hub-user>/<repo-name>:<tag>.Before running the command replace:hub-userwith your docker hub username. If you don’t have a docker hub accountfollow these instructions to create docker account, and use the username of the account you createdrepo-namewith the name of the container, you can name it anything you wanttagthis is not required but you can use the latest tagIn our case:Copydockerbuild-tjsacex/csv-to-arrow-or-parquet.Push the container​Next, upload the image to the registry. This can be done by using the Docker hub username, repo name or tag.Copydockerpush<hub-user>/<repo-name>:<tag>In our case:Copydockerpushjsacex/csv-to-arrow-or-parquetRunning a Bacalhau Job​With the command below, we are mounting the CSV file for transactions from IPFSCopyexport JOB_ID=$(bacalhau docker run \-i ipfs://QmTAQMGiSv9xocaB4PUCT5nSBHrf9HZrYj21BAZ5nMTY2W  \--wait \--id-only \--output outputs:\outputs \--publisher ipfs \jsacex/csv-to-arrow-or-parquet \-- python3 src/converter.py ../inputs/transactions.csv  /outputs/transactions.parquet parquet)Structure of the command​Let's look closely at the command above:bacalhau docker run: call to Bacalhau-i ipfs://QmTAQMGiSv9xocaB4PUCT5nSBHrf9HZrYj21BAZ5nMTY2W: CIDs to use on the job. Mounts them at '/inputs' in the execution.jsacex/csv-to-arrow-or-parque: the name and the tag of the docker image we are using../inputs/transactions.csv: path to input dataset/outputs/transactions.parquet parquet: path to the outputpython3 src/converter.py: execute the scriptWhen a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on.Declarative job description​The same job can be presented in thedeclarativeformat. In this case, the description will look like this:Copyname:Convert CSV To Parquet Or Avrotype:batchcount:1tasks:-name:My main taskEngine:type:dockerparams:Image:jsacex/csv-to-arrow-or-parquetEntrypoint:-/bin/bashParameters:--c-python3 src/converter.py ../inputs/transactions.csv  ../outputs/transactions.parquet parquetPublisher:Type:ipfsResultPaths:-Name:outputsPath:/outputsInputSources:-Target:"/inputs"Source:Type:"ipfs"Params:CID:"QmTAQMGiSv9xocaB4PUCT5nSBHrf9HZrYj21BAZ5nMTY2W"The job description should be saved in.yamlformat, e.g.convertcsv.yaml, and then run with the command:Copybacalhaujobrunconvertcsv.yamlChecking the State of your Jobs​Job status: You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysPublishedorCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (results) and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presults# Temporary directory to store the resultsbacalhaujobget${JOB_ID}--output-dirresults# Download the resultsViewing your Job Output​To view the file, run the following command:Copylsresults/outputstransactions.parquetAlternatively, you can do this:Copyimportpandasaspdimportospd.read_parquet('results/outputs/transactions.parquet')Support​If you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousEthereum Blockchain Analysis with Ethereum-ETL and BacalhauNextSimple Image ProcessingLast updated1 month agoOn this pageIntroduction​Prerequisites​Running CSV to Avro or Parquet Locally​​Downloading the CSV file​Writing the Script​Installing Dependencies​Converting CSV file to Parquet format​Viewing the parquet file:​Containerize Script with Docker​Build the container​Push the container​Running a Bacalhau Job​Structure of the command​Declarative job description​Checking the State of your Jobs​Viewing your Job Output​Support​Was this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.