URL: https://www.consul.io/docs/k8s/installation/install

HashiDaysOne conference. Three cities.Find a city near youDismiss alertHashiCorp DeveloperHashiCorp Cloud PlatformTerraformPackerConsulVaultBoundaryNomadWaypointVagrantConsulInstallTutorialsDocumentationAPICLITry Cloud(opens in new tab)SearchCommand or control keyK keySign inSign upThemeConsul HomeDocumentationDocumentationWhat is Consul?Why Choose Consul?Core ConceptsGet StartedArchitectureRelease NotesUpgradeServicesService MeshDynamic App ConfigurationSecurityAgentIntegrationsTroubleshootKubernetesOverviewArchitectureInstallationInstall from Consul K8s CLIInstall from Helm ChartDeployment ConfigurationsPlatform GuidesService MeshL7 traffic managementService SyncCustom Resource DefinitionsAnnotations and LabelsConsul DNSUpgradeConsul DataplaneOperationsTroubleshootCompatibility MatrixHelm Chart ConfigurationConsul K8s CLI ReferenceNomadAWS ECSAWS LambdaHCP Consul DedicatedConsul EnterpriseNetwork Infrastructure AutomationResourcesTutorial LibraryCertificationsCommunity Forum(opens in new tab)Support(opens in new tab)GitHub(opens in new tab)DeveloperConsulDocumentationKubernetesInstall from Helm Chartv1.19.x (latest)Consulv1.18.xv1.17.xv1.16.xv1.15.xv1.14.xv1.13.xv1.12.xv1.11.xv1.10.xv1.9.xv1.8.xInstall Consul on Kubernetes with HelmThis topic describes how to install Consul on Kubernetes using the official Consul Helm chart. For instruction on how to install Consul on Kubernetes using the Consul K8s CLI, refer toInstalling the Consul K8s CLI.IntroductionWe recommend using the Consul Helm chart to install Consul on Kubernetes for multi-cluster installations that involve cross-partition or cross datacenter communication. The Helm chart installs and configures all necessary components to run Consul.Consul can run directly on Kubernetes so that you can leverage Consul functionality if your workloads are fully deployed to Kubernetes. For heterogeneous workloads, Consul agents can join a server running inside or outside of Kubernetes. Refer to theConsul on Kubernetes architectureto learn more about its general architecture.The Helm chart exposes several useful configurations and automatically sets up complex resources, but it does not automatically operate Consul. You must still become familiar with how to monitor, backup, and upgrade the Consul cluster.The Helm chart has no required configuration, so it installs a Consul cluster with default configurations. We strongly recommend that youlearn about the configuration optionsbefore going to production.Security warning: By default, Helm installs Consul with security configurations disabled so that the out-of-box experience is optimized for new users. We strongly recommend using a properly-secured Kubernetes cluster or making sure that you understand and enableConsulâ€™s security featuresbefore going into production. Some security features are not supported in the Helm chart and require additional manual configuration.Refer to thearchitecturesection to learn more about the general architecture of Consul on Kubernetes.For a hands-on experience with Consul as a service mesh
for Kubernetes, follow theGetting Started with Consul service
meshtutorial.RequirementsUsing the Helm Chart requires Helm version 3.6+. Visit theHelm websiteto download the latest version.Install ConsulAdd the HashiCorp Helm Repository:$helm repo add hashicorp https://helm.releases.hashicorp.com"hashicorp" has been added to your repositoriesVerify that you have access to the consul chart:$helm search repo hashicorp/consulNAME                CHART VERSION   APP VERSION DESCRIPTIONhashicorp/consul    1.0.1           1.14.1      Official HashiCorp Consul ChartBefore you install Consul on Kubernetes with Helm, ensure that theconsulKubernetes namespace does not exist. We recommend installing Consul on a dedicated namespace.$kubectl get namespaceNAME              STATUS   AGEdefault           Active   18hkube-node-lease   Active   18hkube-public       Active   18hkube-system       Active   18hInstall Consul on Kubernetes using Helm. The Helm chart does everything to set up your deployment: after installation, agents automatically form clusters, elect leaders, and run the necessary agents.Run the following command to install the latest version of Consul on Kubernetes with its default configuration.$helm install consul hashicorp/consul --set global.name=consul --create-namespace --namespace consulYou can also install Consul on a dedicated namespace of your choosing by modifying the value of the-nflag for the Helm install.To install a specific version of Consul on Kubernetes, issue the following command with--versionflag:$exportVERSION=1.0.1$helm install consul hashicorp/consul --set global.name=consul --version ${VERSION} --create-namespace --namespace consulCustom installationIf you want to customize your installation,
create avalues.yamlfile to override the default settings.
To learn what settings are available, runhelm inspect values hashicorp/consulor read theHelm Chart Reference.Minimalvalues.yamlfor Consul service meshThe followingvalues.yamlconfig file contains the minimum required settings to enableConsul Service Mesh:values.yamlglobal:name:consulAfter you create yourvalues.yamlfile, runhelm installwith the--valuesflag:$helm install consul hashicorp/consul --create-namespace --namespace consul --values values.yamlNAME: consul...Install Consul on Red Hat OpenShiftRed Hat OpenShiftis a security-conscious, opinionated wrapper for Kubernetes. To install Consul on OpenShift-managed Kubernetes, setglobal.openshift.enabled=truein yourcustom installationvalues file:global:openshift:enabled:trueRefer toopenshiftin the Helm chart referencefor additional information regarding the OpenShift stanza. In addition, refer to theDeploy Consul on RedHat OpenShift tutorialfor a complete working example that deploys Consul Service Mesh using Red Hat Certified UBI images.Install Consul on GKE AutopilotGKE Autopilot provides a fully managed environment for containerized workloads and requires the Consul CNI plugin to be installed. Refer toEnable the Consul CNI pluginfor a full reference on how to enable the CNI plugin.By default, GKE Autopilot also installsGateway API resources, so we recommend customizing theconnectInject.apiGatewaystanza to accommodate for the pre-installed Gateway API CRDs.The following working example enables both Consul Service Mesh and Consul API Gateway on GKE Autopilot. Refer toconnectInject.agiGatewayin the Helm chart referencefor additional information.values.yamlglobal:name:consulconnectInject:enabled:trueapiGateway:manageExternalCRDs:falsemanageNonStandardCRDs:truecni:enabled:truelogLevel:debugcniBinDir:"/home/kubernetes/bin"cniNetDir:"/etc/cni/net.d"server:resources:requests:memory:"500Mi"cpu:"500m"limits:memory:"500Mi"cpu:"500m"Enable the Consul CNI pluginBy default, Consul injects aconnect-inject-initinit container as part of the Kubernetes pod startup process when Consul is intransparent proxy mode.
The container configures traffic redirection in the service mesh through the sidecar proxy.
To configure redirection, the container requires elevatedCAP_NET_ADMINprivileges, which may not be compatible with security policies in your organization.Instead, you can enable the Consul container network interface (CNI) plugin to perform traffic redirection.
Because the plugin is executed by the local Kubernetes kubelet, the plugin already has the elevated privileges necessary to configure the network.The Consul Helm Chart is responsible for installing the Consul CNI plugin.
To configure the plugin to be installed, add the following configuration to yourvalues.yamlfile:Reference configurationGKE configurationOpenShift configurationvalues.yamlglobal:name:consulconnectInject:enabled:truecni:enabled:truelogLevel:infocniBinDir:"/opt/cni/bin"cniNetDir:"/etc/cni/net.d"values.yamlglobal:name:consulconnectInject:enabled:truecni:enabled:truelogLevel:infocniBinDir:"/home/kubernetes/bin"cniNetDir:"/etc/cni/net.d"values.yamlglobal:name:consulopenshift:enabled:trueconnectInject:enabled:truecni:enabled:truelogLevel:infomultus:truecniBinDir:"/var/lib/cni/bin"cniNetDir:"/etc/kubernetes/cni/net.d"The following table describes the available CNI plugin options:OptionDescriptionDefaultcni.enabledBoolean value that enables or disables the CNI plugin. Iftrue, the plugin is responsible for redirecting traffic in the service mesh. Iffalse, redirection is handled by theconnect-inject initcontainer.falsecni.logLevelString value that specifies the log level for the installer and plugin. You can specify the following values:info,debug,error.infocni.namespaceSet the namespace to install the CNI plugin into. Overrides global namespace settings for CNI resources, for examplekube-systemnamespace used forconsul-k8sinstall, for exampleconsulcni.multusBoolean value that enables multus CNI plugin support. Iftrue, multus will be enabled. Iffalse, Consul CNI will operate as a chained plugin.falsecni.cniBinDirString value that specifies the location on the Kubernetes node where the CNI plugin is installed./opt/cni/bincni.cniNetDirString value that specifies the location on the Kubernetes node for storing the CNI configuration./etc/cni/net.dEnable Consul service mesh on select namespacesBy default, Consul Service Mesh is enabled on almost all namespaces within a Kubernetes cluster, with the exception ofkube-systemandlocal-path-storage. To restrict the service mesh to a subset of namespaces:specify anamespaceSelectorthat matches a label attached to each namespace where you want to deploy the service mesh. In order to default to enabling service mesh on select namespaces by label, theconnectInject.defaultvalue must be set totrue.values.yamlglobal:name:consulconnectInject:enabled:truedefault:truenamespaceSelector:|matchLabels:connect-inject : enabledLabel the namespaces where you would like to enable Consul Service Mesh.$kubectl create ns foo$kubectl label namespace foo connect-inject=enabledRunhelm installwith the--valuesflag:$helm install consul hashicorp/consul --create-namespace --namespace consul --values values.yamlNAME: consulUpdate your Consul on Kubernetes configurationIf you already installed Consul and want to make changes, you need to runhelm upgrade. Refer toUpgradingfor more details.UsageYou can view the Consul UI and access the Consul HTTP API after installation.Viewing the Consul UIThe Consul UI is enabled by default when using the Helm chart.For security reasons, it is not exposed through aLoadBalancerservice by default. To visit the UI, you must
usekubectl port-forward.Port forward with TLS disabledIf running with TLS disabled, the Consul UI is accessible through http on port 8500:$kubectl port-forward service/consul-server --namespace consul 8500:8500...After you set up the port forward, navigate tohttp://localhost:8500.Port forward with TLS enabledIf running with TLS enabled, the Consul UI is accessible through https on port 8501:$kubectl port-forward service/consul-server --namespace consul 8501:8501...After you set up the port forward, navigate tohttps://localhost:8501.You need to click through an SSL warning from your browser because the
Consul certificate authority is self-signed and not in the browser's trust store.ACLs EnabledIf ACLs are enabled, you need to input an ACL token to display all resources and make modifications in the UI.To retrieve the bootstrap token that has full permissions, run:$kubectl get secrets/consul-bootstrap-acl-token --template='{{.data.token | base64decode }}'e7924dd1-dc3f-f644-da54-81a73ba0a178%Then paste the token into the UI under the ACLs tab (without the%).NOTE: If using multi-cluster federation, your kubectl context must be in the primary datacenter
to retrieve the bootstrap token since secondary datacenters use a separate token
with less permissions.Exposing the UI through a serviceIf you want to expose the UI via a Kubernetes Service, configure
theui.servicechart values.
Because this service allows requests to the Consul servers, it should
not be open to the world.Accessing the Consul HTTP APIWhile technically any listening agent can respond to the HTTP API, communicating with the local Consul node has important caching behavior and allows you to use the simpler/agentendpoints for services and checks.To find information about a node, you can use thedownward API.An example pod specification is shown below. In addition to pods, anything
with a pod template can also access the downward API and can therefore also
access Consul: StatefulSets, Deployments, Jobs, etc.apiVersion:v1kind:Podmetadata:name:consul-examplespec:containers:-name:exampleimage:'hashicorp/consul:latest'env:-name:HOST_IPvalueFrom:fieldRef:fieldPath:status.hostIPcommand:-'/bin/sh'-'-ec'-|export CONSUL_HTTP_ADDR="${HOST_IP}:8500"consul kv put hello worldrestartPolicy:NeverAn exampleDeploymentis also shown below to show how the host IP can
be accessed from nested pod specifications:apiVersion:apps/v1kind:Deploymentmetadata:name:consul-example-deploymentspec:replicas:1selector:matchLabels:app:consul-exampletemplate:metadata:labels:app:consul-examplespec:containers:-name:exampleimage:'hashicorp/consul:latest'env:-name:HOST_IPvalueFrom:fieldRef:fieldPath:status.hostIPcommand:-'/bin/sh'-'-ec'-|export CONSUL_HTTP_ADDR="${HOST_IP}:8500"consul kv put hello worldNext StepsIf you are still considering a move to Kubernetes, or to Consul on Kubernetes specifically, ourMigrate to Microservices with Consul Service Mesh on Kubernetescollection uses an example application written by a fictional company to illustrate why and how organizations can
migrate from monolith to microservices using Consul service mesh on Kubernetes. The case study in this collection
should provide information valuable for understanding how to develop services that leverage Consul during any stage
of your microservices journey.Edit this page on GitHubOn this page:Install Consul on Kubernetes with HelmIntroductionRequirementsInstall ConsulCustom installationUsageNext StepsThemeCertificationsSystem StatusCookie ManagerTerms of UseSecurityPrivacyTrademark PolicyTrade ControlsAccessibilityGive Feedback(opens in new tab)