Source: grpc_io
URL: https://grpc.io/docs/languages/php/api/

GRPC PHP
1.66.0
|
Class [AbstractCall](class_grpc_1_1_abstract_call.html).
[More...](namespace_grpc.html#details)
| |
class |
|
| |
const |
|
Class [AbstractCall](class_grpc_1_1_abstract_call.html).
This is an experimental and incomplete implementation of gRPC server for PHP.
APIs are definitely going to be changed.
DO NOT USE in production. Class [RpcServer](class_grpc_1_1_rpc_server.html)
APIs are definitely going to be changed.
DO NOT USE in production. Class [Status](class_grpc_1_1_status.html)
const Grpc\CALL_ERROR |
something failed, we don't know what
const Grpc\CALL_ERROR_ALREADY_FINISHED |
this call is already finished (writes_done or write_status has already been called)
const Grpc\CALL_ERROR_ALREADY_INVOKED |
this method must be called before invoke
const Grpc\CALL_ERROR_INVALID_FLAGS |
the flags value was illegal for this call
const Grpc\CALL_ERROR_NOT_INVOKED |
this method must be called after invoke
const Grpc\CALL_ERROR_NOT_ON_CLIENT |
this method is not available on the client
const Grpc\CALL_ERROR_NOT_ON_SERVER |
this method is not available on the server
const Grpc\CALL_ERROR_TOO_MANY_OPERATIONS |
there is already an outstanding read/write operation on the call
const Grpc\CALL_OK |
everything went ok
const Grpc\CHANNEL_CONNECTING |
channel is connecting
const Grpc\CHANNEL_FATAL_FAILURE |
channel has seen a failure that it cannot recover from
const Grpc\CHANNEL_IDLE |
channel is idle
const Grpc\CHANNEL_READY |
channel is ready for work
const Grpc\CHANNEL_TRANSIENT_FAILURE |
channel has seen a failure but expects to recover
const Grpc\OP_RECV_CLOSE_ON_SERVER |
Receive close on the server: one and only one must be made on the server.
This op completes after the close has been received by the server. This operation always succeeds, meaning ops paired with this operation will also appear to succeed, even though they may not have.
const Grpc\OP_RECV_INITIAL_METADATA |
Receive initial metadata: one and only one MUST be made on the client, must not be made on the server.
This op completes after all initial metadata has been read from the peer.
const Grpc\OP_RECV_MESSAGE |
Receive a message: 0 or more of these operations can occur for each call.
This op completes after all bytes of the received message have been read, or after a half-close has been received on this call.
const Grpc\OP_RECV_STATUS_ON_CLIENT |
Receive status on the client: one and only one must be made on the client.
This operation always succeeds, meaning ops paired with this operation will also appear to succeed, even though they may not have. In that case the status will indicate some failure. This op completes after all activity on the call has completed.
const Grpc\OP_SEND_CLOSE_FROM_CLIENT |
Send a close from the client: one and only one instance MUST be sent from the client, unless the call was cancelled - in which case this can be skipped.
This op completes after all bytes for the call (including the close) have passed outgoing flow control.
const Grpc\OP_SEND_INITIAL_METADATA |
Send initial metadata: one and only one instance MUST be sent for each call, unless the call was cancelled - in which case this can be skipped.
This op completes after all bytes of metadata have been accepted by outgoing flow control.
const Grpc\OP_SEND_MESSAGE |
Send a message: 0 or more of these operations can occur for each call.
This op completes after all bytes for the message have been accepted by outgoing flow control.
const Grpc\OP_SEND_STATUS_FROM_SERVER |
Send status from the server: one and only one instance MUST be sent from the server unless the call was cancelled - in which case this can be skipped.
This op completes after all bytes for the call (including the status) have passed outgoing flow control.
const Grpc\STATUS_ABORTED |
The operation was aborted, typically due to a concurrency issue like sequencer check failures, transaction aborts, etc.
See litmus test above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.
const Grpc\STATUS_ALREADY_EXISTS |
Some entity that we attempted to create (e.g., file or directory) already exists.
const Grpc\STATUS_CANCELLED |
The operation was cancelled (typically by the caller).
const Grpc\STATUS_DATA_LOSS |
Unrecoverable data loss or corruption.
const Grpc\STATUS_DEADLINE_EXCEEDED |
Deadline expired before operation could complete.
For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire.
const Grpc\STATUS_FAILED_PRECONDITION |
Operation was rejected because the system is not in a state required for the operation's execution.
For example, directory to be deleted may be non-empty, an rmdir operation is applied to a non-directory, etc.
A litmus test that may help a service implementor in deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE: (a) Use UNAVAILABLE if the client can retry just the failing call. (b) Use ABORTED if the client should retry at a higher-level (e.g., restarting a read-modify-write sequence). (c) Use FAILED_PRECONDITION if the client should not retry until the system state has been explicitly fixed. E.g., if an "rmdir" fails because the directory is non-empty, FAILED_PRECONDITION should be returned since the client should not retry unless they have first fixed up the directory by deleting files from it. (d) Use FAILED_PRECONDITION if the client performs conditional REST Get/Update/Delete on a resource and the resource on the server does not match the condition. E.g., conflicting read-modify-write on the same resource.
const Grpc\STATUS_INTERNAL |
Internal errors.
Means some invariants expected by underlying system has been broken. If you see one of these errors, something is very broken.
const Grpc\STATUS_INVALID_ARGUMENT |
Client specified an invalid argument.
Note that this differs from FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name).
const Grpc\STATUS_NOT_FOUND |
Some requested entity (e.g., file or directory) was not found.
const Grpc\STATUS_OK |
Not an error; returned on success.
const Grpc\STATUS_OUT_OF_RANGE |
Operation was attempted past the valid range.
E.g., seeking or reading past end of file.
Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate INVALID_ARGUMENT if asked to read at an offset that is not in the range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from an offset past the current file size.
There is a fair bit of overlap between FAILED_PRECONDITION and OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error) when it applies so that callers who are iterating through a space can easily look for an OUT_OF_RANGE error to detect when they are done.
const Grpc\STATUS_PERMISSION_DENIED |
The caller does not have permission to execute the specified operation.
PERMISSION_DENIED must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED instead for those errors). PERMISSION_DENIED must not be used if the caller can not be identified (use UNAUTHENTICATED instead for those errors).
const Grpc\STATUS_RESOURCE_EXHAUSTED |
Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space.
const Grpc\STATUS_UNAUTHENTICATED |
The request does not have valid authentication credentials for the operation.
const Grpc\STATUS_UNAVAILABLE |
The service is currently unavailable.
This is a most likely a transient condition and may be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations.
WARNING: Although data MIGHT not have been transmitted when this status occurs, there is NOT A GUARANTEE that the server has not seen anything. So in general it is unsafe to retry on this status code if the call is non-idempotent.
See litmus test above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.
const Grpc\STATUS_UNIMPLEMENTED |
Operation is not implemented or not supported/enabled in this service.
const Grpc\STATUS_UNKNOWN |
Unknown error.
An example of where this error may be returned is if a [Status](class_grpc_1_1_status.html) value received from another address space belongs to an error-space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error.
const Grpc\WRITE_BUFFER_HINT |
Hint that the write may be buffered and need not go out on the wire immediately.
GRPC is free to buffer the message until the next non-buffered write, or until writes_done, but it need not buffer completely or at all.
const Grpc\WRITE_NO_COMPRESS |
Force compression to be disabled for a particular write (start_write/add_metadata).
Illegal on invoke/accept.