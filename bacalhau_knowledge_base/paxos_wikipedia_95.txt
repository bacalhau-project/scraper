Source: paxos_wikipedia
URL: https://en.wikipedia.org/wiki/Database

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Terminology and overview2HistoryToggle History subsection2.11960s, navigational DBMS2.21970s, relational DBMS2.3Integrated approach2.4Late 1970s, SQL DBMS2.51980s, on the desktop2.61990s, object-oriented2.72000s, NoSQL and NewSQL3Use cases4Classification5Database management system6ApplicationToggle Application subsection6.1Application program interface7Database languages8StorageToggle Storage subsection8.1Materialized views8.2Replication8.3Virtualization9Security10Transactions and concurrency11Migration12Building, maintaining, and tuning13Backup and restore14Static analysis15Miscellaneous features16Design and modelingToggle Design and modeling subsection16.1Models16.2External, conceptual, and internal views17Research18See also19Notes20References21Sources22Further reading23External linksToggle the table of contentsDatabase103 languagesAfrikaansአማርኛالعربيةAragonésAsturianuAzərbaycancaتۆرکجهবাংলা閩南語 / Bân-lâm-gúБеларускаяБеларуская (тарашкевіца)БългарскиBoarischBosanskiBrezhonegCatalàČeštinaCymraegDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisFryskGaeilgeGalego한국어Հայերենहिन्दीHrvatskiIdoBahasa IndonesiaInterlinguaIsiZuluÍslenskaItalianoעבריתJawaქართულიҚазақшаKiswahiliKurdîКыргызчаLatinaLatviešuLietuviųLingua Franca NovaLombardMagyarМакедонскиമലയാളംمصرىBahasa MelayuMirandésМонголမြန်မာဘာသာNederlands日本語Norsk bokmålNorsk nynorskOccitanОлык марийOromooOʻzbekcha / ўзбекчаਪੰਜਾਬੀپښتوPolskiPortuguêsQaraqalpaqshaRomânăRuna SimiРусскийSeelterskShqipSicilianuසිංහලSimple EnglishSlovenčinaSlovenščinaکوردیСрпски / srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaTagalogதமிழ்Татарча / tatarçaతెలుగుไทยТоҷикӣTürkçeУкраїнськаئۇيغۇرچە / UyghurcheTiếng ViệtWalonWinaray吴语粵語中文Edit linksArticleTalkEnglishReadView sourceView historyToolsToolsmove to sidebarhideActionsReadView sourceView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsWikimedia CommonsWikiversityAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaOrganized collection of data in computingThis article is about the computing concept. For instances of the general concept, seeLists of databases.AnSQLselect statement and its resultIncomputing, adatabaseis an organized collection ofdataor a type ofdata storebased on the use of adatabase management system(DBMS), thesoftwarethat interacts withend users,applications, and the database itself to capture and analyze the data. The DBMS additionally encompasses the core facilities provided to administer the database. The sum total of the database, the DBMS and the associated applications can be referred to as adatabase system. Often the term "database" is also used loosely to refer to any of the DBMS, the database system or an application associated with the database.Small databases can be stored on afile system, while large databases are hosted oncomputer clustersorcloud storage. Thedesign of databasesspans formal techniques and practical considerations, includingdata modeling, efficient data representation and storage,query languages,securityandprivacyof sensitive data, anddistributed computingissues, including supportingconcurrentaccess andfault tolerance.Computer scientistsmay classify database management systems according to thedatabase modelsthat they support.Relational databasesbecame dominant in the 1980s. These model data asrowsandcolumnsin a series oftables, and the vast majority useSQLfor writing and querying data. In the 2000s, non-relational databases became popular, collectively referred to asNoSQL, because they use differentquery languages.Terminology and overviewFormally, a "database" refers to a set of related data accessed through the use of a "database management system" (DBMS), which is an integrated set ofcomputer softwarethat allowsusersto interact with one or more databases and provides access to all of the data contained in the database (although restrictions may exist that limit access to particular data). The DBMS provides various functions that allow entry, storage and retrieval of large quantities of information and provides ways to manage how that information is organized.Because of the close relationship between them, the term "database" is often used casually to refer to both a database and the DBMS used to manipulate it.Outside the world of professionalinformation technology, the termdatabaseis often used to refer to any collection of related data (such as aspreadsheetor a card index) as size and usage requirements typically necessitate use of a database management system.[1]Existing DBMSs provide various functions that allow management of a database and its data which can be classified into four main functional groups:Data definition– Creation, modification and removal of definitions that detail how the data is to be organized.Update– Insertion, modification, and deletion of the data itself.[2]Retrieval– Selecting data according to specified criteria (e.g., a query, a position in a hierarchy, or a position in relation to other data) and providing that data either directly to the user, or making it available for further processing by the database itself or by other applications. The retrieved data may be made available in a more or less direct form without modification, as it is stored in the database, or in a new form obtained by altering it or combining it with existing data from the database.[3]Administration– Registering and monitoring users, enforcing data security, monitoring performance, maintaining data integrity, dealing with concurrency control, and recovering information that has been corrupted by some event such as an unexpected system failure.[4]Both a database and its DBMS conform to the principles of a particulardatabase model.[5]"Database system" refers collectively to the database model, database management system, and database.[6]Physically, databaseserversare dedicated computers that hold the actual databases and run only the DBMS and related software. Database servers are usuallymultiprocessorcomputers, with generous memory andRAIDdisk arrays used for stable storage. Hardware database accelerators, connected to one or more servers via a high-speed channel, are also used in large-volumetransaction processing environments. DBMSs are found at the heart of mostdatabase applications. DBMSs may be built around a custommultitaskingkernelwith built-innetworkingsupport, but modern DBMSs typically rely on a standardoperating systemto provide these functions.[citation needed]Since DBMSs comprise a significantmarket, computer and storage vendors often take into account DBMS requirements in their own development plans.[7]Databases and DBMSs can be categorized according to the database model(s) that they support (such asrelationalorXML), the type(s) of computer they run on (from aserver clusterto amobile phone), thequery language(s) used to access the database (such as SQL orXQuery), and their internal engineering, which affects performance,scalability, resilience, and security.HistoryThe sizes, capabilities, and performance of databases and their respective DBMSs have grown in orders of magnitude. These performance increases were enabled by the technology progress in the areas ofprocessors,computer memory,computer storage, andcomputer networks. The concept of a database was made possible by the emergence of direct accessstorage mediasuch asmagnetic disks, which became widely available in the mid-1960s; earlier systems relied on sequential storage of data onmagnetic tape. The subsequent development of database technology can be divided into three eras based on data model or structure:navigational,[8]SQL/relational, and post-relational.The two main early navigationaldata modelswere thehierarchical modeland theCODASYLmodel (network model). These were characterized by the use ofpointers(often physical disk addresses) to follow relationships from one record to another.Therelational model, first proposed in 1970 byEdgar F. Codd, departed from this tradition by insisting thatapplicationsshould search for data by content, rather than by following links. The relational model employs sets of ledger-style tables, each used for a different type ofentity. Only in the mid-1980s did computing hardware become powerful enough to allow the wide deployment of relational systems (DBMSs plus applications). By the early 1990s, however, relational systems dominated in all large-scaledata processingapplications, and as of 2018[update]they remain dominant:IBM Db2,Oracle,MySQL, andMicrosoft SQL Serverare the most searchedDBMS.[9]The dominant database language, standardized SQL for the relational model, has influenced database languages for other data models.[citation needed]Object databaseswere developed in the 1980s to overcome the inconvenience ofobject–relational impedance mismatch, which led to the coining of the term "post-relational" and also the development of hybridobject–relational databases.The next generation of post-relational databases in the late 2000s became known asNoSQLdatabases, introducing fastkey–value storesanddocument-oriented databases. A competing "next generation" known asNewSQLdatabases attempted new implementations that retained the relational/SQL model while aiming to match the high performance of NoSQL compared to commercially available relational DBMSs.1960s, navigational DBMSFurther information:Navigational databaseBasic structure of navigationalCODASYLdatabase modelThe introduction of the termdatabasecoincided with the availability of direct-access storage (disks and drums) from the mid-1960s onwards. The term represented a contrast with the tape-based systems of the past, allowing shared interactive use rather than dailybatch processing. TheOxford English Dictionarycites a 1962 report by theSystem Development Corporationof California as the first to use the term "data-base" in a specific technical sense.[10]As computers grew in speed and capability, a number of general-purpose database systems emerged; by the mid-1960s a number of such systems had come into commercial use. Interest in a standard began to grow, andCharles Bachman, author of one such product, theIntegrated Data Store(IDS), founded theDatabase Task GroupwithinCODASYL, the group responsible for the creation and standardization ofCOBOL. In 1971, the Database Task Group delivered their standard, which generally became known as theCODASYL approach, and soon a number of commercial products based on this approach entered the market.The CODASYL approach offered applications the ability to navigate around a linked data set which was formed into a large network. Applications could find records by one of three methods:Use of a primary key (known as a CALC key, typically implemented byhashing)Navigating relationships (calledsets) from one record to anotherScanning all the records in a sequential orderLater systems addedB-treesto provide alternate access paths. Many CODASYL databases also added a declarative query language for end users (as distinct from the navigationalAPI). However, CODASYL databases were complex and required significant training and effort to produce useful applications.IBMalso had its own DBMS in 1966, known asInformation Management System(IMS). IMS was a development of software written for theApollo programon theSystem/360. IMS was generally similar in concept to CODASYL, but used a strict hierarchy for its model of data navigation instead of CODASYL's network model. Both concepts later became known as navigational databases due to the way data was accessed: the term was popularized by Bachman's 1973Turing AwardpresentationThe Programmer as Navigator. IMS is classified by IBM as ahierarchical database. IDMS andCincom Systems'TOTAL[broken anchor]databases are classified as network databases. IMS remains in use as of 2014[update].[11]1970s, relational DBMSEdgar F. Coddworked at IBM inSan Jose, California, in one of their offshoot offices that were primarily involved in the development ofhard disksystems. He was unhappy with the navigational model of the CODASYL approach, notably the lack of a "search" facility. In 1970, he wrote a number of papers that outlined a new approach to database construction that eventually culminated in the groundbreakingA Relational Model of Data for Large Shared Data Banks.[12]In this paper, he described a new system for storing and working with large databases. Instead of records being stored in some sort oflinked listof free-form records as in CODASYL, Codd's idea was to organize the data as a number of "tables", each table being used for a different type of entity. Each table would contain a fixed number of columns containing the attributes of the entity. One or more columns of each table were designated as aprimary keyby which the rows of the table could be uniquely identified; cross-references between tables always used these primary keys, rather than disk addresses, and queries would join tables based on these key relationships, using a set of operations based on the mathematical system ofrelational calculus(from which the model takes its name). Splitting the data into a set of normalized tables (orrelations) aimed to ensure that each "fact" was only stored once, thus simplifying update operations. Virtual tables calledviewscould present the data in different ways for different users, but views could not be directly updated.Codd used mathematical terms to define the model: relations, tuples, and domains rather than tables, rows, and columns. The terminology that is now familiar came from early implementations. Codd would later criticize the tendency for practical implementations to depart from the mathematical foundations on which the model was based.In therelational model, records are "linked" using virtual keys not stored in the database but defined as needed between the data contained in the records.The use of primary keys (user-oriented identifiers) to represent cross-table relationships, rather than disk addresses, had two primary motivations. From an engineering perspective, it enabled tables to be relocated and resized without expensive database reorganization. But Codd was more interested in the difference in semantics: the use of explicit identifiers made it easier to define update operations with clean mathematical definitions, and it also enabled query operations to be defined in terms of the established discipline offirst-order predicate calculus; because these operations have clean mathematical properties, it becomes possible to rewrite queries in provably correct ways, which is the basis of query optimization. There is no loss of expressiveness compared with the hierarchic or network models, though the connections between tables are no longer so explicit.In the hierarchic and network models, records were allowed to have a complex internal structure. For example, the salary history of an employee might be represented as a "repeating group" within the employee record. In the relational model, the process of normalization led to such internal structures being replaced by data held in multiple tables, connected only by logical keys.For instance, a common use of a database system is to track information about users, their name, login information, various addresses and phone numbers. In the navigational approach, all of this data would be placed in a single variable-length record. In the relational approach, the data would benormalizedinto a user table, an address table and a phone number table (for instance). Records would be created in these optional tables only if the address or phone numbers were actually provided.As well as identifying rows/records using logical identifiers rather than disk addresses, Codd changed the way in which applications assembled data from multiple records. Rather than requiring applications to gather data one record at a time by navigating the links, they would use a declarative query language that expressed what data was required, rather than the access path by which it should be found. Finding an efficient access path to the data became the responsibility of the database management system, rather than the application programmer. This process, called query optimization, depended on the fact that queries were expressed in terms of mathematical logic.Codd's paper was picked up by two people at Berkeley, Eugene Wong andMichael Stonebraker. They started a project known asINGRESusing funding that had already been allocated for a geographical database project and student programmers to produce code. Beginning in 1973, INGRES delivered its first test products which were generally ready for widespread use in 1979. INGRES was similar toSystem Rin a number of ways, including the use of a "language" fordata access, known asQUEL. Over time, INGRES moved to the emerging SQL standard.IBM itself did one test implementation of the relational model,PRTV, and a production one,Business System 12, both now discontinued.HoneywellwroteMRDSforMultics, and now there are two new implementations:Alphora Dataphorand Rel. Most other DBMS implementations usually calledrelationalare actually SQL DBMSs.In 1970, the University of Michigan began development of theMICRO Information Management System[13]based onD.L. Childs' Set-Theoretic Data model.[14][15][16]MICRO was used to manage very large data sets by theUS Department of Labor, theU.S. Environmental Protection Agency, and researchers from theUniversity of Alberta, theUniversity of Michigan, andWayne State University. It ran on IBM mainframe computers using theMichigan Terminal System.[17]The system remained in production until 1998.Integrated approachMain article:Database machineIn the 1970s and 1980s, attempts were made to build database systems with integrated hardware and software. The underlying philosophy was that such integration would provide higher performance at a lower cost. Examples wereIBM System/38, the early offering ofTeradata, and theBritton Lee, Inc.database machine.Another approach to hardware support for database management wasICL'sCAFSaccelerator, a hardware disk controller with programmable search capabilities. In the long term, these efforts were generally unsuccessful because specialized database machines could not keep pace with the rapid development and progress of general-purpose computers. Thus most database systems nowadays are software systems running on general-purpose hardware, using general-purpose computer data storage. However, this idea is still pursued in certain applications by some companies likeNetezzaand Oracle (Exadata).Late 1970s, SQL DBMSIBM started working on a prototype system loosely based on Codd's concepts asSystem Rin the early 1970s. The first version was ready in 1974/5, and work then started on multi-table systems in which the data could be split so that all of the data for a record (some of which is optional) did not have to be stored in a single large "chunk". Subsequent multi-user versions were tested by customers in 1978 and 1979, by which time a standardizedquery language– SQL[citation needed]– had been added. Codd's ideas were establishing themselves as both workable and superior to CODASYL, pushing IBM to develop a true production version of System R, known asSQL/DS, and, later,Database 2(IBM Db2).Larry Ellison's Oracle Database (or more simply,Oracle) started from a different chain, based on IBM's papers on System R. Though Oracle V1 implementations were completed in 1978, it was not until Oracle Version 2 when Ellison beat IBM to market in 1979.[18]Stonebraker went on to apply the lessons from INGRES to develop a new database, Postgres, which is now known asPostgreSQL. PostgreSQL is often used for global mission-critical applications (the .org and .info domain name registries use it as their primarydata store, as do many large companies and financial institutions).In Sweden, Codd's paper was also read andMimer SQLwas developed in the mid-1970s atUppsala University. In 1984, this project was consolidated into an independent enterprise.Another data model, theentity–relationship model, emerged in 1976 and gained popularity fordatabase designas it emphasized a more familiar description than the earlier relational model. Later on, entity–relationship constructs were retrofitted as adata modelingconstruct for the relational model, and the difference between the two has become irrelevant.[citation needed]1980s, on the desktopThe 1980s ushered in the age ofdesktop computing. The new computers empowered their users with spreadsheets likeLotus 1-2-3and database software likedBASE. The dBASE product was lightweight and easy for any computer user to understand out of the box.C. Wayne Ratliff, the creator of dBASE, stated: "dBASE was different from programs like BASIC, C, FORTRAN, and COBOL in that a lot of the dirty work had already been done. The data manipulation is done by dBASE instead of by the user, so the user can concentrate on what he is doing, rather than having to mess with the dirty details of opening, reading, and closing files, and managing space allocation."[19]dBASE was one of the top selling software titles in the 1980s and early 1990s.1990s, object-orientedThe 1990s, along with a rise inobject-oriented programming, saw a growth in how data in various databases were handled. Programmers and designers began to treat the data in their databases asobjects. That is to say that if a person's data were in a database, that person's attributes, such as their address, phone number, and age, were now considered to belong to that person instead of being extraneous data. This allows for relations between data to be related to objects and theirattributesand not to individual fields.[20]The term "object–relational impedance mismatch" described the inconvenience of translating between programmed objects and database tables.Object databasesandobject–relational databasesattempt to solve this problem by providing an object-oriented language (sometimes as extensions to SQL) that programmers can use as alternative to purely relational SQL. On the programming side, libraries known asobject–relational mappings(ORMs) attempt to solve the same problem.2000s, NoSQL and NewSQLMain articles:NoSQLandNewSQLXML databasesare a type of structured document-oriented database that allows querying based onXMLdocument attributes. XML databases are mostly used in applications where the data is conveniently viewed as a collection of documents, with a structure that can vary from the very flexible to the highly rigid: examples include scientific articles, patents, tax filings, and personnel records.NoSQLdatabases are often very fast, do not require fixed table schemas, avoid join operations by storingdenormalizeddata, and are designed toscale horizontally.In recent years, there has been a strong demand for massively distributed databases with high partition tolerance, but according to theCAP theorem, it is impossible for adistributed systemto simultaneously provideconsistency, availability, and partition tolerance guarantees. A distributed system can satisfy any two of these guarantees at the same time, but not all three. For that reason, many NoSQL databases are using what is calledeventual consistencyto provide both availability and partition tolerance guarantees with a reduced level of data consistency.NewSQLis a class of modern relational databases that aims to provide the same scalable performance of NoSQL systems for online transaction processing (read-write) workloads while still using SQL and maintaining theACIDguarantees of a traditional database system.Use casesThis sectiondoes notciteanysources.Please helpimprove this sectionbyadding citations to reliable sources. Unsourced material may be challenged andremoved.(March 2013)(Learn how and when to remove this message)Databases are used to support internal operations of organizations and to underpin online interactions with customers and suppliers (seeEnterprise software).Databases are used to hold administrative information and more specialized data, such as engineering data or economic models. Examples include computerizedlibrarysystems,flight reservation systems, computerizedparts inventory systems, and manycontent management systemsthat storewebsitesas collections of webpages in a database.ClassificationOne way to classify databases involves the type of their contents, for example:bibliographic, document-text, statistical, or multimedia objects. Another way is by their application area, for example: accounting, music compositions, movies, banking, manufacturing, or insurance. A third way is by some technical aspect, such as the database structure or interface type. This section lists a few of the adjectives used to characterize different kinds of databases.Anin-memory databaseis a database that primarily resides inmain memory, but is typically backed-up by non-volatile computer data storage. Main memory databases are faster than disk databases, and so are often used where response time is critical, such as in telecommunications network equipment.Anactive databaseincludes an event-driven architecture which can respond to conditions both inside and outside the database. Possible uses include security monitoring, alerting, statistics gathering and authorization. Many databases provide active database features in the form ofdatabase triggers.Acloud databaserelies oncloud technology. Both the database and most of its DBMS reside remotely, "in the cloud", while its applications are both developed by programmers and later maintained and used by end-users through aweb browserandOpen APIs.Data warehouses[citation needed]archive data from operational databases and often from external sources such as market research firms. The warehouse becomes the central source of data for use by managers and other end-users who may not have access to operational data. For example, sales data might be aggregated to weekly totals and converted from internal product codes to useUPCsso that they can be compared withACNielsendata. Some basic and essential components of data warehousing include extracting, analyzing, andminingdata, transforming, loading, and managing data so as to make them available for further use.Adeductive databasecombineslogic programmingwith a relational database.Adistributed databaseis one in which both the data and the DBMS span multiple computers.Adocument-oriented databaseis designed for storing, retrieving, and managing document-oriented, or semi structured, information. Document-oriented databases are one of the main categories of NoSQL databases.Anembedded databasesystem is a DBMS which is tightly integrated with an application software that requires access to stored data in such a way that the DBMS is hidden from the application's end-users and requires little or no ongoing maintenance.[21]End-user databases consist of data developed by individual end-users. Examples of these are collections of documents, spreadsheets, presentations, multimedia, and other files. Several products[which?]exist to support such databases.Afederated database systemcomprises several distinct databases, each with its own DBMS. It is handled as a single database by a federated database management system (FDBMS), which transparently integrates multiple autonomous DBMSs, possibly of different types (in which case it would also be aheterogeneous database system), and provides them with an integrated conceptual view.Sometimes the termmulti-databaseis used as a synonym for federated database, though it may refer to a less integrated (e.g., without an FDBMS and a managed integrated schema) group of databases that cooperate in a single application. In this case, typicallymiddlewareis used for distribution, which typically includes an atomic commit protocol (ACP), e.g., thetwo-phase commit protocol, to allowdistributed (global) transactionsacross the participating databases.Agraph databaseis a kind of NoSQL database that usesgraph structureswith nodes, edges, and properties to represent and store information. General graph databases that can store any graph are distinct from specialized graph databases such astriplestoresandnetwork databases.Anarray DBMSis a kind of NoSQL DBMS that allows modeling, storage, and retrieval of (usually large) multi-dimensionalarrayssuch as satellite images and climate simulation output.In ahypertextorhypermediadatabase, any word or a piece of text representing an object, e.g., another piece of text, an article, a picture, or a film, can behyperlinkedto that object. Hypertext databases are particularly useful for organizing large amounts of disparate information. For example, they are useful for organizingonline encyclopedias, where users can conveniently jump around the text. TheWorld Wide Webis thus a large distributed hypertext database.Aknowledge base(abbreviatedKB,kbor Δ[22][23]) is a special kind of database forknowledge management, providing the means for the computerized collection, organization, andretrievalofknowledge. Also a collection of data representing problems with their solutions and related experiences.Amobile databasecan be carried on or synchronized from a mobile computing device.Operational databasesstore detailed data about the operations of an organization. They typically process relatively high volumes of updates usingtransactions. Examples includecustomer databasesthat record contact, credit, and demographic information about a business's customers, personnel databases that hold information such as salary, benefits, skills data about employees,enterprise resource planningsystems that record details about product components, parts inventory, and financial databases that keep track of the organization's money, accounting and financial dealings.Aparallel databaseseeks to improve performance throughparallelizationfor tasks such as loading data, building indexes and evaluating queries.The major parallel DBMS architectures which are induced by the underlyinghardwarearchitecture are:Shared memory architecture, where multiple processors share the main memory space, as well as other data storage.Shared disk architecture, where each processing unit (typically consisting of multiple processors) has its own main memory, but all units share the other storage.Shared-nothing architecture, where each processing unit has its own main memory and other storage.Probabilistic databasesemployfuzzy logicto draw inferences from imprecise data.Real-time databasesprocess transactions fast enough for the result to come back and be acted on right away.Aspatial databasecan store the data with multidimensional features. The queries on such data include location-based queries, like "Where is the closest hotel in my area?".Atemporal databasehas built-in time aspects, for example a temporal data model and a temporal version ofSQL. More specifically the temporal aspects usually include valid-time and transaction-time.Aterminology-oriented databasebuilds upon anobject-oriented database, often customized for a specific field.Anunstructured datadatabase is intended to store in a manageable and protected way diverse objects that do not fit naturally and conveniently in common databases. It may include email messages, documents, journals, multimedia objects, etc. The name may be misleading since some objects can be highly structured. However, the entire possible object collection does not fit into a predefined structured framework. Most established DBMSs now support unstructured data in various ways, and new dedicated DBMSs are emerging.Database management systemConnolly and Begg define database management system (DBMS) as a "software system that enables users to define, create, maintain and control access to the database."[24]Examples of DBMS's includeMySQL,MariaDB,PostgreSQL,Microsoft SQL Server,Oracle Database, andMicrosoft Access.The DBMS acronym is sometimes extended to indicate the underlyingdatabase model, with RDBMS for therelational, OODBMS for theobject (oriented)and ORDBMS for theobject–relational model. Other extensions can indicate some other characteristics, such as DDBMS for a distributed database management systems.The functionality provided by a DBMS can vary enormously. The core functionality is the storage, retrieval and update of data.Coddproposed the following functions and services a fully-fledged general purpose DBMS should provide:[25]Data storage, retrieval and updateUser accessible catalog ordata dictionarydescribing the metadataSupport for transactions and concurrencyFacilities for recovering the database should it become damagedSupport for authorization of access and update of dataAccess support from remote locationsEnforcing constraints to ensure data in the database abides by certain rulesIt is also generally to be expected the DBMS will provide a set of utilities for such purposes as may be necessary to administer the database effectively, including import, export, monitoring, defragmentation and analysis utilities.[26]The core part of the DBMS interacting between the database and the application interface sometimes referred to as thedatabase engine.Often DBMSs will have configuration parameters that can be statically and dynamically tuned, for example the maximum amount of main memory on a server the database can use. The trend is to minimize the amount of manual configuration, and for cases such asembedded databasesthe need to target zero-administration is paramount.The large major enterprise DBMSs have tended to increase in size and functionality and have involved up to thousands of human years of development effort throughout their lifetime.[a]Early multi-user DBMS typically only allowed for the application to reside on the same computer with access viaterminalsor terminal emulation software. Theclient–server architecturewas a development where the application resided on a client desktop and the database on a server allowing the processing to be distributed. This evolved into amultitier architectureincorporatingapplication serversandweb serverswith the end user interface via aweb browserwith the database only directly connected to the adjacent tier.[28]A general-purpose DBMS will provide publicapplication programming interfaces(API) and optionally a processor fordatabase languagessuch asSQLto allow applications to be written to interact with and manipulate the database. A special purpose DBMS may use a private API and be specifically customized and linked to a single application. For example, anemailsystem performs many of the functions of a general-purpose DBMS such as message insertion, message deletion, attachment handling, blocklist lookup, associating messages an email address and so forth however these functions are limited to what is required to handle email.ApplicationMain article:Database applicationExternal interaction with the database will be via an application program that interfaces with the DBMS.[29]This can range from adatabase toolthat allows users to execute SQL queries textually or graphically, to a website that happens to use a database to store and search information.Application program interfaceAprogrammerwillcodeinteractions to the database (sometimes referred to as adatasource) via anapplication program interface(API) or via adatabase language. The particular API or language chosen will need to be supported by DBMS, possibly indirectly via apreprocessoror a bridging API. Some API's aim to be database independent,ODBCbeing a commonly known example. Other common API's includeJDBCandADO.NET.Database languagesDatabase languages are special-purpose languages, which allow one or more of the following tasks, sometimes distinguished assublanguages:Data control language(DCL) – controls access to data;Data definition language(DDL) – defines data types such as creating, altering, or dropping tables and the relationships among them;Data manipulation language(DML) – performs tasks such as inserting, updating, or deleting data occurrences;Data query language(DQL) – allows searching for information and computing derived information.Database languages are specific to a particular data model. Notable examples include:SQL combines the roles of data definition, data manipulation, and query in a single language. It was one of the first commercial languages for the relational model, although it departs in some respects fromthe relational model as described by Codd(for example, the rows and columns of a table can be ordered). SQL became a standard of theAmerican National Standards Institute(ANSI) in 1986, and of theInternational Organization for Standardization(ISO) in 1987. The standards have been regularly enhanced since and are supported (with varying degrees of conformance) by all mainstream commercial relational DBMSs.[30][31]OQLis an object model language standard (from theObject Data Management Group). It has influenced the design of some of the newer query languages likeJDOQLandEJB QL.XQueryis a standard XML query language implemented by XML database systems such asMarkLogicandeXist, by relational databases with XML capability such as Oracle and Db2, and also by in-memory XML processors such asSaxon.SQL/XMLcombinesXQuerywith SQL.[32]A database language may also incorporate features like:DBMS-specific configuration and storage engine managementComputations to modify query results, like counting, summing, averaging, sorting, grouping, and cross-referencingConstraint enforcement (e.g. in an automotive database, only allowing one engine type per car)Application programming interface version of the query language, for programmer convenienceStorageMain articles:Computer data storageandDatabase engineDatabase storage is the container of the physical materialization of a database. It comprises theinternal(physical)levelin the database architecture. It also contains all the information needed (e.g.,metadata, "data about the data", and internaldata structures) to reconstruct theconceptual levelandexternal levelfrom the internal level when needed. Databases as digital objects contain three layers of information which must be stored: the data, the structure, and the semantics. Proper storage of all three layers is needed for futurepreservationand longevity of the database.[33]Putting data into permanent storage is generally the responsibility of thedatabase enginea.k.a. "storage engine". Though typically accessed by a DBMS through the underlying operating system (and often using the operating systems'file systemsas intermediates for storage layout), storage properties and configuration settings are extremely important for the efficient operation of the DBMS, and thus are closely maintained by database administrators. A DBMS, while in operation, always has its database residing in several types of storage (e.g., memory and external storage). The database data and the additional needed information, possibly in very large amounts, are coded into bits. Data typically reside in the storage in structures that look completely different from the way the data look at the conceptual and external levels, but in ways that attempt to optimize (the best possible) these levels' reconstruction when needed by users and programs, as well as for computing additional types of needed information from the data (e.g., when querying the database).Some DBMSs support specifying whichcharacter encodingwas used to store data, so multiple encodings can be used in the same database.Various low-leveldatabase storage structuresare used by the storage engine to serialize the data model so it can be written to the medium of choice. Techniques such as indexing may be used to improve performance. Conventional storage is row-oriented, but there are alsocolumn-orientedandcorrelation databases.Materialized viewsMain article:Materialized viewOften storage redundancy is employed to increase performance. A common example is storingmaterialized views, which consist of frequently neededexternal viewsor query results. Storing such views saves the expensive computing them each time they are needed. The downsides of materialized views are the overhead incurred when updating them to keep them synchronized with their original updated database data, and the cost of storage redundancy.ReplicationSee also:Replication (computing) § Database replicationOccasionally a database employs storage redundancy by database objects replication (with one or more copies) to increase data availability (both to improve performance of simultaneous multiple end-user accesses to the same database object, and to provide resiliency in a case of partial failure of a distributed database). Updates of a replicated object need to be synchronized across the object copies. In many cases, the entire database is replicated.VirtualizationWithdata virtualization, the data used remains in its original locations and real-time access is established to allow analytics across multiple sources. This can aid in resolving some technical difficulties such as compatibility problems when combining data from various platforms, lowering the risk of error caused by faulty data, and guaranteeing that the newest data is used. Furthermore, avoiding the creation of a new database containing personal information can make it easier to comply with privacy regulations. However, with data virtualization, the connection to all necessary data sources must be operational as there is no local copy of the data, which is one of the main drawbacks of the approach.[34]SecurityThis articleappears to contradict the articleDatabase security.Please discuss at thetalk pageand do not remove this message until the contradictions are resolved.(March 2013)Main article:Database securityDatabase securitydeals with all various aspects of protecting the database content, its owners, and its users. It ranges from protection from intentional unauthorized database uses to unintentional database accesses by unauthorized entities (e.g., a person or a computer program).Database access control deals with controlling who (a person or a certain computer program) are allowed to access what information in the database. The information may comprise specific database objects (e.g., record types, specific records, data structures), certain computations over certain objects (e.g., query types, or specific queries), or using specific access paths to the former (e.g., using specific indexes or other data structures to access information). Database access controls are set by special authorized (by the database owner) personnel that uses dedicated protected security DBMS interfaces.This may be managed directly on an individual basis, or by the assignment of individuals andprivilegesto groups, or (in the most elaborate models) through the assignment of individuals and groups to roles which are then granted entitlements. Data security prevents unauthorized users from viewing or updating the database. Using passwords, users are allowed access to the entire database or subsets of it called "subschemas". For example, an employee database can contain all the data about an individual employee, but one group of users may be authorized to view only payroll data, while others are allowed access to only work history and medical data. If the DBMS provides a way to interactively enter and update the database, as well as interrogate it, this capability allows for managing personal databases.Data securityin general deals with protecting specific chunks of data, both physically (i.e., from corruption, or destruction, or removal; e.g., seephysical security), or the interpretation of them, or parts of them to meaningful information (e.g., by looking at the strings of bits that they comprise, concluding specific valid credit-card numbers; e.g., seedata encryption).Change and access logging records who accessed which attributes, what was changed, and when it was changed. Logging services allow for a forensicdatabase auditlater by keeping a record of access occurrences and changes. Sometimes application-level code is used to record changes rather than leaving this in the database. Monitoring can be set up to attempt to detect security breaches. Therefore, organizations must take database security seriously because of the many benefits it provides. Organizations will be safeguarded from security breaches and hacking activities like firewall intrusion, virus spread, and ransom ware. This helps in protecting the company's essential information, which cannot be shared with outsiders at any cause.[35]Transactions and concurrencyFurther information:Concurrency controlDatabase transactionscan be used to introduce some level offault toleranceanddata integrityafter recovery from acrash. A database transaction is a unit of work, typically encapsulating a number of operations over a database (e.g., reading a database object, writing, acquiring or releasing alock, etc.), an abstraction supported in database and also other systems. Each transaction has well defined boundaries in terms of which program/code executions are included in that transaction (determined by the transaction's programmer via special transaction commands).The acronymACIDdescribes some ideal properties of a database transaction:atomicity,consistency,isolation, anddurability.MigrationSee also:Data migration § Database migrationA database built with one DBMS is not portable to another DBMS (i.e., the other DBMS cannot run it). However, in some situations, it is desirable to migrate a database from one DBMS to another. The reasons are primarily economical (different DBMSs may have differenttotal costs of ownershipor TCOs), functional, and operational (different DBMSs may have different capabilities). The migration involves the database's transformation from one DBMS type to another. The transformation should maintain (if possible) the database related application (i.e., all related application programs) intact. Thus, the database's conceptual and external architectural levels should be maintained in the transformation. It may be desired that also some aspects of the architecture internal level are maintained. A complex or large database migration may be a complicated and costly (one-time) project by itself, which should be factored into the decision to migrate. This is in spite of the fact that tools may exist to help migration between specific DBMSs. Typically, a DBMS vendor provides tools to help import databases from other popular DBMSs.Building, maintaining, and tuningMain article:Database tuningAfter designing a database for an application, the next stage is building the database. Typically, an appropriate general-purpose DBMS can be selected to be used for this purpose. A DBMS provides the neededuser interfacesto be used by database administrators to define the needed application's data structures within the DBMS's respective data model. Other user interfaces are used to select needed DBMS parameters (like security related, storage allocation parameters, etc.).When the database is ready (all its data structures and other needed components are defined), it is typically populated with initial application's data (database initialization, which is typically a distinct project; in many cases using specialized DBMS interfaces that support bulk insertion) before making it operational. In some cases, the database becomes operational while empty of application data, and data are accumulated during its operation.After the database is created, initialized and populated it needs to be maintained. Various database parameters may need changing and the database may need to be tuned (tuning) for better performance; application's data structures may be changed or added, new related application programs may be written to add to the application's functionality, etc.Backup and restoreMain article:BackupSometimes it is desired to bring a database back to a previous state (for many reasons, e.g., cases when the database is found corrupted due to a software error, or if it has been updated with erroneous data). To achieve this, a backup operation is done occasionally or continuously, where each desired database state (i.e., the values of its data and their embedding in database's data structures) is kept within dedicated backup files (many techniques exist to do this effectively). When it is decided by a database administrator to bring the database back to this state (e.g., by specifying this state by a desired point in time when the database was in this state), these files are used to restore that state.Static analysisStatic analysis techniques for software verification can be applied also in the scenario of query languages. In particular, the *Abstract interpretationframework has been extended to the field of query languages for relational databases as a way to support sound approximation techniques.[36]The semantics of query languages can be tuned according to suitable abstractions of the concrete domain of data. The abstraction of relational database systems has many interesting applications, in particular, for security purposes, such as fine-grained access control, watermarking, etc.Miscellaneous featuresOther DBMS features might include:Database logs– This helps in keeping a history of the executed functions.Graphics component for producing graphs and charts, especially in a data warehouse system.Query optimizer– Performs query optimization on every query to choose an efficientquery plan(a partial order (tree) of operations) to be executed to compute the query result. May be specific to a particular storage engine.Tools or hooks for database design, application programming, application program maintenance, database performance analysis and monitoring, database configuration monitoring, DBMS hardware configuration (a DBMS and related database may span computers, networks, and storage units) and related database mapping (especially for a distributed DBMS), storage allocation and database layout monitoring, storage migration, etc.Increasingly, there are calls for a single system that incorporates all of these core functionalities into the same build, test, and deployment framework for database management and source control. Borrowing from other developments in the software industry, some market such offerings as "DevOpsfor database".[37]Design and modelingMain article:Database designThe first task of a database designer is to produce aconceptual data modelthat reflects the structure of the information to be held in the database. A common approach to this is to develop anentity–relationship model, often with the aid of drawing tools. Another popular approach is theUnified Modeling Language. A successful data model will accurately reflect the possible state of the external world being modeled: for example, if people can have more than one phone number, it will allow this information to be captured. Designing a good conceptual data model requires a good understanding of the application domain; it typically involves asking deep questions about the things of interest to an organization, like "can a customer also be a supplier?", or "if a product is sold with two different forms of packaging, are those the same product or different products?", or "if a plane flies from New York to Dubai via Frankfurt, is that one flight or two (or maybe even three)?". The answers to these questions establish definitions of the terminology used for entities (customers, products, flights, flight segments) and their relationships and attributes.Producing the conceptual data model sometimes involves input frombusiness processes, or the analysis ofworkflowin the organization. This can help to establish what information is needed in the database, and what can be left out. For example, it can help when deciding whether the database needs to hold historic data as well as current data.Having produced a conceptual data model that users are happy with, the next stage is to translate this into aschemathat implements the relevant data structures within the database. This process is often called logical database design, and the output is alogical data modelexpressed in the form of a schema. Whereas the conceptual data model is (in theory at least) independent of the choice of database technology, the logical data model will be expressed in terms of a particular database model supported by the chosen DBMS. (The termsdata modelanddatabase modelare often used interchangeably, but in this article we usedata modelfor the design of a specific database, anddatabase modelfor the modeling notation used to express that design).The most popular database model for general-purpose databases is the relational model, or more precisely, the relational model as represented by the SQL language. The process of creating a logical database design using this model uses a methodical approach known asnormalization. The goal of normalization is to ensure that each elementary "fact" is only recorded in one place, so that insertions, updates, and deletions automatically maintain consistency.The final stage of database design is to make the decisions that affect performance, scalability, recovery, security, and the like, which depend on the particular DBMS. This is often calledphysical database design, and the output is thephysical data model. A key goal during this stage isdata independence, meaning that the decisions made for performance optimization purposes should be invisible to end-users and applications. There are two types of data independence: Physical data independence and logical data independence. Physical design is driven mainly by performance requirements, and requires a good knowledge of the expected workload and access patterns, and a deep understanding of the features offered by the chosen DBMS.Another aspect of physical database design is security. It involves both definingaccess controlto database objects as well as defining security levels and methods for the data itself.ModelsMain article:Database modelCollage of five types of database modelsA database model is a type of data model that determines the logical structure of a database and fundamentally determines in which mannerdatacan be stored, organized, and manipulated. The most popular example of a database model is the relational model (or the SQL approximation of relational), which uses a table-based format.Common logical data models for databases include:Navigational databasesHierarchical database modelNetwork modelGraph databaseRelational modelEntity–relationship modelEnhanced entity–relationship modelObject modelDocument modelEntity–attribute–value modelStar schemaAn object–relational database combines the two related structures.Physical data modelsinclude:Inverted indexFlat fileOther models include:Multidimensional modelArray modelMultivalue modelSpecialized models are optimized for particular types of data:XML databaseSemantic modelContent storeEvent storeTime series modelExternal, conceptual, and internal viewsTraditional view of data[38]A database management system provides three views of the database data:Theexternal leveldefines how each group of end-users sees the organization of data in the database. A single database can have any number of views at the external level.Theconceptual level(orlogical level) unifies the various external views into a compatible global view.[39]It provides the synthesis of all the external views. It is out of the scope of the various database end-users, and is rather of interest to database application developers and database administrators.Theinternal level(orphysical level) is the internal organization of data inside a DBMS. It is concerned with cost, performance, scalability and other operational matters. It deals with storage layout of the data, using storage structures such asindexesto enhance performance. Occasionally it stores data of individual views (materialized views), computed from generic data, if performance justification exists for such redundancy. It balances all the external views' performance requirements, possibly conflicting, in an attempt to optimize overall performance across all activities.While there is typically only one conceptual and internal view of the data, there can be any number of different external views. This allows users to see database information in a more business-related way rather than from a technical, processing viewpoint. For example, a financial department of a company needs the payment details of all employees as part of the company's expenses, but does not need details about employees that are in the interest of thehuman resourcesdepartment. Thus different departments need differentviewsof the company's database.The three-level database architecture relates to the concept ofdata independencewhich was one of the major initial driving forces of the relational model.[39]The idea is that changes made at a certain level do not affect the view at a higher level. For example, changes in the internal level do not affect application programs written using conceptual level interfaces, which reduces the impact of making physical changes to improve performance.The conceptual view provides a level of indirection between internal and external. On the one hand it provides a common view of the database, independent of different external view structures, and on the other hand it abstracts away details of how the data are stored or managed (internal level). In principle every level, and even every external view, can be presented by a different data model. In practice usually a given DBMS uses the same data model for both the external and the conceptual levels (e.g., relational model). The internal level, which is hidden inside the DBMS and depends on its implementation, requires a different level of detail and uses its own types of data structure types.ResearchDatabase technology has been an active research topic since the 1960s, both inacademiaand in the research and development groups of companies (for exampleIBM Research). Research activity includestheoryand development ofprototypes. Notable research topics have includedmodels, the atomic transaction concept, relatedconcurrency controltechniques, query languages andquery optimizationmethods,RAID, and more.The database research area has several dedicatedacademic journals(for example,ACM Transactions on Database Systems-TODS,Data and Knowledge Engineering-DKE) and annualconferences(e.g.,ACMSIGMOD, ACMPODS,VLDB,IEEEICDE).See alsoFor a topical guide, seeOutline of databases.Comparison of database toolsComparison of object database management systemsComparison of object–relational database management systemsComparison of relational database management systemsData hierarchyData bankData storeDatabase theoryDatabase testingDatabase-centric architectureDatalogDatabase-as-IPCDBOSFlat-file databaseINP (database)Journal of Database ManagementQuestion-focused datasetNotes^This article quotes a development time of five years involving 750 people for DB2 release 9 alone.[27]References^Ullman & Widom 1997, p. 1.^"Update Definition & Meaning".Merriam-Webster.Archivedfrom the original on Feb 25, 2024.^"Retrieval Definition & Meaning".Merriam-Webster.Archivedfrom the original on Jun 27, 2023.^"Administration Definition & Meaning".Merriam-Webster.Archivedfrom the original on Dec 6, 2023.^Tsitchizris & Lochovsky 1982.^Beynon-Davies 2003.^Nelson & Nelson 2001.^Bachman 1973.^"TOPDB Top Database index".pypl.github.io.^"database, n".OED Online. Oxford University Press. June 2013. RetrievedJuly 12,2013.(Subscription required.)^IBM Corporation (October 2013)."IBM Information Management System (IMS) 13 Transaction and Database Servers delivers high performance and low total cost of ownership". RetrievedFeb 20,2014.^Codd 1970.^Hershey & Easthope 1972.^North 2010.^Childs 1968a.^Childs 1968b.^M.A. Kahn; D.L. Rumelhart; B.L. Bronson (October 1977).MICRO Information Management System (Version 5.0) Reference Manual. Institute of Labor and Industrial Relations (ILIR), University of Michigan and Wayne State University.^"Oracle 30th Anniversary Timeline"(PDF).Archived(PDF)from the original on 2011-03-20. Retrieved23 August2017.^Interview with Wayne Ratliff. The FoxPro History. Retrieved on 2013-07-12.^Development of an object-oriented DBMS; Portland, Oregon, United States; Pages: 472–482; 1986;ISBN0-89791-204-7^Graves, Steve."COTS Databases For Embedded Systems"Archived2007-11-14 at theWayback Machine,Embedded Computing Designmagazine, January 2007. Retrieved on August 13, 2008.^Argumentation in Artificial Intelligence by Iyad Rahwan, Guillermo R. Simari^"OWL DL Semantics". Retrieved10 December2010.^Connolly & Begg 2014, p. 64.^Connolly & Begg 2014, pp. 97–102.^Connolly & Begg 2014, p. 102.^Chong et al. 2007.^Connolly & Begg 2014, pp. 106–113.^Connolly & Begg 2014, p. 65.^Chapple 2005.^"Structured Query Language (SQL)". International Business Machines. October 27, 2006. Retrieved2007-06-10.^Wagner 2010.^Ramalho, J.C.; Faria, L.; Helder, S.; Coutada, M. (31 December 2013)."Database Preservation Toolkit: A flexible tool to normalize and give access to databases".Biblioteca Nacional de Portugal (BNP). University of Minho.^Paiho, Satu; Tuominen, Pekka; Rökman, Jyri; Ylikerälä, Markus; Pajula, Juha; Siikavirta, Hanne (2022)."Opportunities of collected city data for smart cities".IET Smart Cities.4(4): 275–291.doi:10.1049/smc2.12044.ISSN2631-7680.S2CID253467923.^David Y. Chan; Victoria Chiu; Miklos A. Vasarhelyi (2018).Continuous auditing : theory and application(1st ed.). Bingley, UK: Emerald Publishing.ISBN978-1-78743-413-4.OCLC1029759767.^Halder & Cortesi 2011.^Ben Linders (January 28, 2016)."How Database Administration Fits into DevOps". RetrievedApril 15,2017.^itl.nist.gov (1993)Integration Definition for Information Modeling (IDEFIX)Archived2013-12-03 at theWayback Machine. 21 December 1993.^abDate 2003, pp. 31–32.SourcesBachman, Charles W.(1973)."The Programmer as Navigator".Communications of the ACM.16(11): 653–658.doi:10.1145/355611.362534.Beynon-Davies, Paul (2003).Database Systems(3rd ed.). Palgrave Macmillan.ISBN978-1403916013.Chapple, Mike (2005)."SQL Fundamentals".Databases. About.com.Archivedfrom the original on 22 February 2009. Retrieved28 January2009.Childs, David L.(1968a).Description of a set-theoretic data structure(PDF)(Technical report). CONCOMP (Research in Conversational Use of Computers) Project. University of Michigan. Technical Report 3.Childs, David L.(1968b).Feasibility of a set-theoretic data structure: a general structure based on a reconstituted definition(PDF)(Technical report). CONCOMP (Research in Conversational Use of Computers) Project. University of Michigan. Technical Report 6.Chong, Raul F.; Wang, Xiaomei; Dang, Michael; Snow, Dwaine R. (2007)."Introduction to DB2".Understanding DB2: Learning Visually with Examples(2nd ed.). IBM Press Pearson plc.ISBN978-0131580183. Retrieved17 March2013.Codd, Edgar F.(1970)."A Relational Model of Data for Large Shared Data Banks"(PDF).Communications of the ACM.13(6): 377–387.doi:10.1145/362384.362685.S2CID207549016.Connolly, Thomas M.; Begg, Carolyn E. (2014).Database Systems – A Practical Approach to Design Implementation and Management(6th ed.). Pearson.ISBN978-1292061184.Date, C. J.(2003).An Introduction to Database Systems(8th ed.). Pearson.ISBN978-0321197849.Halder, Raju; Cortesi, Agostino (2011)."Abstract Interpretation of Database Query Languages"(PDF).Computer Languages, Systems & Structures.38(2): 123–157.doi:10.1016/j.cl.2011.10.004.ISSN1477-8424.Hershey, William; Easthope, Carol (1972).A set theoretic data structure and retrieval language. Spring Joint Computer Conference, May 1972.ACM SIGIR Forum. Vol. 7, no. 4. pp. 45–55.doi:10.1145/1095495.1095500.Nelson, Anne Fulcher; Nelson, William Harris Morehead (2001).Building Electronic Commerce: With Web Database Constructions. Prentice Hall.ISBN978-0201741308.North, Ken (10 March 2010)."Sets, Data Models and Data Independence".Dr. Dobb's.Archivedfrom the original on 24 October 2012.Tsitchizris, Dionysios C.; Lochovsky, Fred H. (1982).Data Models. Prentice–Hall.ISBN978-0131964280.Ullman, Jeffrey; Widom, Jennifer (1997).A First Course in Database Systems. Prentice–Hall.ISBN978-0138613372.Wagner, Michael (2010),SQL/XML:2006 – Evaluierung der Standardkonformität ausgewählter Datenbanksysteme, Diplomica Verlag,ISBN978-3836696098Further readingLing Liuand Tamer M. Özsu (Eds.) (2009).  "Encyclopedia of Database Systems, 4100 p. 60 illus.ISBN978-0-387-49616-0.Gray, J. and Reuter, A.Transaction Processing: Concepts and Techniques, 1st edition,  Morgan Kaufmann Publishers, 1992.Kroenke, David M. and David J. Auer.Database Concepts.3rd ed. New York: Prentice, 2007.Raghu RamakrishnanandJohannes Gehrke,Database Management Systems.Abraham Silberschatz,Henry F. Korth, S. Sudarshan,Database System Concepts.Lightstone, S.; Teorey, T.; Nadeau, T. (2007).Physical Database Design: the database professional's guide to exploiting indexes, views, storage, and more. Morgan Kaufmann Press.ISBN978-0-12-369389-1.Teorey, T.; Lightstone, S. and Nadeau, T.Database Modeling & Design: Logical Design, 4th edition, Morgan Kaufmann Press, 2005.ISBN0-12-685352-5.CMU Database courses playlistMIT OCW 6.830 | Fall 2010 | Database SystemsBerkeley CS W186External linksDatabaseat Wikipedia'ssister projectsDefinitionsfrom WiktionaryMediafrom CommonsNewsfrom WikinewsQuotationsfrom WikiquoteTextsfrom WikisourceTextbooksfrom WikibooksResourcesfrom WikiversityDB File extension– information about files with the DB extensionLinks to related articlesvteComputer scienceNote: This template roughly follows the 2012ACM Computing Classification System.HardwarePrinted circuit boardPeripheralIntegrated circuitVery Large Scale IntegrationSystems on Chip (SoCs)Energy consumption (Green computing)Electronic design automationHardware accelerationProcessorSize/FormComputer systems organizationComputer architectureComputational complexityDependabilityEmbedded systemReal-time computingNetworksNetwork architectureNetwork protocolNetwork componentsNetwork schedulerNetwork performance evaluationNetwork serviceSoftware organizationInterpreterMiddlewareVirtual machineOperating systemSoftware qualitySoftware notationsandtoolsProgramming paradigmProgramming languageCompilerDomain-specific languageModeling languageSoftware frameworkIntegrated development environmentSoftware configuration managementSoftware librarySoftware repositorySoftware developmentControl variableSoftware development processRequirements analysisSoftware designSoftware constructionSoftware deploymentSoftware engineeringSoftware maintenanceProgramming teamOpen-source modelTheory of computationModel of computationFormal languageAutomata theoryComputability theoryComputational complexity theoryLogicSemanticsAlgorithmsAlgorithm designAnalysis of algorithmsAlgorithmic efficiencyRandomized algorithmComputational geometryMathematics ofcomputingDiscrete mathematicsProbabilityStatisticsMathematical softwareInformation theoryMathematical analysisNumerical analysisTheoretical computer scienceInformation systemsDatabase management systemInformation storage systemsEnterprise information systemSocial information systemsGeographic information systemDecision support systemProcess control systemMultimedia information systemData miningDigital libraryComputing platformDigital marketingWorld Wide WebInformation retrievalSecurityCryptographyFormal methodsSecurity hackerSecurity servicesIntrusion detection systemHardware securityNetwork securityInformation securityApplication securityHuman–computer interactionInteraction designSocial computingUbiquitous computingVisualizationAccessibilityConcurrencyConcurrent computingParallel computingDistributed computingMultithreadingMultiprocessingArtificial intelligenceNatural language processingKnowledge representation and reasoningComputer visionAutomated planning and schedulingSearch methodologyControl methodPhilosophy of artificial intelligenceDistributed artificial intelligenceMachine learningSupervised learningUnsupervised learningReinforcement learningMulti-task learningCross-validationGraphicsAnimationRenderingPhotograph manipulationGraphics processing unitMixed realityVirtual realityImage compressionSolid modelingApplied computingQuantum ComputingE-commerceEnterprise softwareComputational mathematicsComputational physicsComputational chemistryComputational biologyComputational social scienceComputational engineeringDifferentiable computingComputational healthcareDigital artElectronic publishingCyberwarfareElectronic votingVideo gamesWord processingOperations researchEducational technologyDocument managementCategoryOutlineGlossariesvteDatabaseMainRequirementsTheoryModelsDatabase management systemMachineEngineServerApplicationConnectiondatasourceDSNAdministratorLockTypesToolsLanguagesData definitionData manipulationQueryinformation retrievalSecurityActivity monitoringAuditForensicsNegative databaseDesignEntities and relationships(andEnhancednotation)NormalizationSchemaRefactoringCardinalityProgrammingAbstraction layerObject–relational mappingManagementVirtualizationTuningcachingMigrationPreservationIntegrityLists ofAcademicBiologicalBiodiversityFacial expressionOnlineOnline musicOnline real estateSee alsoDatabase-centric architectureIntelligent databaseTwo-phase lockingLocks with ordered sharingLoad filePublishingHalloween ProblemLog shippingWikiProjectCategoryvteDatabase management systemsTypesObject-orientedcomparisonRelationallistcomparisonKey–valueColumn-orientedlistDocument-orientedWide-column storeGraphNoSQLNewSQLIn-memorylistMulti-modelcomparisonCloudBlockchain-based databaseConceptsDatabaseACIDArmstrong's axiomsCodd's 12 rulesCAP theoremCRUDNullCandidate keyForeign keySuperkeySurrogate keyUnique keyObjectsRelationtablecolumnrowViewTransactionTransaction logTriggerIndexStored procedureCursorPartitionComponentsConcurrency controlData dictionaryJDBCXQJODBCQuery languageQuery optimizerQuery rewriting systemQuery planFunctionsAdministrationQuery optimizationReplicationShardingRelated topicsDatabase modelsDatabase normalizationDatabase storageDistributed databaseFederated database systemReferential integrityRelational algebraRelational calculusRelational modelObject–relational databaseTransaction processingCategoryOutlineWikiProjectvteData warehousesCreating a data warehouseConceptsDatabaseDimensionDimensional modelingFactOLAPStar schemaSnowflake schemaReverse star schemaAggregateSingle version of the truthVariantsColumn-oriented DBMSData hubData meshEnsemble modeling patternsAnchor modelingData vault modelingFocal point modelingHOLAPMOLAPROLAPOperational data storeElementsData dictionary/MetadataData martSixth normal formSurrogate keyFactFact tableEarly-arriving factMeasureDimensionDimension tableDegenerateSlowly changingFillingExtract, transform, load (ETL)Extract, load, transform (ELT)ExtractTransformLoadUsing a data warehouseConceptsBusiness intelligenceDashboardData miningDecision support system (DSS)OLAP cubeData warehouse automationLanguagesData Mining Extensions (DMX)MultiDimensional eXpressions (MDX)XML for Analysis (XMLA)ToolsBusiness intelligence softwareReporting softwareSpreadsheetRelatedPeopleBill InmonInformation factoryRalph KimballEnterprise busDan LinstedtProductsComparison of OLAP serversData warehousing products and their producersvteSemantic WebBackgroundDatabasesHypertextInternetOntologiesSemanticsSemantic networksWorld Wide WebSub-topicsDataspacesHyperdataLinked dataRule-based systemsApplicationsSemantic analyticsSemantic brokerSemantic computingSemantic mapperSemantic matchingSemantic publishingSemantic reasonerSemantic searchSemantic service-oriented architectureSemantic wikiSolidRelated topicsCollective intelligenceDescription logicFolksonomyGeotaggingInformation architectureiXBRLKnowledge extractionKnowledge managementKnowledge representation and reasoningLibrary 2.0Digital libraryDigital humanitiesMetadataReferencesTopic mapWeb 2.0Web engineeringWeb Science TrustStandardsSyntax and supporting technologiesHTTPIRIURIRDFtriplesRDF/XMLJSON-LDTurtleTriGNotation3N-TriplesTriX(no W3C standard)RRIDSPARQLXMLSemantic HTMLSchemas, ontologies and rulesCommon LogicOWLRDFSRule Interchange FormatSemantic Web Rule LanguageALPSSHACLSemantic annotationeRDFGRDDLMicrodataMicroformatsRDFaSAWSDLFacebook PlatformCommon vocabulariesDOAPDublin CoreFOAFSchema.orgSIOCSKOSMicroformat vocabularieshAtomhCalendarhCardhProducthRecipehReviewAuthority control databasesNationalFranceBnF dataGermanyIsraelUnited StatesJapanCzech RepublicOtherEncyclopedia of Modern UkraineNARARetrieved from "https://en.wikipedia.org/w/index.php?title=Database&oldid=1239634163"Categories:Database management systemsDatabasesHidden categories:Pages containing links to subscription-only contentWebarchive template wayback linksArticles with short descriptionShort description matches WikidataAll articles with unsourced statementsArticles with unsourced statements from January 2020Articles containing potentially dated statements from 2018All articles containing potentially dated statementsArticles with unsourced statements from March 2013Pages with broken anchorsArticles containing potentially dated statements from 2014Articles with unsourced statements from May 2012Articles needing additional references from March 2013All articles needing additional referencesArticles with unsourced statements from December 2022All articles with specifically marked weasel-worded phrasesArticles with specifically marked weasel-worded phrases from December 2022Articles contradicting other articlesPages using Sister project links with wikidata namespace mismatchPages using Sister project links with wikidata mismatchPages using Sister project links with default searchThis page was last edited on 10 August 2024, at 15:14(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view