URL: https://docs.bacalhau.org/examples/model-inference/generate-realistic-images-using-stylegan3-and-bacalhau

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookGenerate Realistic Images using StyleGAN3 and BacalhauIntroductionIn this example tutorial, we will show you how to generate realistic images withStyleGAN3and Bacalhau. StyleGAN is based on Generative Adversarial Networks (GANs), which include a generator and discriminator network that has been trained to differentiate images generated by the generator from real images. However, during the training, the generator tries to fool the discriminator, which results in the generation of realistic-looking images. With StyleGAN3 we can generate realistic-looking images or videos. It can generate not only human faces but also animals, cars, and landscapes.TL;DR​Copybacalhaudockerrun\--wait\--id-only\--gpu1\--timeout3600\--wait-timeout-secs3600\jsacex/stylegan3\--pythongen_images.py--outdir=../outputs--trunc=1--seeds=2--network=stylegan3-r-afhqv2-512x512.pklPrerequisite​To get started, you need to install the Bacalhau client, see more informationhereRunning StyleGAN3 locally​To run StyleGAN3 locally, you'll need to clone the repo, install dependencies and download the model weights.Copygitclonehttps://github.com/NVlabs/stylegan3cdstylegan3condaenvcreate-fenvironment.ymlcondaactivatestylegan3wgethttps://api.ngc.nvidia.com/v2/models/nvidia/research/stylegan3/versions/1/files/stylegan3-r-afhqv2-512x512.pklNow you can generate an image using a pre-trainedAFHQv2model. Here is an example of the image we generated:Containerize Script with Docker​To build your own docker container, create aDockerfile, which contains instructions to build your image.CopyFROMnvcr.io/nvidia/pytorch:21.08-py3COPY. /scratchWORKDIR/scratchENVHOME /scratchSee more information on how to containerize your script/apphereBuild the container​We will rundocker buildcommand to build the container:Copydockerbuild-t<hub-user>/<repo-name>:<tag>.Before running the command replace:hub-userwith your docker hub username, If you don’t have a docker hub account followthese instructionsto create docker account (https://docs.docker.com/docker-id/), and use the username of the account you createdrepo-namewith the name of the container, you can name it anything you wanttagthis is not required but you can use the latest tagIn our case:Copydockerbuild-tjsacex/stylegan3Push the container​Next, upload the image to the registry. This can be done by using the Docker hub username, repo name or tag.Copydockerpush<hub-user>/<repo-name>:<tag>In our case:Copydockerpushjsacex/stylegan3Running a Bacalhau Job​Structure of the command​Some of the jobs presented in the Examples section may require more resources than are currently available on the demo network. Considerstarting your own networkor running less resource-intensive jobs on the demo networkTo submit a job run the Bacalhau command with following structure:export JOB_ID=$( ... )exports the job ID as environment variablebacalhau docker run: call to BacalhauThe--gpu 1flag is set to specify hardware requirements, a GPU is needed to run such a jobThe--id-onlyflag is set to print only job idjsacex/stylegan3: the name and the tag of the docker image we are usingpython gen_images.py: execute the script with following parameters:--trunc=1 --seeds=2 --network=stylegan3-r-afhqv2-512x512.pkl: The animation length is either determined based on the--seedsvalue or explicitly specified using the--num-keyframesoption. When num keyframes are specified with--num-keyframes, the output video length will benum_keyframes * w_framesframes.../outputs: path to the outputCopyexportJOB_ID=$(bacalhaudockerrun\--wait\--id-only\--gpu1\--timeout3600\--wait-timeout-secs3600\jsacex/stylegan3\--pythongen_images.py--outdir=../outputs--trunc=1--seeds=2--network=stylegan3-r-afhqv2-512x512.pkl)Declarative job description​The same job can be presented in thedeclarativeformat. In this case, the description will look like this:Copyname:StyleGAN3type:batchcount:1tasks:-name:My main taskEngine:type:dockerparams:Image:"jsacex/stylegan3"Parameters:-python gen_images.py --outdir=../outputs --trunc=1 --seeds=2 --network=stylegan3-r-afhqv2-512x512.pklResources:GPU:"1"The job description should be saved in.yamlformat, e.g.stylegan3.yaml, and then run with the command:Copybacalhaujobrunstylegan3.yamlRender a latent vector interpolation video​You can also run variations of this command to generate videos and other things. In the following command below, we will render a latent vector interpolation video. This will render a 4x2 grid of interpolations for seeds 0 through 31.Structure of the command​Let's look closely at the command below:export JOB_ID=$( ... )exports the job ID as environment variablebacalhau docker run: call to bacalhauThe--gpu 1flag is set to specify hardware requirements, a GPU is needed to run such a jobThe--id-onlyflag is set to print only job idjsacex/stylegan3the name and the tag of the docker image we are usingpython gen_images.py: execute the script with following parameters:--trunc=1 --seeds=2 --network=stylegan3-r-afhqv2-512x512.pkl: The animation length is either determined based on the--seedsvalue or explicitly specified using the--num-keyframesoption. When num keyframes is specified with--num-keyframes, the output video length will benum_keyframes * w_frames frames. If--num-keyframesis not specified, the number of seeds given with--seedsmust be divisible by grid size W*H (--grid). In this case, the output video length will be# seeds/(w*h)*w_framesframes.../outputs: path to the outputCopyexportJOB_ID=$(bacalhaudockerrun\jsacex/stylegan3\--gpu1\--timeout3600\--wait-timeout-secs3600\--pythongen_video.py--output=../outputs/lerp.mp4--trunc=1\--seeds=0-31\--grid=4x2\--network=stylegan3-r-afhqv2-512x512.pkl)When a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on.Checking the State of your Jobs​Job status​You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysCompleted, that means the job is done, and we can get the results.Job information​You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download​You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presultsbacalhaujobget$JOB_ID--output-dirresultsAfter the download has finished you should see the following contents in results directoryViewing your Job Output​Now you can find the file in theresults/outputsfolder.SupportIf you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousObject Detection with YOLOv5 on BacalhauNextStable Diffusion Checkpoint InferenceLast updated1 month agoOn this pageIntroductionTL;DR​Prerequisite​Running StyleGAN3 locally​Containerize Script with Docker​Build the container​Push the container​Running a Bacalhau Job​Structure of the command​Declarative job description​Render a latent vector interpolation video​Structure of the command​Checking the State of your Jobs​Job status​Job information​Job download​Viewing your Job Output​SupportWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.