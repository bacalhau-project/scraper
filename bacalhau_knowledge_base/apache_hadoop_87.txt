URL: https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/ExtendedAttributes.html

Wiki|git|Apache Hadoop| Last Published: 2024-03-04
               | Version: 3.4.0GeneralOverviewSingle Node SetupCluster SetupCommands ReferenceFileSystem ShellCompatibility SpecificationDownstream Developer's GuideAdmin Compatibility GuideInterface ClassificationFileSystem SpecificationCommonCLI Mini ClusterFair Call QueueNative LibrariesProxy UserRack AwarenessSecure ModeService Level AuthorizationHTTP AuthenticationCredential Provider APIHadoop KMSTracingUnix Shell GuideRegistryAsync ProfilerHDFSArchitectureUser GuideCommands ReferenceNameNode HA With QJMNameNode HA With NFSObserver NameNodeFederationViewFsViewFsOverloadSchemeSnapshotsEdits ViewerImage ViewerPermissions and HDFSQuotas and HDFSlibhdfs (C API)WebHDFS (REST API)HttpFSShort Circuit Local ReadsCentralized Cache ManagementNFS GatewayRolling UpgradeExtended AttributesTransparent EncryptionMultihomingStorage PoliciesMemory Storage SupportSynthetic Load GeneratorErasure CodingDisk BalancerUpgrade DomainDataNode AdminRouter FederationProvided StorageMapReduceTutorialCommands ReferenceCompatibility with 1.xEncrypted ShufflePluggable Shuffle/SortDistributed Cache DeploySupport for YARN Shared CacheMapReduce REST APIsMR Application MasterMR History ServerYARNArchitectureCommands ReferenceCapacity SchedulerFair SchedulerResourceManager RestartResourceManager HAResource ModelNode LabelsNode AttributesWeb Application ProxyTimeline ServerTimeline Service V.2Writing YARN ApplicationsYARN Application SecurityNodeManagerRunning Applications in Docker ContainersRunning Applications in runC ContainersUsing CGroupsSecure ContainersReservation SystemGraceful DecommissionOpportunistic ContainersYARN FederationShared CacheUsing GPUUsing FPGAPlacement ConstraintsYARN UI2YARN REST APIsIntroductionResource ManagerNode ManagerTimeline ServerTimeline Service V.2YARN ServiceOverviewQuickStartConceptsYarn Service APIService DiscoverySystem ServicesHadoop Compatible File SystemsAliyun OSSAmazon S3Azure Blob StorageAzure Data Lake StorageTencent COSHuaweicloud OBSAuthOverviewExamplesConfigurationBuildingToolsHadoop StreamingHadoop ArchivesHadoop Archive LogsDistCpHDFS Federation BalanceGridMixRumenResource Estimator ServiceScheduler Load SimulatorHadoop BenchmarkingDynamometerReferenceChangelog and Release NotesJava API docsUnix Shell APIMetricsConfigurationcore-default.xmlhdfs-default.xmlhdfs-rbf-default.xmlmapred-default.xmlyarn-default.xmlkms-default.xmlhttpfs-default.xmlDeprecated PropertiesExtended Attributes in HDFSOverviewHDFS extended attributesNamespaces and PermissionsInteracting with extended attributesgetfattrsetfattrConfiguration optionsOverviewExtended attributes(abbreviated asxattrs) are a filesystem feature that allow user applications to associate additional metadata with a file or directory. Unlike system-level inode metadata such as file permissions or modification time, extended attributes are not interpreted by the system and are instead used by applications to store additional information about an inode. Extended attributes could be used, for instance, to specify the character encoding of a plain-text document.HDFS extended attributesExtended attributes in HDFS are modeled after extended attributes in Linux (see the Linux manpage forattr(5)). An extended attribute is aname-value pair, with a string name and binary value. Xattrs names must also be prefixed with anamespace. For example, an xattr namedmyXattrin theusernamespace would be specified asuser.myXattr. Multiple xattrs can be associated with a single inode.Namespaces and PermissionsIn HDFS, there are five valid namespaces:user,trusted,system,security, andraw. Each of these namespaces have different access restrictions.Theusernamespace is the namespace that will commonly be used by client applications. Access to extended attributes in the user namespace is controlled by the corresponding file permissions.Thetrustednamespace is available only to HDFS superusers.Thesystemnamespace is reserved for internal HDFS use. This namespace is not accessible through userspace methods, and is reserved for implementing internal HDFS features.Thesecuritynamespace is reserved for internal HDFS use. This namespace is generally not accessible through userspace methods. One particular use ofsecurityis thesecurity.hdfs.unreadable.by.superuserextended attribute. This xattr can only be set on files, and it will prevent the superuser from reading the file’s contents. The superuser can still read and modify file metadata, such as the owner, permissions, etc. This xattr can be set and accessed by any user, assuming normal filesystem permissions. This xattr is also write-once, and cannot be removed once set. This xattr does not allow a value to be set.Therawnamespace is reserved for internal system attributes that sometimes need to be exposed. Likesystemnamespace attributes they are not visible to the user except whengetXAttr/getXAttrsis called on a file or directory in the/.reserved/rawHDFS directory hierarchy. These attributes can only be accessed by the superuser. An example of whererawnamespace extended attributes are used is thedistcputility. Encryption zone meta data is stored inraw.*extended attributes, so as long as the administrator uses/.reserved/rawpathnames in source and target, the encrypted files in the encryption zones are transparently copied.Interacting with extended attributesThe Hadoop shell has support for interacting with extended attributes viahadoop fs -getfattrandhadoop fs -setfattr. These commands are styled after the Linuxgetfattr(1)andsetfattr(1)commands.getfattrhadoop fs -getfattr [-R] -n name | -d [-e en] <path>Displays the extended attribute names and values (if any) for a file or directory.-RRecursively list the attributes for all files and directories.-n nameDump the named extended attribute value.-dDump all extended attribute values associated with pathname.-e <encoding>Encode values after retrieving them. Valid encodings are “text”, “hex”, and “base64”. Values encoded as text strings are enclosed in double quotes ("), and values encoded as hexadecimal and base64 are prefixed with 0x and 0s, respectively.<path>The file or directory.setfattrhadoop fs -setfattr -n name [-v value] | -x name <path>Sets an extended attribute name and value for a file or directory.-n nameThe extended attribute name.-v valueThe extended attribute value. There are three different encoding methods for the value. If the argument is enclosed in double quotes, then the value is the string inside the quotes. If the argument is prefixed with 0x or 0X, then it is taken as a hexadecimal number. If the argument begins with 0s or 0S, then it is taken as a base64 encoding.-x nameRemove the extended attribute.<path>The file or directory.Configuration optionsHDFS supports extended attributes out of the box, without additional configuration. Administrators could potentially be interested in the options limiting the number of xattrs per inode and the size of xattrs, since xattrs increase the on-disk and in-memory space consumption of an inode.dfs.namenode.xattrs.enabledWhether support for extended attributes is enabled on the NameNode. By default, extended attributes are enabled.dfs.namenode.fs-limits.max-xattrs-per-inodeThe maximum number of extended attributes per inode. By default, this limit is 32.dfs.namenode.fs-limits.max-xattr-sizeThe maximum combined size of the name and value of an extended attribute in bytes. By default, this limit is 16384 bytes.©            2008-2024
              Apache Software Foundation
            
                          -Privacy Policy.
        Apache Maven, Maven, Apache, the Apache feather logo, and the Apache Maven project logos are trademarks of The Apache Software Foundation.