URL: https://grpc.io/docs/languages/java/alts/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueOverviewgRPC Client with ALTS Transport Security ProtocolgRPC Server with ALTS Transport Security ProtocolServer AuthorizationClient AuthorizationDocsLanguagesJavaALTSALTS authenticationAn overview of gRPC authentication in Java using Application Layer Transport Security (ALTS).ContentsOverviewgRPC Client with ALTS Transport Security ProtocolgRPC Server with ALTS Transport Security ProtocolServer AuthorizationClient AuthorizationALTS authenticationAn overview of gRPC authentication in Java using Application Layer Transport Security (ALTS).OverviewApplication Layer Transport Security (ALTS) is a mutual authentication and
transport encryption system developed by Google. It is used for securing RPC
communications within Google’s infrastructure. ALTS is similar to mutual TLS
but has been designed and optimized to meet the needs of Google’s production
environments. For more information, take a look at theALTS whitepaper.ALTS in gRPC has the following features:Create gRPC servers & clients with ALTS as the transport security protocol.ALTS connections are end-to-end protected with privacy and integrity.Applications can access peer information such as the peer service account.Client authorization and server authorization support.Minimal code changes to enable ALTS.gRPC users can configure their applications to use ALTS as a transport security
protocol with few lines of code.Note that ALTS is fully functional if the application runs onCompute EngineorGoogle Kubernetes Engine (GKE).gRPC Client with ALTS Transport Security ProtocolgRPC clients can use ALTS credentials to connect to servers, as illustrated in
the following code excerpt:importio.grpc.alts.AltsChannelBuilder;importio.grpc.ManagedChannel;ManagedChannel managedChannel=AltsChannelBuilder.forTarget(serverAddress).build();gRPC Server with ALTS Transport Security ProtocolgRPC servers can use ALTS credentials to allow clients to connect to them, as
illustrated next:importio.grpc.alts.AltsServerBuilder;importio.grpc.Server;Server server=AltsServerBuilder.forPort(<port>).addService(newMyServiceImpl()).build().start();Server AuthorizationgRPC has built-in server authorization support using ALTS. A gRPC client using
ALTS can set the expected server service accounts prior to establishing a
connection. Then, at the end of the handshake, server authorization guarantees
that the server identity matches one of the service accounts specified
by the client. Otherwise, the connection fails.importio.grpc.alts.AltsChannelBuilder;importio.grpc.ManagedChannel;ManagedChannel channel=AltsChannelBuilder.forTarget(serverAddress).addTargetServiceAccount("expected_server_service_account1").addTargetServiceAccount("expected_server_service_account2").build();Client AuthorizationOn a successful connection, the peer information (e.g., client’s service
account) is stored in theAltsContext. gRPC provides a utility library for
client authorization check. Assuming that the server knows the expected client
identity (e.g.,foo@iam.gserviceaccount.com), it can run the following example
codes to authorize the incoming RPC.importio.grpc.alts.AuthorizationUtil;importio.grpc.ServerCall;importio.grpc.Status;ServerCall<?,?>call;Status status=AuthorizationUtil.clientAuthorizationCheck(call,Lists.newArrayList("foo@iam.gserviceaccount.com"));Last modified August 11, 2021:Trim trailing whitespace from descriptions (#822) (88d84d6)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About