URL: https://en.wikipedia.org/wiki/Concurrency_(computer_science)

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Issues2TheoryToggle Theory subsection2.1Models2.2Logics3Practice4See also5References6Further reading7External linksToggle the table of contentsConcurrency (computer science)28 languagesالعربيةবাংলাDanskDeutschΕλληνικάEspañolEuskaraفارسی한국어Bahasa IndonesiaItalianoעבריתMagyarBahasa MelayuNederlands日本語Norsk bokmålPortuguêsRomânăРусскийShqipSimple EnglishSuomiSvenskaTürkçeУкраїнськаTiếng Việt中文Edit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsWikimedia CommonsAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaAbility to execute a task in a non-serial manner"Concurrent computer" redirects here. For the company, seeConcurrent Computer Corporation.For a more practical discussion, seeConcurrent computing. For other uses, seeConcurrency (disambiguation).The"Dining Philosophers", a classic problem involving concurrency and shared resourcesIncomputer science,concurrencyis the ability of different parts or units of aprogram,algorithm, orproblemto beexecutedout-of-order or inpartial order, without affecting the outcome.  This allows forparallelexecution of the concurrent units, which can significantly improve overall speed of the execution inmulti-processorandmulti-coresystems. In more technical terms, concurrency refers to thedecomposabilityof a program, algorithm, or problem into order-independent or partially-ordered components or units of computation.[1]Parallelism vs concurrencyNote that incomputer science,parallelismand concurrency are two different things: a parallel program usesmultiple CPU cores, each core performing a task independently. On the other hand, concurrency enables a program to deal with multiple tasks even on a single CPU core; the core switches between tasks (i.e.threads) without necessarily completing each one. A program can have both, neither of or a combination ofparallelismand concurrency characteristics.[2]A number of mathematical models have been developed for general concurrent computation includingPetri nets,process calculi, theparallel random-access machinemodel, theactor modeland theReo Coordination Language.Issues[edit]Because computations in a concurrent system can interact with each other while being executed, the number of possible execution paths in the system can be extremely large, and the resulting outcome can beindeterminate. Concurrent use of sharedresourcescan be a source of indeterminacy leading to issues such asdeadlocks, andresource starvation.[3]Design of concurrent systems often entails finding reliable techniques for coordinating their execution, data exchange,memory allocation, and execution scheduling to minimizeresponse timeand maximisethroughput.[4]Theory[edit]Concurrency theory has been an active field of research intheoretical computer science.  One of the first proposals wasCarl Adam Petri's seminal work onPetri netsin the early 1960s. In the years since, a wide variety of formalisms have been developed for modeling and reasoning about concurrency.Models[edit]A number of formalisms for modeling and understanding concurrent systems have been developed, including:[5]Theparallel random-access machine[6]Theactor modelComputational bridging models such as thebulk synchronous parallel(BSP) modelPetri netsProcess calculiCalculus of communicating systems(CCS)Communicating sequential processes(CSP) modelπ-calculusTuple spaces, e.g.,LindaSimple Concurrent Object-Oriented Programming(SCOOP)Reo Coordination LanguageTrace monoidsSome of these models of concurrency are primarily intended to support reasoning and specification, while others can be used through the entire development cycle, including design, implementation, proof, testing and simulation of concurrent systems. Some of these are based onmessage passing, while others have different mechanisms for concurrency.The proliferation of different models of concurrency has motivated some researchers to develop ways to unify these different theoretical models. For example, Lee and Sangiovanni-Vincentelli have demonstrated that a so-called "tagged-signal" model can be used to provide a common framework for defining thedenotational semanticsof a variety of different models of concurrency,[7]while Nielsen, Sassone, and Winskel have demonstrated thatcategory theorycan be used to provide a similar unified understanding of different models.[8]The Concurrency Representation Theorem in the actor model provides a fairly general way to represent concurrent systems that are closed in the sense that they do not receive communications from outside. (Other concurrency systems, e.g.,process calculican be modeled in the actor model using atwo-phase commit protocol.[9]) The mathematical denotation denoted by a closed systemSis constructed increasingly better approximations from an initial behavior called⊥Susing a behavior approximating functionprogressionSto construct a denotation (meaning ) forSas follows:[10]DenoteS≡ ⊔i∈ωprogressionSi(⊥S)In this way,Scan be mathematically characterized in terms of all its possible behaviors.Logics[edit]Various types oftemporal logic[11]can be used to help reason about concurrent systems. Some of these logics, such aslinear temporal logicandcomputation tree logic, allow assertions to be made about the sequences of states that a concurrent system can pass through. Others, such asaction computational tree logic,Hennessy–Milner logic, andLamport'stemporal logic of actions, build their assertions from sequences ofactions(changes in state). The principal application of these logics is in writing specifications for concurrent systems.[3]Practice[edit]This sectiondoes notciteanysources.Please helpimprove this sectionbyadding citations to reliable sources. Unsourced material may be challenged andremoved.(April 2007)(Learn how and when to remove this message)Concurrent programmingencompasses programming languages and algorithms used to implement concurrent systems.  Concurrent programming is usually considered[by whom?]to be more general thanparallel programmingbecause it can involve arbitrary and dynamic patterns of communication and interaction, whereas parallel systems generally[according to whom?]have a predefined and well-structured communications pattern. The base goals of concurrent programming includecorrectness,performanceandrobustness. Concurrent systems such asOperating systemsandDatabase management systemsare generally designed[by whom?]to operate indefinitely, including automatic recovery from failure, and not terminate unexpectedly (seeConcurrency control). Some[example  needed]concurrent systems implement a form of transparent concurrency, in which concurrent computational entities may compete for and share a single resource, but the complexities of this competition and sharing are shielded from the programmer.Because they use shared resources, concurrent systems in general[according to whom?]require the inclusion of some[example  needed]kind ofarbitersomewhere in their implementation (often in the underlying hardware), to control access to those resources. The use of arbiters introduces the possibility ofindeterminacy in concurrent computationwhich has major implications for practice including correctness and performance.  For example, arbitration introducesunbounded nondeterminismwhich raises issues withmodel checkingbecause it causes explosion in the state space and can even cause models to have an infinite number of states.Some concurrent programming models includecoprocessesanddeterministic concurrency. In these models, threads of control explicitlyyieldtheir timeslices, either to the system or to another process.See also[edit]Chu spaceClient–servernetwork nodesClojureClusternodesConcurrency controlConcurrent computingConcurrent object-oriented programmingConcurrency patternConstruction and Analysis of Distributed Processes(CADP)D (programming language)Distributed systemElixir (programming language)Erlang (programming language)Go (programming language)Gordon PaskInternational Conference on Concurrency Theory(CONCUR)OpenMPParallel computingPartitioned global address spaceProcessesPtolemy ProjectRust (programming language)Sheaf (mathematics)ThreadsX10 (programming language)Structured concurrencyReferences[edit]^Lamport, Leslie (July 1978)."Time, Clocks, and the Ordering of Events in a Distributed System"(PDF).Communications of the ACM.21(7): 558–565.doi:10.1145/359545.359563.S2CID215822405. Retrieved4 February2016.^Parallel and Concurrent Programming in Haskell. O'Reilly Media. 2013.ISBN9781449335922.^abCleaveland, Rance; Scott Smolka (December 1996)."Strategic Directions in Concurrency Research".ACM Computing Surveys.28(4): 607.doi:10.1145/242223.242252.S2CID13264261.^Campbell, Colin; Johnson, Ralph; Miller, Ade; Toub, Stephen (August 2010).Parallel Programming with Microsoft .NET. Microsoft Press.ISBN978-0-7356-5159-3.^Filman, Robert; Daniel Friedman (1984).Coordinated Computing - Tools and Techniques for Distributed Software. McGraw-Hill.ISBN978-0-07-022439-1.^Keller, Jörg; Christoph Keßler; Jesper Träff (2001).Practical PRAM Programming. John Wiley and Sons.^Lee, Edward; Alberto Sangiovanni-Vincentelli (December 1998)."A Framework for Comparing Models of Computation"(PDF).IEEE Transactions on CAD.17(12): 1217–1229.doi:10.1109/43.736561.^Mogens Nielsen; Vladimiro Sassone; Glynn Winskel (1993)."Relationships Between Models of Concurrency".REX School/Symposium.^Frederick Knabe. A Distributed Protocol for Channel-Based Communication with Choice PARLE 1992.^William Clinger(June 1981). "Foundations of Actor Semantics". Mathematics Doctoral Dissertation. MIT.hdl:1721.1/6935.{{cite journal}}:Cite journal requires|journal=(help)^Roscoe, Colin (2001).Modal and Temporal Properties of Processes. Springer.ISBN978-0-387-98717-0.Further reading[edit]Lynch, Nancy A. (1996).Distributed Algorithms. Morgan Kaufmann.ISBN978-1-55860-348-6.Tanenbaum, Andrew S.; Van Steen, Maarten (2002).Distributed Systems: Principles and Paradigms. Prentice Hall.ISBN978-0-13-088893-8.Kurki-Suonio, Reino (2005).A Practical Theory of Reactive Systems. Springer.ISBN978-3-540-23342-8.Garg, Vijay K. (2002).Elements of Distributed Computing. Wiley-IEEE Press.ISBN978-0-471-03600-5.Magee, Jeff; Kramer, Jeff (2006).Concurrency: State Models and Java Programming. Wiley.ISBN978-0-470-09355-9.Distefano, S., & Bruneo, D. (2015).Quantitative assessments of distributed systems: Methodologies and techniques(1st ed.). Somerset: John Wiley & Sons Inc.ISBN9781119131144Bhattacharyya, S. S. (2013;2014;).Handbook of signal processing systems(Second;2;2nd 2013; ed.). New York, NY: Springer.10.1007/978-1-4614-6859-2ISBN9781461468592Wolter, K. (2012;2014;).Resilience assessment and evaluation of computing systems(1. Aufl.;1; ed.). London;Berlin;: Springer.ISBN9783642290329External links[edit]Process Algebra Diary - Prof. Luca Aceto's blog on Concurrency TheoryConcurrent SystemsatThe WWW Virtual LibraryConcurrency patterns presentationgiven atscaleconfvteConcurrent computingGeneralConcurrencyConcurrency controlConcurrent data structuresConcurrent hash tablesConcurrent usersIndeterminacyLinearizabilityProcess calculiCSPCCSACPLOTOSπ-calculusAmbient calculusAPI-CalculusPEPAJoin-calculusClassic problemsABA problemCigarette smokers problemDeadlockDining philosophers problemProducer–consumer problemRace conditionReaders–writers problemSleeping barber problemCategory: Concurrent computingRetrieved from "https://en.wikipedia.org/w/index.php?title=Concurrency_(computer_science)&oldid=1241386075"Category:Concurrency (computer science)Hidden categories:CS1 errors: missing periodicalArticles with short descriptionShort description is different from WikidataArticles needing additional references from April 2007All articles needing additional referencesArticles with specifically marked weasel-worded phrases from August 2023All articles with specifically marked weasel-worded phrasesAll articles needing examplesArticles needing examples from August 2023This page was last edited on 20 August 2024, at 21:19(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view