URL: https://grpc.io/docs/languages/ruby/quickstart/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issuePrerequisitesgRPCgRPC toolsDownload the exampleRun a gRPC applicationUpdate the gRPC serviceGenerate gRPC codeUpdate the serverUpdate the clientRun!What’s nextDocsLanguagesRubyQuick startQuick startThis guide gets you started with gRPC in Ruby with a simple working example.ContentsPrerequisitesgRPCgRPC toolsDownload the exampleRun a gRPC applicationUpdate the gRPC serviceGenerate gRPC codeUpdate the serverUpdate the clientRun!What’s nextQuick startThis guide gets you started with gRPC in Ruby with a simple working example.PrerequisitesRuby version 2 or highergRPCTo install gRPC, run the following command:$ gem install grpcgRPC toolsRuby’s gRPC tools include the protocol buffer compilerprotocand the special
plugin for generating server and client code from the.protoservice
definitions. For the first part of our quick-start example, we’ve already
generated the server and client stubs fromhelloworld.proto,
but you’ll need the tools for the rest of our quick start, as well as later
tutorials and your own projects.To install gRPC tools, run the following command:$ gem install grpc-toolsDownload the exampleYou’ll need a local copy of the example code to work through this quick start.
Download the example code from our GitHub repository (the following command
clones the entire repository, but you just need the examples for this quick start
and other tutorials):# Clone the repository to get the example code:$ git clone -b v1.66.0 --depth1--shallow-submodules https://github.com/grpc/grpc# Navigate to the "hello, world" Ruby example:$cdgrpc/examples/rubyRun a gRPC applicationFrom theexamples/rubydirectory:Run the server:$ ruby greeter_server.rbFrom another terminal, run the client:$ ruby greeter_client.rbCongratulations! You’ve just run a client-server application with gRPC.Update the gRPC serviceNow let’s look at how to update the application with an extra method on the
server for the client to call. Our gRPC service is defined using protocol
buffers; you can find out lots more about how to define a service in a.protofile inBasics tutorial. For now all you need
to know is that both the server and the client “stub” have aSayHelloRPC
method that takes aHelloRequestparameter from the client and returns aHelloResponsefrom the server, and that this method is defined like this:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Let’s update this so that theGreeterservice has two methods. Editexamples/protos/helloworld.protoand update it with a newSayHelloAgainmethod, with the same request and response types:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}// Sends another greetingrpcSayHelloAgain (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Remember to save the file!Generate gRPC codeNext we need to update the gRPC code used by our application to use the new
service definition. From theexamples/ruby/directory:$ grpc_tools_ruby_protoc -I ../protos --ruby_out=lib --grpc_out=lib ../protos/helloworld.protoThis regenerateslib/helloworld_services_pb.rb, which contains our generated
client and server classes.Update the serverIn the same directory, opengreeter_server.rb. Implement the new method like thisclassGreeterServer<Helloworld::Greeter::Servicedefsay_hello(hello_req, _unused_call)Helloworld::HelloReply.new(message:"Hello#{hello_req.name}")enddefsay_hello_again(hello_req, _unused_call)Helloworld::HelloReply.new(message:"Hello again,#{hello_req.name}")endendUpdate the clientIn the same directory, opengreeter_client.rb. Call the new method like this:defmainstub=Helloworld::Greeter::Stub.new('localhost:50051',:this_channel_is_insecure)user=ARGV.size>0?ARGV[0]:'world'message=stub.say_hello(Helloworld::HelloRequest.new(name: user)).messagep"Greeting:#{message}"message=stub.say_hello_again(Helloworld::HelloRequest.new(name: user)).messagep"Greeting:#{message}"endRun!Just like we did before, from theexamples/rubydirectory:Run the server:$ ruby greeter_server.rbFrom another terminal, run the client:$ ruby greeter_client.rbWhat’s nextLearn how gRPC works inIntroduction to gRPCandCore concepts.Work through theBasics tutorial.Explore theAPI reference.Last modified March 23, 2022:Examples: add --shallow-submodules to clone command (#956) (b4656bd)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About