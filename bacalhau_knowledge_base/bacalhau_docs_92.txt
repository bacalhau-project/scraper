Source: bacalhau_docs
URL: https://docs.bacalhau.org/examples/molecular-dynamics/molecular-simulation-with-openmm-and-bacalhau

Molecular Simulation with OpenMM and Bacalhau
Introduction
In this tutorial example, we will showcase how to containerize an OpenMM workload so that it can be executed on the Bacalhau network and take advantage of the distributed storage & compute resources. [OpenMM](https://github.com/openmm/openmm) is a toolkit for molecular simulation. It is a physic-based library that is useful for refining the structure and exploring functional interactions with other molecules. It provides a combination of extreme flexibility (through custom forces and integrators), openness, and high performance (especially on recent GPUs) that make it truly unique among simulation codes.
In this example tutorial, our focus will be on running OpenMM molecular simulation with Bacalhau.
Prerequisite
To get started, you need to install the Bacalhau client, see more information [here](/getting-started/installation)
Running Locally
Downloading Datasets
We use a processed 2DRI dataset that represents the ribose binding protein in bacterial transport and chemotaxis. The source organism is the [Escherichia coli](https://en.wikipedia.org/wiki/Escherichia_coli) bacteria.
Protein data can be stored in a .pdb
file, this is a human-readable format. It provides for the description and annotation of protein and nucleic acid structures including atomic coordinates, secondary structure assignments, as well as atomic connectivity. See more information about PDB format [here](https://www.cgl.ucsf.edu/chimera/docs/UsersGuide/tutorials/pdbintro.html). For the original, unprocessed 2DRI dataset, you can download it from the RCSB Protein Data Bank [here](https://www.rcsb.org/structure/2dri).
The relevant code of the processed 2DRI dataset can be found [here](https://github.com/wesfloyd/openmm-test/blob/main/2dri-processed.pdb). Let's print the first 10 lines of the 2dri-processed.pdb
file. The output contains a number of ATOM records. These describe the coordinates of the atoms that are part of the protein.
Writing the Script
To run the script above all we need is a Python environment with the [OpenMM library](http://docs.openmm.org/latest/userguide/application/01_getting_started.html) installed. This script makes sure that there are no empty cells and to filter out potential error sources from the file.
Running the Script
This is only done to check whether your Python script is running. If there are no errors occurring, proceed further.
Uploading the Data to IPFS
The simplest way to upload the data to IPFS is to use a third-party service to "pin" data to the IPFS network, to ensure that the data exists and is available. To do this, you need an account with a pinning service like [Pinata](https://app.pinata.cloud/pinmanager) or [nft.storage](https://nft.storage/docs/how-to/nftup/). Once registered, you can use their UI or API or SDKs to upload files.
When you pin your data, you'll get a CID. Copy the CID as it will be used to access your data
Containerize Script using Docker
To build your own docker container, create a Dockerfile
, which contains instructions to build your image.
See more information on how to containerize your script/app [here](https://docs.docker.com/get-started/02_our_app/)
Build the container
We will run docker build
command to build the container:
Before running the command, replace:
hub-user
with your docker hub username, If you donâ€™t have a docker hub account [follow these instructions to create docker account](https://docs.docker.com/docker-id/), and use the username of the account you created
repo-name
with the name of the container, you can name it anything you want
tag
this is not required but you can use the latest tag
In our case, this will be:
Push the container
Next, upload the image to the registry. This can be done by using the Docker hub username, repo name, or tag.
Run a Bacalhau Job
Now that we have the data in IPFS and the docker image pushed, we can run a job on the Bacalhau network.
Structure of the command
Lets look closely at the command above:
bacalhau docker run
: call to Bacalhaubafybeig63whfqyuvwqqrp5456fl4anceju24ttyycexef3k5eurg5uvrq4
: here we mount the CID of the dataset we uploaded to IPFS to use on the jobghcr.io/bacalhau-project/examples/openmm:0.3
: the name and the tag of the image we are usingpython run_openmm_simulation.py
: the script that will be executed inside the container
When a job is submitted, Bacalhau prints out the related job_id
. We store that in an environment variable so that we can reuse it later on.
Checking the State of your Jobs
Job status: You can check the status of the job using bacalhau job list
.
When it says Published
or Completed
, that means the job is done, and we can get the results.
Job information: You can find out more information about your job by using bacalhau job describe
.
Job download: You can download your job results directly by using bacalhau job get
. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (results
) and downloaded our job output to be stored in that directory.
Viewing your Job Output
To view the file, run the following command:
Support
If you have questions or need support or guidance, please reach out to the [Bacalhau team via Slack](https://bacalhauproject.slack.com/ssb/redirect) (#general channel).
Last updated