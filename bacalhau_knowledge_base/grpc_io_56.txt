URL: https://grpc.io/docs/languages/node/quickstart/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issuePrerequisitesDownload the exampleRun a gRPC applicationUpdate the gRPC serviceUpdate and run the applicationUpdate the serverUpdate the clientRun!What’s nextDocsLanguagesNodeQuick startQuick startThis guide gets you started with gRPC in Node with a simple working example.ContentsPrerequisitesDownload the exampleRun a gRPC applicationUpdate the gRPC serviceUpdate and run the applicationUpdate the serverUpdate the clientRun!What’s nextQuick startThis guide gets you started with gRPC in Node with a simple working example.PrerequisitesNode version 8.13.0 or higherDownload the exampleYou’ll need a local copy of the example code to work through this quick start.
Download the example code from our GitHub repository (the following command
clones the entire repository, but you just need the examples for this quick start
and other tutorials):# Clone the repository to get the example code$ git clone -b @grpc/grpc-js@1.9.0 --depth1--shallow-submodules https://github.com/grpc/grpc-node# Navigate to the node example$cdgrpc-node/examples# Install the example's dependencies$ npm install# Navigate to the dynamic codegen "hello, world" Node example:$cdhelloworld/dynamic_codegenRun a gRPC applicationFrom theexamples/helloworld/dynamic_codegendirectory:Run the server:$ node greeter_server.jsFrom another terminal, run the client:$ node greeter_client.jsCongratulations! You’ve just run a client-server application with gRPC.Update the gRPC serviceNow let’s look at how to update the application with an extra method on the
server for the client to call. Our gRPC service is defined using protocol
buffers; you can find out lots more about how to define a service in a.protofile inBasics tutorial. For now all you need
to know is that both the server and the client “stub” have aSayHelloRPC
method that takes aHelloRequestparameter from the client and returns aHelloReplyfrom the server, and that this method is defined like this:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Let’s update this so that theGreeterservice has two methods. Editexamples/protos/helloworld.protoand update it with a newSayHelloAgainmethod, with the same request and response types:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}// Sends another greetingrpcSayHelloAgain (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Remember to save the file!Update and run the applicationWe now have a new service definition, but we still need to implement and call
the new method in the human-written parts of our example application.Update the serverIn the same directory, opengreeter_server.js. Implement the new method like
this:functionsayHello(call, callback) {callback(null, {message:'Hello '+call.request.name});}functionsayHelloAgain(call, callback) {callback(null, {message:'Hello again, '+call.request.name});}functionmain() {varserver=newgrpc.Server();server.addService(hello_proto.Greeter.service,{sayHello:sayHello, sayHelloAgain:sayHelloAgain});server.bindAsync('0.0.0.0:50051', grpc.ServerCredentials.createInsecure(), () => {server.start();});}Update the clientIn the same directory, opengreeter_client.js. Call the new method like this:functionmain() {varclient=newhello_proto.Greeter('localhost:50051',grpc.credentials.createInsecure());client.sayHello({name:'you'},function(err, response) {console.log('Greeting:', response.message);});client.sayHelloAgain({name:'you'},function(err, response) {console.log('Greeting:', response.message);});}Run!Just like we did before, from theexamples/helloworld/dynamic_codegendirectory:Run the server:$ node greeter_server.jsFrom another terminal, run the client:$ node greeter_client.jsWhat’s nextLearn how gRPC works inIntroduction to gRPCandCore concepts.Work through theBasics tutorial.Explore theAPI reference.We have more than one grpc implementation for Node. For the pros and cons of
each package, see thispackage feature comparison.Last modified August 1, 2023:Update Node example documentation for example migration to grpc-node repository (#1154) (de75d84)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About