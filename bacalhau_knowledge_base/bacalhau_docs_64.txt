URL: https://docs.bacalhau.org/examples/data-engineering/oceanography-data-conversion

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookOceanography - Data ConversionIntroductionThe Surface Ocean CO₂ Atlas (SOCAT) contains measurements of thefugacityof CO₂ in seawater around the globe. But to calculate how much carbon the ocean is taking up from the atmosphere, these measurements need to be converted to the partial pressure of CO₂. We will convert the units by combining measurements of the surface temperature and fugacity. Python libraries (xarray, pandas, numpy) and the pyseaflux package facilitate this process.In this example tutorial, our focus will be on running the oceanography dataset with Bacalhau, where we will investigate the data and convert the workload. This will enable the execution on the Bacalhau network, allowing us to leverage its distributed storage and compute resources.Prerequisites​To get started, you need to install the Bacalhau client, see more informationhereRunning Locally​Downloading the dataset​For the purposes of this example we will use theSOCATv2022dataset in the "Gridded" format from theSOCAT websiteand long-term global sea surface temperature data fromNOAA- information about that dataset can be foundhere.Copymkdir-pinputscurl -L --output ./inputs/SOCATv2022_tracks_gridded_monthly.nc.zip https://www.socat.info/socat_files/v2022/SOCATv2022_tracks_gridded_monthly.nc.zipcurl--output./inputs/sst.mnmean.nchttps://downloads.psl.noaa.gov/Datasets/noaa.oisst.v2/sst.mnmean.ncInstalling dependencies​Next let's write therequirements.txt. This file will also be used by the Dockerfile to install the dependencies.Copy# requirements.txtBottleneck==1.3.5dask==2022.2.0fsspec==2022.5.0netCDF4==1.6.0numpy==1.21.6pandas==1.3.5pip==22.1.2pyseaflux==2.2.1scipy==1.7.3xarray==0.20.2zarr>=2.0.0Copypipinstall-rrequirements.txt>/dev/nullReading and Viewing Data​Copyimportfsspec# for reading remote filesimportxarrayasxr# Open the zip archive using fsspec and load the data into xarray.Datasetwithfsspec.open("./inputs/SOCATv2022_tracks_gridded_monthly.nc.zip", compression='zip')asfp:ds=xr.open_dataset(fp)# Display information about the datasetds.info()Copytime_slice=slice("2010","2020")# select a decaderes=ds['sst_ave_unwtd'].sel(tmnth=time_slice).mean(dim='tmnth')# compute the mean for this periodres.plot()# plot the resultWe can see that the dataset contains latitude-longitude coordinates, the date, and a series of seawater measurements. Below is a plot of the average sea surface temperature (SST) between 2010 and 2020, where data have been collected by buoys and vessels.Data Conversion​To convert the data from fugacity of CO2 (fCO2) to partial pressure of CO2 (pCO2) we will combine the measurements of the surface temperature and fugacity. The conversion is performed by thepyseafluxpackage.Writing the Script​Let's create a new file calledmain.pyand paste the following script in it:Copy# main.pyimportfsspecimportxarrayasxrimportpandasaspdimportnumpyasnpimportpyseafluxdeflon_360_to_180(ds=None,lonVar=None):lonVar="lon"iflonVarisNoneelselonVarreturn(ds.assign_coords({lonVar: (((ds[lonVar]+180)%360)-180)}).sortby(lonVar).astype(dtype='float32', order='C'))defcenter_dates(ds):# start and end datestart_date=str(ds.time[0].dt.strftime('%Y-%m').values)end_date=str(ds.time[-1].dt.strftime('%Y-%m').values)# monthly dates centered on 15th of each monthdates=pd.date_range(start=f'{start_date}-01T00:00:00.000000000',end=f'{end_date}-01T00:00:00.000000000',freq='MS')+np.timedelta64(14,'D')returnds.assign(time=dates)defget_and_process_sst(url=None):# get noaa sstifurlisNone:url=("/inputs/sst.mnmean.nc")withfsspec.open(url)asfp:ds=xr.open_dataset(fp)ds=lon_360_to_180(ds)ds=center_dates(ds)returndsdefget_and_process_socat(url=None):ifurlisNone:url=("/inputs/SOCATv2022_tracks_gridded_monthly.nc.zip")withfsspec.open(url, compression='zip')asfp:ds=xr.open_dataset(fp)ds=ds.rename({"xlon":"lon","ylat":"lat","tmnth":"time"})ds=center_dates(ds)returndsdefmain():print("Load SST and SOCAT data")ds_sst=get_and_process_sst()ds_socat=get_and_process_socat()print("Merge datasets together")time_slice=slice("1981-12","2022-05")ds_out=xr.merge([ds_sst['sst'].sel(time=time_slice),ds_socat['fco2_ave_unwtd'].sel(time=time_slice)])print("Calculate pco2 from fco2")ds_out['pco2_ave_unwtd']=xr.apply_ufunc(pyseaflux.fCO2_to_pCO2,ds_out['fco2_ave_unwtd'],ds_out['sst'])print("Add metadata")ds_out['pco2_ave_unwtd'].attrs['units']='uatm'ds_out['pco2_ave_unwtd'].attrs['notes']=("calculated using"+"NOAA OI SST V2"+"and pyseaflux package")print("Save data")ds_out.to_zarr("/processed.zarr")importshutilshutil.make_archive("/outputs/processed.zarr",'zip',"/processed.zarr")print("Zarr file written to disk, job completed successfully")if__name__=="__main__":main()This code loads and processes SST and SOCAT data, combines them, computes pCO2, and saves the results for further use.Upload the Data to IPFS​The simplest way to upload the data to IPFS is to use a third-party service to "pin" data to the IPFS network, to ensure that the data exists and is available. To do this you need an account with a pinning service likeNFT.storageorPinata. Once registered you can use their UI or API or SDKs to upload files.This resulted in the IPFS CID ofbafybeidunikexxu5qtuwc7eosjpuw6a75lxo7j5ezf3zurv52vbrmqwf6y.Setting up Docker Container​We will create aDockerfileand add the desired configuration to the file. These commands specify how the image will be built, and what extra requirements will be included.CopyFROMpython:slimRUNapt-getupdate&&apt-get-yupgrade\&&apt-getinstall-y--no-install-recommends\g++\&&rm-rf/var/lib/apt/lists/*WORKDIR/projectCOPY./requirements.txt/projectRUNpip3install-rrequirements.txtCOPY./main.py/projectCMD["python","main.py"]Build the container​We will rundocker buildcommand to build the container:Copydockerbuild-t<hub-user>/<repo-name>:<tag>.Before running the command replace:hub-userwith your docker hub username, If you don’t have a docker hub accountfollow these instructions to create a Docker account, and use the username of the account you createdrepo-namewith the name of the container, you can name it anything you wanttagthis is not required but you can use the latest tagPush the container​Now you can push this repository to the registry designated by its name or tag.Copydockerpush<hub-user>/<repo-name>:<tag>For more information about working with custom containers, see thecustom containers example.Running a Bacalhau Job​Now that we have the data in IPFS and the Docker image pushed, next is to run a job using thebacalhau docker runcommandCopyexportJOB_ID=$(bacalhaudockerrun\--inputipfs://bafybeidunikexxu5qtuwc7eosjpuw6a75lxo7j5ezf3zurv52vbrmqwf6y\--memory10Gb\ghcr.io/bacalhau-project/examples/socat:0.0.11\--pythonmain.py)Structure of the command​Let's look closely at the command above:bacalhau docker run: call to Bacalhau--input ipfs://bafybeidunikexxu5qtuwc7eosjpuw6a75lxo7j5ezf3zurv52vbrmqwf6y: CIDs to use on the job. Mounts them at '/inputs' in the execution.ghcr.io/bacalhau-project/examples/socat:0.0.11: the name and the tag of the image we are usingpython main.py: execute the scriptWhen a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on.Declarative job description​The same job can be presented in thedeclarativeformat. In this case, the description will look like this:Copyname: Oceanographytype: batchcount: 1tasks:- name: My main taskEngine:type: dockerparams:Image: ghcr.io/bacalhau-project/examples/socat:0.0.11Entrypoint:- /bin/bashParameters:- -c- python main.pyPublisher:Type: ipfsResultPaths:- Name: outputsPath: /outputsInputSources:- Target: "/inputs"Source:Type: "ipfs"Params:CID: "bafybeidunikexxu5qtuwc7eosjpuw6a75lxo7j5ezf3zurv52vbrmqwf6y"Resources:Memory: 10gbThe job description should be saved in.yamlformat, e.g. oceanyaml, and then run with the command:Copybacalhau job run ocean.yamlChecking the State of your Jobs​Job status: You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysPublishedorCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (results) and downloaded our job output to be stored in that directory.Copyrm-rfresultsmkdir-p./results# Temporary directory to store the resultsbacalhaujobget${JOB_ID}--output-dir./results# Download the resultsViewing your Job Output​To view the file, run the following command:Copylsresults/outputsprocessed.zarr.zipSupport​If you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousSimple Image ProcessingNextVideo ProcessingLast updated1 month agoOn this pageIntroductionPrerequisites​Running Locally​Downloading the dataset​Installing dependencies​Reading and Viewing Data​Data Conversion​Writing the Script​Upload the Data to IPFS​Setting up Docker Container​Build the container​Push the container​Running a Bacalhau Job​Structure of the command​Declarative job description​Checking the State of your Jobs​Viewing your Job Output​Support​Was this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.