URL: https://docs.bacalhau.org/getting-started/installation

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookInstallationInstall the Bacalhau CLIIn this tutorial, you'll learn how to install and run a job with the Bacalhau client using the Bacalhau CLI or Docker.Step 1 - Install the Bacalhau ClientThe Bacalhau client is a command-line interface (CLI) that allows you to submit jobs to the Bacalhau. The client is available for Linux, macOS, and Windows. You can also run the Bacalhau client in a Docker container.By default, you will submit to the Bacalhau public network, but the same CLI can be configured to submit to a private Bacalhau network. For more information, please read RunningBacalhau on a Private Network.Step 1.1 - Install the Bacalhau CLILinux/macOS (CLI)Windows (CLI)DockerYou can install or update the Bacalhau CLI by running the commands in a terminal. You may need sudo mode or root password to install the local Bacalhau binary to/usr/local/bin:Copycurl-sLhttps://get.bacalhau.org/install.sh|bashWindows users can download thelatest release tarball from Githuband extractbacalhau.exeto any location available in the PATH environment variable.Copydockerimagerm-fghcr.io/bacalhau-project/bacalhau:latest# Remove old image if it existsdockerpullghcr.io/bacalhau-project/bacalhau:latestTo run a specific version of Bacalhau using Docker, use the commanddocker run -it ghcr.io/bacalhau-project/bacalhau:v1.0.3, wherev1.0.3is the version you want to run; note that thelatesttag will not re-download the image if you have an older version. For more information on running the Docker image, check out the Bacalhau docker image example.Step 1.2 - Verify the InstallationTo verify installation and check the version of the client and server, use theversioncommand. To run a Bacalhau client command with Docker, prefix it withdocker run ghcr.io/bacalhau-project/bacalhau:latest.Linux/macOS/Windows (CLI)DockerCopybacalhauversionCopydockerrun-itghcr.io/bacalhau-project/bacalhau:latestversionIf you're wondering which server is being used, the Bacalhau Project has a demo network that's shared with the community. This network allows you to familiarize with Bacalhau's capabilities and launch jobs from your computer without maintaining a compute cluster on your own.Step 2 - Submit a Hello World jobTo submit a job in Bacalhau, we will use thebacalhau docker runcommand. The command runs a job using the Docker executor on the node. Let's take a quick look at its syntax:Copybacalhaudockerrun[FLAGS] IMAGE[:TAG] [COMMAND]CLIDockerCopybacalhaudockerrunubuntuechoHelloWorldWe will use the command to submit a Hello World job that runs anechoprogram within anUbuntu container.Let's take a look at the results of the command execution in the terminal:CopyJobsuccessfullysubmitted.JobID:f8e7789d-8e76-4e6c-8e71-436e2d76c72eCheckingjobstatus...(EnterCtrl+Ctoexitatanytime,yourjobwillcontinuerunning):Communicatingwiththenetwork................done✅0.2sCreatingjobforsubmission................done✅0.7sJobinprogress................done✅2.1sTodownloadtheresults,execute:bacalhaujobgetf8e7789d-8e76-4e6c-8e71-436e2d76c72eTogetmoredetailsabouttherun,execute:bacalhaujobdescribef8e7789d-8e76-4e6c-8e71-436e2d76c72eAfter the above command is run, the job is submitted to the public network, which processes the job and Bacalhau prints out the related job id:CopyJobsuccessfullysubmitted.JobID:9d20bbad-c3fc-48f8-907b-1da61c927fbdCheckingjobstatus...Thejob_idabove is shown in its full form. For convenience, you can use the shortened version, in this case:9d20bbad.While this command is designed to resemble Docker's run command which you may be familiar with, Bacalhau introduces a whole new set offlagsto support its computing model.Copydocker run -t ghcr.io/bacalhau-project/bacalhau:latest \docker run \--id-only \--wait \ubuntu:latest -- \sh -c 'uname -a && echo "Hello from Docker Bacalhau!"'Let's take a look at the results of the command execution in the terminal:Copy14:02:25.992 | INF pkg/repo/fs.go:81 > Initializing repo at '/root/.bacalhau' for environment 'production'19b105c9-4cb5-43bd-a12f-d715d738adddStep 3 - Checking the State of your JobsAfter having deployed the job, we now can use the CLI for the interaction with the network. The jobs were sent to the public demo network, where it was processed and we can call the following functions. Thejob_idwill differ for every submission.Step 3.1 - Job status:You can check the status of the job usingbacalhau job listcommand adding the--id-filterflag and specifying your job id.Copybacalhaujoblist--id-filter9d20bbadLet's take a look at the results of the command execution in the terminal:CopyCREATEDIDJOBSTATEPUBLISHED15:24:310ed7617dType:"docker",Params:"map[Entrypoint:<ni  Completedl> EnvironmentVariables:[] Image:ubuntu:latest Parameters:[sh -c uname -a && echo "HellofromDockerBacalhau!"] WorkingDirectory:]"When it saysCompleted, that means the job is done, and we can get the results.For a comprehensive list of flags you can pass to the list command check outthe related CLI Reference pageStep 3.2 - Job information:You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe9d20bbadLet's take a look at the results of the command execution in the terminal:CopyJob:APIVersion:V1beta2Metadata:ClientID:0ff57b2521334a92e9ddab4b2f8202c887b1eaa35d2aa945ab0e247d3bc0aa88CreatedAt:"2023-12-21T15:24:31.750306239Z"ID:0ed7617d-d5ff-40f7-8411-89830b3f3058Requester:RequesterNodeID:QmbxGSsM6saCTyKkiWSxhJCt6Fgj7M9cns1vzYtfDbB5WsRequesterPublicKey: CAASpgIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDEHTUAD1JzO0130W9vsaDGhU0PVgpcNjG3fYlE0sJ1BiBWENFuP4jx3Q9alcjNGhdRFdju0Mb/fidTOtJcPhxTdb+H6JxFP6HsADGes9jU4ylBU2SL2vfdb0KXzKdXjNHGGf4BuCGTcH07Oqxp209diK/cT7takL2fLjcgs1tM+6PzlfGzFqCPxvh9Sa0ek34mdmHjcp1XH8yjF1OKOuHvD+pYphqvOBL/2LEN+EBC4fz/QUnhUajCmKYO83MJcNUXSGxb4AN6K3DpVV+cJph7fj9ADdP7i996o2S4Gkz8W4Wpt/jICaPpkUjmyU3Jgcw7MHkZaYEzWxnnO2J936+pAgMBAAE=Spec:...This outputs all information about the job, including stdout, stderr, where the job was scheduled, and so on.Step 3.3 - Job download:You can download your job results directly by usingbacalhau job get.Copybacalhaujobget9d20bbadThis results inCopyFetchingresultsofjob'0ed7617d'...Resultsforjob'0ed7617d'havebeenwrittento.../Users/test/job-0ed7617dIn the command below, we created a directory calledmyfolderand download our job output to be stored in that directory.CopyFetchingresultsofjob'0ed7617d'...Resultsforjob'0ed7617d'havebeenwrittento.../myfolderWhile executing this command, you may encounter warnings regarding receive and send buffer sizes:failed to sufficiently increase receive buffer size. These warnings can arise due to limitations in the UDP buffer used by Bacalhau to process tasks. Additional information can be found inhttps://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes.After the download has finished you should see the following contents in the results directory.Copyjob-0ed7617d├──exitCode├──outputs├──stderr└──stdoutStep 4 - Viewing your Job OutputCopycatjob-9d20bbad/stdoutThat should print out the stringHello World.CopyHelloworldWith that, you have just successfully run a job on Bacalhau!🐟Step 5 - Where to go next?Here are few resources that provide a deeper dive into running jobs with Bacalhau:How Bacalhau works,Create your Private Network,Examples & Use CasesSupportIf you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousHow Bacalhau WorksNextCreate NetworkLast updated1 month agoOn this pageInstall the Bacalhau CLIStep 1 - Install the Bacalhau ClientStep 2 - Submit a Hello World jobStep 3 - Checking the State of your JobsStep 4 - Viewing your Job OutputStep 5 - Where to go next?SupportWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.