Source: bacalhau_docs
URL: https://docs.bacalhau.org/setting-up/workload-onboarding/index-3

Running Rust programs as WebAssembly (WASM)
Bacalhau supports running jobs as a [WebAssembly (WASM)](https://webassembly.org/) program. This example demonstrates how to compile a [Rust](https://www.rust-lang.org/) project into WebAssembly and run the program on Bacalhau.
Prerequisites
To get started, you need to install the Bacalhau client, see more information
[here](/getting-started/installation).A working Rust installation with the
wasm32-wasi
target. For example, you can useto install Rust and configure it to build WASM targets. For those using the notebook, these are installed in hidden cells below.rustup
1. Develop a Rust Program Locally
We can use cargo
(which will have been installed by rustup
) to start a new project (my-program
) and compile it:
We can then write a Rust program. Rust programs that run on Bacalhau can read and write files, access a simple clock, and make use of pseudo-random numbers. They cannot memory-map files or run code on multiple threads.
The program below will use the Rust imageproc
crate to resize an image through seam carving, based on [an example from their repository](https://github.com/image-rs/imageproc/blob/master/examples/seam_carving.rs).
In the main function main()
an image is loaded, the original is saved, and then a loop is performed to reduce the width of the image by removing "seams." The results of the process are saved, including the original image with drawn seams and a gradient image with highlighted seams.
We also need to install the imageproc
and image
libraries and switch off the default features to make sure that multi-threading is disabled (default-features = false
). After disabling the default features, you need to explicitly specify only the features that you need:
We can now build the Rust program into a WASM blob using cargo
:
This command navigates to the my-program
directory and builds the project using Cargo with the target set to wasm32-wasi
in release mode.
This will generate a WASM file at ./my-program/target/wasm32-wasi/release/my-program.wasm
which can now be run on Bacalhau.
2. Running WASM on Bacalhau
Now that we have a WASM binary, we can upload it to IPFS and use it as input to a Bacalhau job.
The -i
flag allows specifying a URI to be mounted as a named volume in the job, which can be an IPFS CID, HTTP URL, or S3 object.
For this example, we are using an image of the Statue of Liberty that has been pinned to a storage facility.
Structure of the Commands
bacalhau wasm run
: call to Bacalhau./my-program/target/wasm32-wasi/release/my-program.wasm
: the path to the WASM file that will be executed_start
: the entry point of the WASM program, where its execution begins--id-only
: this flag indicates that only the identifier of the executed job should be returned-i ipfs://bafybeifdpl6dw7atz6uealwjdklolvxrocavceorhb3eoq6y53cbtitbeu:/inputs
: input data volume that will be accessible within the job at the specified destination path
When a job is submitted, Bacalhau prints out the related job_id. We store that in an environment variable so that we can reuse it later on:
You can download your job results directly by using bacalhau job get
. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (wasm_results
) and downloaded our job output to be stored in that directory.
We can now get the results.
Viewing Job Output
When we view the files, we can see the original image, the resulting shrunk image, and the seams that were removed.
Support
If you have questions or need support or guidance, please reach out to the [Bacalhau team via Slack](https://bacalhauproject.slack.com/ssb/redirect) (#general channel).
[PreviousReading Data from Multiple S3 Buckets using Bacalhau](/setting-up/workload-onboarding/index-2)
[NextGenerate Synthetic Data using Sparkov Data Generation technique](/setting-up/workload-onboarding/index-4)
Last updated