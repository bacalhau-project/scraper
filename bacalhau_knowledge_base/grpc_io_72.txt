URL: https://grpc.io/docs/languages/python/generated-code/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueExampleCode ElementsStubServicerRegistration FunctionDocsLanguagesPythonGenerated codeGenerated-code referenceContentsExampleCode ElementsStubServicerRegistration FunctionGenerated-code referencegRPC Python relies on the protocol buffers compiler (protoc) to generate
code. It uses a plugin to supplement the generated code by plainprotocwith gRPC-specific code. For a.protoservice description containing
gRPC services, the plainprotocgenerated code is synthesized in
a_pb2.pyfile, and the gRPC-specific code lands in a_pb2_grpc.pyfile.
The latter python module imports the former. The focus of this page is
on the gRPC-specific subset of the generated code.ExampleConsider the followingFortuneTellerproto service:serviceFortuneTeller {// Returns the horoscope and zodiac sign for the given month and day.rpcTellFortune(HoroscopeRequest)returns(HoroscopeResponse) {// errors: invalid month or day, fortune unavailable}// Replaces the fortune for the given zodiac sign with the provided one.rpcSuggestFortune(SuggestionRequest)returns(SuggestionResponse) {// errors: invalid zodiac sign}}When the service is compiled, the gRPCprotocplugin generates code similar to
the following_pb2_grpc.pyfile:importgrpcimportfortune_pb2classFortuneTellerStub(object):def__init__(self, channel):"""Constructor.Args:channel: A grpc.Channel."""self.TellFortune=channel.unary_unary('/example.FortuneTeller/TellFortune',request_serializer=fortune_pb2.HoroscopeRequest.SerializeToString,response_deserializer=fortune_pb2.HoroscopeResponse.FromString,)self.SuggestFortune=channel.unary_unary('/example.FortuneTeller/SuggestFortune',request_serializer=fortune_pb2.SuggestionRequest.SerializeToString,response_deserializer=fortune_pb2.SuggestionResponse.FromString,)classFortuneTellerServicer(object):defTellFortune(self, request, context):"""Returns the horoscope and zodiac sign for the given month and day.errors: invalid month or day, fortune unavailable"""context.set_code(grpc.StatusCode.UNIMPLEMENTED)context.set_details('Method not implemented!')raiseNotImplementedError('Method not implemented!')defSuggestFortune(self, request, context):"""Replaces the fortune for the given zodiac sign with the providedone.errors: invalid zodiac sign"""context.set_code(grpc.StatusCode.UNIMPLEMENTED)context.set_details('Method not implemented!')raiseNotImplementedError('Method not implemented!')defadd_FortuneTellerServicer_to_server(servicer, server):rpc_method_handlers={'TellFortune': grpc.unary_unary_rpc_method_handler(servicer.TellFortune,request_deserializer=fortune_pb2.HoroscopeRequest.FromString,response_serializer=fortune_pb2.HoroscopeResponse.SerializeToString,),'SuggestFortune': grpc.unary_unary_rpc_method_handler(servicer.SuggestFortune,request_deserializer=fortune_pb2.SuggestionRequest.FromString,response_serializer=fortune_pb2.SuggestionResponse.SerializeToString,),}generic_handler=grpc.method_handlers_generic_handler('example.FortuneTeller', rpc_method_handlers)server.add_generic_rpc_handlers((generic_handler,))Code ElementsThe gRPC generated code starts by importing thegrpcpackage and the plain_pb2module, synthesized byprotoc, which defines non-gRPC-specific code
elements, like the classes corresponding to protocol buffers messages and
descriptors used by reflection.For each serviceFooin the.protofile, three primary elements are
generated:Stub:FooStubused by the client to connect to a gRPC service.Servicer:FooServicerused by the server to implement a
gRPC service.Registration Function:add_FooServicer_to_serverfunction used to register a servicer with agrpc.Serverobject.StubThe generatedStubclass is used by the gRPC clients. It
has a constructor that takes agrpc.Channelobject and initializes the
stub. For each method in the service, the initializer adds a corresponding
attribute to the stub object with the same name. Depending on the RPC type
(unary or streaming), the value of that attribute will be callable
objects of typeUnaryUnaryMultiCallable,UnaryStreamMultiCallable,StreamUnaryMultiCallable,
orStreamStreamMultiCallable.ServicerFor each service, aServicerclass is generated, which
serves as the superclass of a service implementation. For
each method in the service, a corresponding function in theServicerclass
is generated. Override this function with the service
implementation. Comments associated with code elements
in the.protofile appear as docstrings in
the generated python code.Registration FunctionFor each service, a function is
generated that registers aServicerobject implementing it on agrpc.Serverobject, so that the server can route queries to
the respective servicer. This function takes an object that implements theServicer, typically an instance of a subclass of the generatedServicercode element described above, and agrpc.Serverobject.Last modified August 11, 2021:Replace use of short_title with linkTitle in page front matter (#821) (78a4d99)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueÂ© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About