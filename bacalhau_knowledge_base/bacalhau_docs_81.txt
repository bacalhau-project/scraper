URL: https://docs.bacalhau.org/examples/molecular-dynamics/running-bids-apps-on-bacalhau

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookRunning BIDS Apps on BacalhauIntroductionIn this example tutorial, we will look at how to run BIDS App on Bacalhau. BIDS (Brain Imaging Data Structure) is an emerging standard for organizing and describing neuroimaging datasets.BIDS Appis a container image capturing a neuroimaging pipeline that takes a BIDS formatted dataset as input. Each BIDS App has the same core set of command line arguments, making them easy to run and integrate into automated platforms. BIDS Apps are constructed in a way that does not depend on any software outside of the image other than the container engine.Prerequisite​To get started, you need to install the Bacalhau client, see more informationhereDownloading datasets​For this tutorial, download fileds005.tarfrom this Bids datasetfolderand untar it in a directory:Copymkdirdatatar-xfds005.tar-CdataLet's take a look at the structure of thedatadirectory:Copydata└──ds005├──CHANGES├──dataset_description.json├──participants.tsv├──README├──sub-01│├──anat││├──sub-01_inplaneT2.nii.gz││└──sub-01_T1w.nii.gz│└──func│├──sub-01_task-mixedgamblestask_run-01_bold.nii.gz│├──sub-01_task-mixedgamblestask_run-01_events.tsv│├──sub-01_task-mixedgamblestask_run-02_bold.nii.gz│├──sub-01_task-mixedgamblestask_run-02_events.tsv│├──sub-01_task-mixedgamblestask_run-03_bold.nii.gz│└──sub-01_task-mixedgamblestask_run-03_events.tsv├──sub-02│├──anat││├──sub-02_inplaneT2.nii.gz││└──sub-02_T1w.nii.gz...Uploading the datasets to IPFS​The simplest way to upload the data to IPFS is to use a third-party service to "pin" data to the IPFS network, to ensure that the data exists and is available. To do this, you need an account with a pinning service likePinataornft.storage. Once registered, you can use their UI or API or SDKs to upload files.When you pin your data, you'll get a CID which is in a format like thisQmaNyzSpJCt1gMCQLd3QugihY6HzdYmA8QMEa45LDBbVPz. Copy the CID as it will be used to access your dataAlternatively, you can upload your dataset to IPFS usingIPFS CLI, but the recommended approach is to use a pinning service as we have mentioned above.Running a Bacalhau Job​CopyexportJOB_ID=$(bacalhaudockerrun\--id-only\--wait\--timeout3600\--wait-timeout-secs3600\-iipfs://QmaNyzSpJCt1gMCQLd3QugihY6HzdYmA8QMEa45LDBbVPz:/data\nipreps/mriqc:latest\--mriqc../data/ds005../outputsparticipant--participant_label010203)Structure of the command​Let's look closely at the command above:bacalhau docker run: call to bacalhau-i ipfs://QmaNyzSpJCt1gMCQLd3QugihY6HzdYmA8QMEa45LDBbVPz:/data: mount the CID of the dataset that is uploaded to IPFS and mount it to a folder called data on the containernipreps/mriqc:latest: the name and the tag of the docker image we are using../data/ds005: path to input dataset../outputs: path to the outputparticipant --participant_label 01 02 03: run the mriqc on subjects with participant labels 01, 02, and 03When a job is submitted, Bacalhau prints out the related job_id. We store that in an environment variable so that we can reuse it later on.Declarative job description​The same job can be presented in thedeclarativeformat. In this case, the description will look like this:CopyCopyname: Running BIDStype: batchcount: 1tasks:- name: My main taskEngine:type: dockerparams:Image: nipreps/mriqc:latestEntrypoint:- /bin/bashParameters:- -c- mriqc ../data/ds005 ../outputs participant --participant_label 01 02 03Publisher:Type: ipfsResultPaths:- Name: outputsPath: /outputsInputSources:- Target: "/data"Source:Type: "ipfs"Params:CID: "QmaNyzSpJCt1gMCQLd3QugihY6HzdYmA8QMEa45LDBbVPz"The job description should be saved in.yamlformat, e.g.bids.yaml, and then run with the command:Copybacalhau job run bids.yamlChecking the State of your Jobs​Job status: You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}--wideWhen it saysPublishedorCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (results) and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presultsbacalhaujobget$JOB_ID--output-dirresultsViewing your Job Output​To view the file, run the following command:Copylsresults/# list the contents of the current directorycatresults/stdout# displays the contents of the current directorySupport​If you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousMolecular DynamicsNextCoresets On BacalhauLast updated1 month agoOn this pageIntroductionPrerequisite​Downloading datasets​Uploading the datasets to IPFS​Running a Bacalhau Job​Structure of the command​Declarative job description​Checking the State of your Jobs​Viewing your Job Output​Support​Was this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.