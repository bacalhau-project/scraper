URL: https://docs.bacalhau.org/setting-up/running-node/configuration

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookConfiguration ManagementHow to configure your Bacalhau node.Bacalhau employs theviperandcobralibraries for configuration management. Users can configure their Bacalhau node through a combination of command-line flags, environment variables, and the dedicated configuration file.The Bacalhau RepoBacalhau manages its configuration, metadata, and internal state within a specialized repository named.bacalhau. Serving as the heart of the Bacalhau node, this repository holds the data and settings that determine node behavior. It's located on the filesystem, and by default, Bacalhau initializes this repository at$HOME/.bacalhau, where$HOMEis the home directory of the user running the bacalhau process.To customize this location, users can:Set theBACALHAU_DIRenvironment variable to specify their desired path.Utilize the--repocommand line flag to specify their desired path.Upon executing a Bacalhau command for the first time, the system will initialize the.bacalhaurepository. If such a repository already exists, Bacalhau will seamlessly access its contents.Structure of a Newly Initialized.bacalhauRepositoryBelow is the structure of a freshly initialized.bacalhaurepository:Copy$tree~/.bacalhau├──QmdGUjsMHEgtAfdtw7U62yPEcAZFtA33tKMsczLToegZtv-compute/│├──executions.db│└──jobStats.json├──QmdGUjsMHEgtAfdtw7U62yPEcAZFtA33tKMsczLToegZtv-requester/│└──jobs.db├──config.yaml├──executor_storages/├──libp2p_private_key├──plugins/├──repo.version└──user_id.pemThis repository comprises four directories and seven files:Filesuser_id.pem:This file houses the Bacalhau node user's cryptographic private key, used for signing requests sent to a Requester Node.Format: PEM.repo.version:Indicates the version of the Bacalhau node's repository.Format: JSON, e.g.,{"Version":1}.libp2p_private_key:Stores the Bacalhau node'slibp2pprivate key, essential for its network identity. The NodeID of a Bacalhau node is derived from this key.Format: Base64 encoded RSA private key.config.yaml:Contains configuration settings for the Bacalhau node.Format: YAML.update.json:A file containing the date/time when the last version check was made.Format: JSON, e.g.,{"LastCheck":"2024-01-24T11:06:14.631816Z"}tokens.json:A file containing the tokens obtained through authenticating with bacalhau clusters.DirectoriesQmdGUjsMHEgtAfdtw7U62yPEcAZFtA33tKMsczLToegZtv-compute:Contains theBoltDBexecutions.dbdatabase, which aids the Compute node in state persistence. Additionally, thejobStats.jsonfile records the Compute Node's completed jobs tally.Note: The segmentQmdGUjsMHEgtAfdtw7U62yPEcAZFtA33tKMsczLToegZtvis a unique NodeID for each Bacalhau node, derived from thelibp2p_private_key.QmdGUjsMHEgtAfdtw7U62yPEcAZFtA33tKMsczLToegZtv-requester:Contains theBoltDBjobs.dbdatabase for the Requester node's state persistence.Note: NodeID derivation is similar to the Compute directory.executor_storages:Storage for data handled by Bacalhau storage drivers.plugins:Houses binaries that allow the Compute node to execute specific tasks.Note: This feature is currently experimental and isn't active during standard node operations.Configuring a Bacalhau NodeWithin a.bacalhaurepository, aconfig.yamlfile may be present. This file serves as the configuration source for the bacalhau node and adheres to the YAML format.Although theconfig.yamlfile is optional, its presence allows Bacalhau to load custom configurations; otherwise, Bacalhau is configured with built-in default values, environment variables and command line flags.Modifications to theconfig.yamlfile will not be dynamically loaded by the Bacalhau node. A restart of the node is required for any changes to take effect. Bacalhau determines its configuration based on the following precedence order, with each item superseding the subsequent:Command-line FlagEnvironment VariableConfig FileDefaultsRelationship Betweenconfig.yamland Bacalhau Environment VariablesBacalhau establishes a direct relationship between the value-bearing keys within theconfig.yamlfile and corresponding environment variables. For these keys that have no further sub-keys, the environment variable name is constructed by capitalizing each segment of the key, and then joining them with underscores, prefixed withBACALHAU_.For example, a YAML key with the pathNode.IPFS.Connecttranslates to the environment variableBACALHAU_NODE_IPFS_CONNECTand is represented in a file like:CopyNode:IPFS:Connect:valueThere is no corresponding environment variable for eitherNodeorNode.IPFS. Config values may also have other environment variables that set them for simplicity or to maintain backwards compatibility.EnvironmentsBacalhau leverages theBACALHAU_ENVIRONMENTenvironment variable to determine the specific environment configuration when initializing a repository. Notably, if a.bacalhaurepository has already been initialized, theBACALHAU_ENVIRONMENTsetting will be ignored.By default, if theBACALHAU_ENVIRONMENTvariable is not explicitly set by the user, Bacalhau will adopt theproductionenvironment settings.Below is a breakdown of the configurations associated with each environment:1. Production (public network)Environment Variable:BACALHAU_ENVIRONMENT=productionConfigurations:Node.ClientAPI.Host:"bootstrap.production.bacalhau.org"Node.Client.API.Host:1234...other configurations specific to this environment...2. Staging (staging network)Environment Variable:BACALHAU_ENVIRONMENT=stagingConfigurations:Node.ClientAPI.Host:"bootstrap.staging.bacalhau.org"Node.Client.API.Host:1234...other configurations specific to this environment...3. Development (development network)Environment Variable:BACALHAU_ENVIRONMENT=developmentConfigurations:Node.ClientAPI.Host:"bootstrap.development.bacalhau.org"Node.Client.API.Host:1234...other configurations specific to this environment...4. Local (private or local networks)Environment Variable:BACALHAU_ENVIRONMENT=localConfigurations:Node.ClientAPI.Host:"0.0.0.0"Node.Client.API.Host:1234...other configurations specific to this environment...Note: The above configurations provided for each environment are not exhaustive. Consult the specific environment documentation for acomprehensive list of configurations.Usage ExamplesHow to initialize a Bacalhau Server for a local private networkCopy$ env BACALHAU_ENVIRONMENT=local ./bin/darwin_arm64/bacalhau serveINF pkg/repo/fs.go:187 > Initializing repo at '/Users/frrist/.bacalhau' for environment 'local'How to initialize a Bacalhau Server with a custom repo pathCopy$ bacalhau --repo=/path/to/repo serveINF pkg/repo/fs.go:187 > Initializing repo at '/path/to/repo' for environment 'production'OrCopy$ export BACALHAU_DIR=/path/to/repo$ bacalhau serveINF pkg/repo/fs.go:187 > Initializing repo at '/path/to/repo' for environment 'production'How to start a Bacalhau Server with DEBUG logsCopy$ env LOG_LEVEL=debug ./bin/darwin_arm64/bacalhau serveDBG pkg/system/environment.go:53 > Defaulting to production environment: os.Args: [./bin/darwin_arm64/bacalhau serve]PreviousConnect StorageNextConfiguring Transport Level SecurityOn this pageThe Bacalhau RepoBelow is the structure of a freshly initialized .bacalhau repository:Configuring a Bacalhau NodeRelationship Between config.yaml and Bacalhau Environment VariablesEnvironmentsUsage ExamplesHow to initialize a Bacalhau Server for a local private networkHow to initialize a Bacalhau Server with a custom repo pathHow to start a Bacalhau Server with DEBUG logsWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.