URL: https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs-rbf/HDFSRouterFederation.html

Wiki|git|Apache Hadoop| Last Published: 2024-03-04
               | Version: 3.4.0GeneralOverviewSingle Node SetupCluster SetupCommands ReferenceFileSystem ShellCompatibility SpecificationDownstream Developer's GuideAdmin Compatibility GuideInterface ClassificationFileSystem SpecificationCommonCLI Mini ClusterFair Call QueueNative LibrariesProxy UserRack AwarenessSecure ModeService Level AuthorizationHTTP AuthenticationCredential Provider APIHadoop KMSTracingUnix Shell GuideRegistryAsync ProfilerHDFSArchitectureUser GuideCommands ReferenceNameNode HA With QJMNameNode HA With NFSObserver NameNodeFederationViewFsViewFsOverloadSchemeSnapshotsEdits ViewerImage ViewerPermissions and HDFSQuotas and HDFSlibhdfs (C API)WebHDFS (REST API)HttpFSShort Circuit Local ReadsCentralized Cache ManagementNFS GatewayRolling UpgradeExtended AttributesTransparent EncryptionMultihomingStorage PoliciesMemory Storage SupportSynthetic Load GeneratorErasure CodingDisk BalancerUpgrade DomainDataNode AdminRouter FederationProvided StorageMapReduceTutorialCommands ReferenceCompatibility with 1.xEncrypted ShufflePluggable Shuffle/SortDistributed Cache DeploySupport for YARN Shared CacheMapReduce REST APIsMR Application MasterMR History ServerYARNArchitectureCommands ReferenceCapacity SchedulerFair SchedulerResourceManager RestartResourceManager HAResource ModelNode LabelsNode AttributesWeb Application ProxyTimeline ServerTimeline Service V.2Writing YARN ApplicationsYARN Application SecurityNodeManagerRunning Applications in Docker ContainersRunning Applications in runC ContainersUsing CGroupsSecure ContainersReservation SystemGraceful DecommissionOpportunistic ContainersYARN FederationShared CacheUsing GPUUsing FPGAPlacement ConstraintsYARN UI2YARN REST APIsIntroductionResource ManagerNode ManagerTimeline ServerTimeline Service V.2YARN ServiceOverviewQuickStartConceptsYarn Service APIService DiscoverySystem ServicesHadoop Compatible File SystemsAliyun OSSAmazon S3Azure Blob StorageAzure Data Lake StorageTencent COSHuaweicloud OBSAuthOverviewExamplesConfigurationBuildingToolsHadoop StreamingHadoop ArchivesHadoop Archive LogsDistCpHDFS Federation BalanceGridMixRumenResource Estimator ServiceScheduler Load SimulatorHadoop BenchmarkingDynamometerReferenceChangelog and Release NotesJava API docsUnix Shell APIMetricsConfigurationcore-default.xmlhdfs-default.xmlhdfs-rbf-default.xmlmapred-default.xmlyarn-default.xmlkms-default.xmlhttpfs-default.xmlDeprecated PropertiesHDFS Router-based FederationIntroductionArchitectureExample flowRouterFederated interfaceRouter heartbeatNameNode heartbeatAvailability and fault toleranceInterfacesQuota managementState StoreSecurityIsolationDeploymentMount table managementQuotasMultiple subclustersDisabling nameservicesRouter server generically refreshRouter state dumpClient configurationNameNode configurationRouter configurationRPC serverConnection to the NamenodesAdmin serverHTTP ServerState StoreRoutingNamenode monitoringQuotaSecurityIsolationMetricsRouter Federation RenameIntroductionNameNodes have scalability limits because of the metadata overhead comprised of inodes (files and directories) and file blocks, the number of Datanode heartbeats, and the number of HDFS RPC client requests. The common solution is to split the filesystem into smaller subclustersHDFS Federationand provide a federated viewViewFs. The problem is how to maintain the split of the subclusters (e.g., namespace partition), which forces users to connect to multiple subclusters and manage the allocation of folders/files to them.ArchitectureA natural extension to this partitioned federation is to add a layer of software responsible for federating the namespaces. This extra layer allows users to access any subcluster transparently, lets subclusters manage their own block pools independently, and will support rebalancing of data across subclusters later (see more info inHDFS-13123). The subclusters in RBF are not required to be the independent HDFS clusters, a normal federation cluster (with multiple block pools) or a mixed cluster with federation and independent cluster is also allowed. To accomplish these goals, the federation layer directs block accesses to the proper subcluster, maintains the state of the namespaces, and provides mechanisms for data rebalancing. This layer must be scalable, highly available, and fault tolerant.This federation layer comprises multiple components. TheRoutercomponent that has the same interface as a NameNode, and forwards the client requests to the correct subcluster, based on ground-truth information from a State Store. TheState Storecombines a remoteMount Table(in the flavor ofViewFs, but shared between clients) and utilization (load/capacity) information about the subclusters. This approach has the same architecture asYARN federation.Example flowThe simplest configuration deploys a Router on each NameNode machine. The Router monitors the local NameNode and its state and heartbeats to the State Store. When a regular DFS client contacts any of the Routers to access a file in the federated filesystem, the Router checks the Mount Table in the State Store (i.e., the local cache) to find out which subcluster contains the file. Then it checks the Membership table in the State Store (i.e., the local cache) for the NameNode responsible for the subcluster. After it has identified the correct NameNode, the Router proxies the request. The client accesses Datanodes directly.RouterThere can be multiple Routers in the system with soft state. Each Router has two roles:Federated interface: expose a single, global NameNode interface to the clients and forward the requests to the active NameNode in the correct subclusterNameNode heartbeat: maintain the information about a NameNode in the State StoreFederated interfaceThe Router receives a client request, checks the State Store for the correct subcluster, and forwards the request to the active NameNode of that subcluster. The reply from the NameNode then flows in the opposite direction. The Routers are stateless and can be behind a load balancer. For health checking, you can use /isActive endpoint as a health probe (e.g.http://ROUTER_HOSTNAME:ROUTER_PORT/isActive). For performance, the Router also caches remote mount table entries and the state of the subclusters. To make sure that changes have been propagated to all Routers, each Router heartbeats its state to the State Store.The communications between the Routers and the State Store are cached (with timed expiration for freshness). This improves the performance of the system.Router heartbeatThe Router periodically heartbeats its state to the State Store.NameNode heartbeatFor this role, the Router periodically checks the state of a NameNode (usually on the same server) and reports their high availability (HA) state and load/space status to the State Store. Note that this is an optional role, as a Router can be independent of any subcluster. For performance with NameNode HA, the Router uses the high availability state information in the State Store to forward the request to the NameNode that is most likely to be active. Note that this service can be embedded into the NameNode itself to simplify the operation.Availability and fault toleranceThe Router operates with failures at multiple levels.Federated interface HA:The Routers are stateless and metadata operations are atomic at the NameNodes. If a Router becomes unavailable, any Router can take over for it. The clients configure their DFS HA client (e.g., ConfiguredFailoverProvider or RequestHedgingProxyProvider) with all the Routers in the federation as endpoints.Unavailable State Store:If a Router cannot contact the State Store, it will enter into a Safe Mode state which disallows it from serving requests. Clients will treat Routers in Safe Mode as it was an Standby NameNode and try another Router. There is a manual way to manage the Safe Mode for the Router.The Safe Mode state can be managed by using the following command:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -safemode enter | leave | getNameNode heartbeat HA:For high availability and flexibility, multiple Routers can monitor the same NameNode and heartbeat the information to the State Store. This increases clients’ resiliency to stale information, should a Router fail. Conflicting NameNode information in the State Store is resolved by each Router via a quorum.Unavailable NameNodes:If a Router cannot contact the active NameNode, then it will try the other NameNodes in the subcluster. It will first try those reported as standby and then the unavailable ones. If the Router cannot reach any NameNode, then it throws an exception.Expired NameNodes:If a NameNode heartbeat has not been recorded in the State Store for a multiple of the heartbeat interval, the monitoring Router will record that the NameNode has expired and no Routers will attempt to access it. If an updated heartbeat is subsequently recorded for the NameNode, the monitoring Router will restore the NameNode from the expired state.InterfacesTo interact with the users and the administrators, the Router exposes multiple interfaces.RPC:The Router RPC implements the most common interfaces clients use to interact with HDFS. The current implementation has been tested using analytics workloads written in plain MapReduce, Spark, and Hive (on Tez, Spark, and MapReduce). Advanced functions like snapshot, encryption and tiered storage are left for future versions. All unimplemented functions will throw exceptions.Admin:Administrators can query information from clusters and add/remove entries from the mount table over RPC. This interface is also exposed through the command line to get and modify information from the federation.Web UI:The Router exposes a Web UI visualizing the state of the federation, mimicking the current NameNode UI. It displays information about the mount table, membership information about each subcluster, and the status of the Routers.WebHDFS:The Router provides the HDFS REST interface (WebHDFS) in addition to the RPC one.JMX:It exposes metrics through JMX mimicking the NameNode. This is used by the Web UI to get the cluster status.Some operations are not available in Router-based federation. The Router throws exceptions for those. Examples users may encounter include the following.Rename file/folder in two different nameservices.Copy file/folder in two different nameservices.Write into a file/folder being rebalanced.Quota managementFederation supports and controls global quota at mount table level. For performance reasons, the Router caches the quota usage and updates it periodically. These quota usage values will be used for quota-verification during each WRITE RPC call invoked in RouterRPCSever. SeeHDFS Quotas Guidefor the quota detail.Note: When global quota is enabled, setting or clearing sub-cluster’s quota directly is not recommended since Router Admin server will override sub-cluster’s quota with global quota.State StoreThe (logically centralized, but physically distributed) State Store maintains:The state of the subclusters in terms of their block access load, available disk space, HA state, etc.The mapping between folder/files and subclusters, i.e. the remote mount table.The backend of the State Store is pluggable. We leverage the fault tolerance of the backend implementations. The main information stored in the State Store and its implementation:Membership: The membership information encodes the state of the NameNodes in the federation. This includes information about the subcluster, such as storage capacity and the number of nodes. The Router periodically heartbeats this information about one or more NameNodes. Given that multiple Routers can monitor a single NameNode, the heartbeat from every Router is stored. The Routers apply a quorum of the data when querying this information from the State Store. The Routers discard the entries older than a certain threshold (e.g., ten Router heartbeat periods).Mount Table: This table hosts the mapping between folders and subclusters. It is similar to the mount table inViewFswhere it specifies the federated folder, the destination subcluster and the path in that folder.SecurityRouter supports security similar tocurrent security modelin HDFS. This feature is available for both RPC and Web based calls. It has the capability to proxy to underlying secure HDFS clusters.Similar to Namenode, support exists for both kerberos and token based authentication for clients connecting to routers. Router internally relies on existing security related configs ofcore-site.xmlandhdfs-site.xmlto support this feature. In addition to that, routers need to be configured with its own keytab and principal.For token based authentication, router issues delegation tokens to upstream clients without communicating with downstream namenodes. Router uses its own credentials to securely proxy to downstream namenode on behalf of upstream real user. Router principal has to be configured as a superuser in all secure downstream namenodes. Referhereto configure proxy user for namenode. Along with that, user owning router daemons should be configured with the same identity as namenode process itself. Referherefor details. Router relies on a state store to distribute tokens across all routers. Apart from default implementation provided users can plugin their own implementation of state store for token management. Default implementation relies on zookeeper for token management. Since a large router/zookeeper cluster could potentially hold millions of tokens,jute.maxbuffersystem property that zookeeper clients rely on should be appropriately configured in router daemons.See the Apache JIRA ticketHDFS-13532for more information on this feature.IsolationRouter supports assignment of the dedicated number of RPC handlers to achieve isolation for all downstream nameservices it is configured to proxy. Since large or busy clusters may have relatively higher RPC traffic to the namenode compared to other clusters namenodes, this feature if enabled allows admins to configure higher number of RPC handlers for busy clusters. If dedicated handlers are not assigned for specific nameservices, equal distribution of RPC handlers is done for all configured nameservices.NoteFanout calls are treated as targeting a special nameservice, thus can be configured with handlers as well.If a downstream namenode is slow/busy enough that permits are unavailable, routers would throw StandByException exception to the client. This would in turn trigger a failover behavior at the client side and clients would connect to a different router in the cluster. This offers a positive effect of automatically load balancing RPCs across all routers nodes. This is important to ensure that a single router does not become a bottleneck in case of unhealthy namenodes and all handlers available in the entire router cluster are utilized.Users can configure handlers based on steady state load that individual downstream namenodes expect and can introduce more routers to the cluster to handle more RPCs overall. Because of the bouncing behavior that clients automatically get in this feature in an event where certain namenodes are overloaded, good clients connecting to good namenodes will always continue to use Rpc lanes dedicated to them. For bad behaving namenodes or backfill jobs that put spiky loads on namenodes, more routers could potentially be added with a higher than usual handler count to deal with the surge in traffic for specific nameservices if needed.Overall the isolation feature is exposed via a configuration dfs.federation.router.handler.isolation.enable. The default value of this feature will be “false”. Users can also introduce their own fairness policy controller for custom allocation of handlers to various nameservices.See the Apache JIRA ticketHDFS-14090for more information on this feature.DeploymentBy default, the Router is ready to take requests and monitor the NameNode in the local machine. It needs to know the State Store endpoint by settingdfs.federation.router.store.driver.class. The rest of the options are documented inhdfs-rbf-default.xml.Once the Router is configured, it can be started:[hdfs]$ $HADOOP_PREFIX/bin/hdfs --daemon start dfsrouterAnd to stop it:[hdfs]$ $HADOOP_PREFIX/bin/hdfs --daemon stop dfsrouterMount table managementThe mount table entries are pretty much the same as inViewFs. Please make sure the downstream namespace path exists before creating mount table entry pointing to it. A good practice for simplifying the management is to name the federated namespace with the same names as the destination namespaces. For example, if we to mount/data/app1in the federated namespace, it is recommended to have that same name as in the destination namespace.The federation admin tool supports managing the mount table. For example, to create three mount points and list them:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -add /tmp ns1 /tmp
[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -add /data/app1 ns2 /data/app1
[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -add /data/app2 ns3 /data/app2
[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -lsIt also supports mount points that disallow writes:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -add /readonly ns1 / -readonlyIf a mount point is not set, the Router will map it to the default namespacedfs.federation.router.default.nameserviceId.Mount table have UNIX-likepermissions, which restrict which users and groups have access to the mount point. Write permissions allow users to add , update or remove mount point. Read permissions allow users to list mount point. Execute permissions are unused.Mount table permission can be set by following command:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -add /tmp ns1 /tmp -owner root -group supergroup -mode 0755The option mode is UNIX-style permissions for the mount table. Permissions are specified in octal, e.g. 0755. By default, this is set to 0755.QuotasRouter-based federation supports global quota at mount table level. Mount table entries may spread multiple subclusters and the global quota will be accounted across these subclusters.The federation admin tool supports setting quotas for specified mount table entries:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -setQuota /path -nsQuota 100 -ssQuota 1024The above command means that we allow the path to have a maximum of 100 file/directories and use at most 1024 bytes storage space. The parameter forssQuotasupports multiple size-unit suffix (e.g. 1k is 1KB, 5m is 5MB). If no suffix is specified then bytes is assumed.Set storage type quota for specified mount table entry:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -setStorageTypeQuota <path> -storageType <storage type>Remove quota for specified mount table entry:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -clrQuota <path>Remove storage type quota for specified mount table entry:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -clrStorageTypeQuota <path>Ls command will show below information for each mount table entry:Source                    Destinations              Owner                     Group                     Mode                      Quota/Usage
/path                     ns0->/path                root                      supergroup                rwxr-xr-x                 [NsQuota: 50/0, SsQuota: 100 B/0 B]Mount table cache is refreshed periodically but it can also be refreshed by executing refresh command:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -refreshThe above command will refresh cache of the connected router. This command is redundant when mount table refresh service is enabled as the service will always keep the cache updated.Multiple subclustersA mount point also supports mapping multiple subclusters. For example, to create a mount point that stores files in subclustersns1andns2.[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -add /data ns1,ns2 /data -order SPACEWhen listing/data, it will show all the folders and files in both subclusters. For deciding where to create a new file/folder it uses the order parameter, it currently supports the following methods:HASH: Follow consistent hashing in the first level. Deeper levels will be in the one of the parent.LOCAL: Try to write data in the local subcluster.RANDOM: Random subcluster. This is usually useful for balancing the load across. Folders are created in all subclusters.HASH_ALL: Follow consistent hashing at all the levels. This approach tries to balance the reads and writes evenly across subclusters. Folders are created in all subclusters.SPACE: Try to write data in the subcluster with the most available space. Folders are created in all subclusters.For the hash-based approaches, the difference is that HASH would make all the files/folders within a folder belong to the same subcluster while HASH_ALL will spread all files under a mount point. For example, assuming we have a HASH mount point for/data/hash, files and folders under/data/hash/folder0will all be in the same subcluster. On the other hand, a HASH_ALL mount point for/data/hash_all, will spread files under/data/hash_all/folder0across all the subclusters for that mount point (subfolders will be created to all subclusters).RANDOM can be used for reading and writing data from/into different subclusters. The common use for this approach is to have the same data in multiple subclusters and balance the reads across subclusters. For example, if thousands of containers need to read the same data (e.g., a library), one can use RANDOM to read the data from any of the subclusters.To determine which subcluster contains a file:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -getDestination /user/user1/file.txtNote that consistency of the data across subclusters is not guaranteed by the Router. By default, if one subcluster is unavailable, writes may fail if they target that subcluster. To allow writing in another subcluster, one can make the mount point fault tolerant:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -add /data ns1,ns2 /data -order HASH_ALL -faulttolerantNote that this can lead to a file to be written in multiple subclusters or a folder missing in one. One needs to be aware of the possibility of these inconsistencies and target thisfaulttolerantapproach to resilient paths. An example for this is the/app-logsfolder which will mostly write once into a subfolder.Disabling nameservicesTo prevent accessing a nameservice (sublcuster), it can be disabled from the federation. For example, one can disablens1, list it and enable it again:[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -nameservice disable ns1
[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -getDisabledNameservices
[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -nameservice enable ns1This is useful when decommissioning subclusters or when one subcluster is missbehaving (e.g., low performance or unavailability).Router server generically refreshTo trigger a runtime-refresh of the resource specified by <key> on <host:ipc_port>. For example, to enable white list checking, we just need to send a refresh command other than restart the router server.[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -refreshRouterArgs <host:ipc_port> <key> [arg1..argn]Router state dumpTo diagnose the current state of the routers, you can use the dumpState command. It generates a text dump of the records in the State Store. Since it uses the configuration to find and read the state store, it is often easiest to use the machine where the routers run. The command runs locally, so the routers do not have to be up to use this command.[hdfs]$ $HADOOP_HOME/bin/hdfs dfsrouteradmin -dumpStateClient configurationFor clients to use the federated namespace, they need to create a new one that points to the routers. For example, a cluster with 4 namespacesns0, ns1, ns2, ns3, can add a new one tohdfs-site.xmlcalledns-fedwhich points to two of the routers:<configuration>
  <property>
    <name>dfs.nameservices</name>
    <value>ns0,ns1,ns2,ns3,ns-fed</value>
  </property>
  <property>
    <name>dfs.ha.namenodes.ns-fed</name>
    <value>r1,r2</value>
  </property>
  <property>
    <name>dfs.namenode.rpc-address.ns-fed.r1</name>
    <value>router1:rpc-port</value>
  </property>
  <property>
    <name>dfs.namenode.rpc-address.ns-fed.r2</name>
    <value>router2:rpc-port</value>
  </property>
  <property>
    <name>dfs.client.failover.proxy.provider.ns-fed</name>
    <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
  </property>
  <property>
    <name>dfs.client.failover.random.order</name>
    <value>true</value>
  </property>
</configuration>Thedfs.client.failover.random.orderset totrueallows distributing the load evenly across the routers.With this setting a user can interact withns-fedas a regular namespace:$ $HADOOP_HOME/bin/hdfs dfs -ls hdfs://ns-fed/
/tmp
/dataThis federated namespace can also be set as the default one atcore-site.xmlusingfs.defaultFS.NameNode configurationIn order for the system to support data-locality, you must configure your NameNodes so that they will trust the routers to supply the user’s client IP address.dfs.namenode.ip-proxy-usersdefines a comma separated list of users that are allowed to provide the client ip address via the caller context.<configuration>
  <property>
    <name>dfs.namenode.ip-proxy-users</name>
    <value>hdfs</value>
  </property>
</configuration>Router configurationOne can add the configurations for Router-based federation tohdfs-rbf-site.xml. The main options are documented inhdfs-rbf-default.xml. The configuration values are described in this section.RPC serverThe RPC server to receive connections from the clients.PropertyDefaultDescriptiondfs.federation.router.default.nameserviceIdNameservice identifier of the default subcluster to monitor.dfs.federation.router.rpc.enabletrueIftrue, the RPC service to handle client requests in the router is enabled.dfs.federation.router.rpc-address0.0.0.0:8888RPC address that handles all clients requests.dfs.federation.router.rpc-bind-host0.0.0.0The actual address the RPC server will bind to.dfs.federation.router.handler.count10The number of server threads for the router to handle RPC requests from clients.dfs.federation.router.handler.queue.size100The size of the queue for the number of handlers to handle RPC client requests.dfs.federation.router.reader.count1The number of readers for the router to handle RPC client requests.dfs.federation.router.reader.queue.size100The size of the queue for the number of readers for the router to handle RPC client requests.Connection to the NamenodesThe Router forwards the client requests to the NameNodes. It uses a pool of connections to reduce the latency of creating them.PropertyDefaultDescriptiondfs.federation.router.connection.pool-size1Size of the pool of connections from the router to namenodes.dfs.federation.router.connection.clean.ms10000Time interval, in milliseconds, to check if the connection pool should remove unused connections.dfs.federation.router.connection.pool.clean.ms60000Time interval, in milliseconds, to check if the connection manager should remove unused connection pools.dfs.federation.router.enable.multiple.socketfalseIf true, ConnectionPool will use a new socket when creating a new connection for the same user. And it’s best used with dfs.federation.router.max.concurrency.per.connection together.dfs.federation.router.max.concurrency.per.connection1The maximum number of requests that a connection can handle concurrently.Admin serverThe administration server to manage the Mount Table.PropertyDefaultDescriptiondfs.federation.router.admin.enabletrueIftrue, the RPC admin service to handle client requests in the router is enabled.dfs.federation.router.admin-address0.0.0.0:8111RPC address that handles the admin requests.dfs.federation.router.admin-bind-host0.0.0.0The actual address the RPC admin server will bind to.dfs.federation.router.admin.handler.count1The number of server threads for the router to handle RPC requests from admin.HTTP ServerThe HTTP Server to provide Web UI and the HDFS REST interface (WebHDFS) for the clients. The default URL is “http://router_host:50071”.PropertyDefaultDescriptiondfs.federation.router.http.enabletrueIftrue, the HTTP service to handle client requests in the router is enabled.dfs.federation.router.http-address0.0.0.0:50071HTTP address that handles the web requests to the Router.dfs.federation.router.http-bind-host0.0.0.0The actual address the HTTP server will bind to.dfs.federation.router.https-address0.0.0.0:50072HTTPS address that handles the web requests to the Router.dfs.federation.router.https-bind-host0.0.0.0The actual address the HTTPS server will bind to.State StoreThe connection to the State Store and the internal caching at the Router.PropertyDefaultDescriptiondfs.federation.router.store.enabletrueIftrue, the Router connects to the State Store.dfs.federation.router.store.serializerorg.apache.hadoop.hdfs.server.federation.store.driver.impl.StateStoreSerializerPBImplClass to serialize State Store records.dfs.federation.router.store.driver.classorg.apache.hadoop.hdfs.server.federation.store.driver.impl.StateStoreZooKeeperImplClass to implement the State Store.dfs.federation.router.store.connection.test60000How often to check for the connection to the State Store in milliseconds.dfs.federation.router.cache.ttl60000How often to refresh the State Store caches in milliseconds.dfs.federation.router.store.membership.expiration300000Expiration time in milliseconds for a membership record.dfs.federation.router.mount-table.cache.updatefalseIf true, Mount table cache is updated whenever a mount table entry is added, modified or removed for all the routers.dfs.federation.router.mount-table.cache.update.timeout1mMax time to wait for all the routers to finish their mount table cache update.dfs.federation.router.mount-table.cache.update.client.max.time5mMax time a RouterClient connection can be cached.RoutingForwarding client requests to the right subcluster.PropertyDefaultDescriptiondfs.federation.router.file.resolver.client.classorg.apache.hadoop.hdfs.server.federation.resolver.MountTableResolverClass to resolve files to subclusters. To enable multiple subclusters for a mount point, set to org.apache.hadoop.hdfs.server.federation.resolver.MultipleDestinationMountTableResolver.dfs.federation.router.namenode.resolver.client.classorg.apache.hadoop.hdfs.server.federation.resolver.MembershipNamenodeResolverClass to resolve the namenode for a subcluster.Namenode monitoringMonitor the namenodes in the subclusters for forwarding the client requests.PropertyDefaultDescriptiondfs.federation.router.heartbeat.enabletrueIftrue, the Router periodically heartbeats its state to the State Store.dfs.federation.router.namenode.heartbeat.enableIftrue, the Router gets namenode heartbeats and send to the State Store. If not explicitly specified takes the same value as fordfs.federation.router.heartbeat.enable.dfs.federation.router.heartbeat.interval5000How often the Router should heartbeat into the State Store in milliseconds.dfs.federation.router.monitor.namenodeThe identifier of the namenodes to monitor and heartbeat.dfs.federation.router.monitor.localnamenode.enabletrueIftrue, the Router should monitor the namenode in the local machine.Note: The configdfs.nameservice.idis recommended to configure ifdfs.federation.router.monitor.localnamenode.enableis enabled. This will allow the Router finding the local node directly. Otherwise, it will find the nameservice Id by matching namenode RPC address with the local node address. If multiple addresses are matched, the Router will fail to start. In addition, if the local node is in a HA mode, it is recommend to configuredfs.ha.namenode.id.QuotaGlobal quota supported in federation.PropertyDefaultDescriptiondfs.federation.router.quota.enablefalseIftrue, the quota system enabled in the Router. In that case, setting or clearing sub-cluster’s quota directly is not recommended since Router Admin server will override sub-cluster’s quota with global quota.dfs.federation.router.quota-cache.update.interval60sHow often the Router updates quota cache. This setting supports multiple time unit suffixes. If no suffix is specified then milliseconds is assumed.SecurityKerberos and Delegation token supported in federation.PropertyDefaultDescriptiondfs.federation.router.keytab.fileThe keytab file used by router to login as its service principal. The principal name is configured with ‘dfs.federation.router.kerberos.principal’.dfs.federation.router.kerberos.principalThe Router service principal. This is typically set torouter/_HOST@REALM.TLD. Each Router will substitute _HOST with its own fully qualified hostname at startup. The _HOST placeholder allows using the same configuration setting on all Routers in an HA setup.dfs.federation.router.kerberos.principal.hostnameThe hostname for the Router containing this configuration file.  Will be different for each machine. Defaults to current hostname.dfs.federation.router.kerberos.internal.spnego.principal${dfs.web.authentication.kerberos.principal}The server principal used by the Router for web UI SPNEGO authentication when Kerberos security is enabled. This is typically set toHTTP/_HOST@REALM.TLDThe SPNEGO server principal begins with the prefix HTTP/ by convention. If the value is ‘*’, the web server will attempt to login with every principal specified in the keytab file ‘dfs.web.authentication.kerberos.keytab’.dfs.federation.router.secret.manager.classorg.apache.hadoop.hdfs.server.federation.router.security.token.ZKDelegationTokenSecretManagerImplClass to implement state store to delegation tokens. Default implementation uses zookeeper as the backend to store delegation tokens.IsolationIsolation and dedicated assignment of RPC handlers across all configured downstream nameservices. The sum of these numbers must be strictly smaller than the total number of router handlers (configed by dfs.federation.router.handler.count).PropertyDefaultDescriptiondfs.federation.router.fairness.policy.controller.classorg.apache.hadoop.hdfs.server.federation.fairness.NoRouterRpcFairnessPolicyControllerDefault handler allocation model to be used if isolation feature is enabled. Recommend to useorg.apache.hadoop.hdfs.server.federation.fairness.StaticRouterRpcFairnessPolicyControllerto fully use the feature.dfs.federation.router.fairness.handler.count.EXAMPLENAMESERVICEDedicated handler assigned to a specific nameservice. If none is specified equal allocation is done across all nameservices.dfs.federation.router.fairness.handler.count.concurrentDedicated handler assigned to fan out calls such asrenewLease.MetricsThe Router and State Store statistics are exposed in metrics/JMX. These info will be very useful for monitoring. More metrics info can seeRBF Metrics,Router RPC MetricsandState Store Metrics.Router Federation RenameEnable Router to rename across namespaces. Currently it is implemented based onHDFS Federation Balanceand has some limits comparing with normal rename. 1. It is much slower than the normal rename so need a longer RPC timeout configuration. Seeipc.client.rpc-timeout.msand its description for more information about RPC timeout. 2. It doesn’t support snapshot path. 3. It doesn’t support to rename path with multiple destinations.PropertyDefaultDescriptiondfs.federation.router.federation.rename.optionNONESpecify the action when rename across namespaces. The option can be NONE(reject rename across namespaces) and DISTCP(rename across namespaces with distcp).dfs.federation.router.federation.rename.force.close.open.filetrueForce close all open files when there is no diff in the DIFF_DISTCP stage.dfs.federation.router.federation.rename.mapMax number of concurrent maps to use for copy.dfs.federation.router.federation.rename.bandwidthSpecify bandwidth per map in MB.dfs.federation.router.federation.rename.delay1000Specify the delayed duration(millie seconds) when the job needs to retry.dfs.federation.router.federation.rename.diff0Specify the threshold of the diff entries that used in incremental copy stage.dfs.federation.router.federation.rename.trashtrashThis options has 3 values: trash (move the source path to trash), delete (delete the source path directly) and skip (skip both trash and deletion).©            2008-2024
              Apache Software Foundation
            
                          -Privacy Policy.
        Apache Maven, Maven, Apache, the Apache feather logo, and the Apache Maven project logos are trademarks of The Apache Software Foundation.