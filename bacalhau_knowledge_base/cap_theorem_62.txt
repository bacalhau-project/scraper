URL: https://en.wikipedia.org/wiki/Eventual_consistency

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Conflict resolution2Strong eventual consistency3See also4References5Further readingToggle the table of contentsEventual consistency7 languagesDeutsch한국어Lombard日本語PortuguêsРусский中文Edit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaConsistency model used in distributed computing to achieve high availabilityThis articlemay be too technical for most readers to understand.Pleasehelp improve ittomake it understandable to non-experts, without removing the technical details.(January 2017)(Learn how and when to remove this message)Eventual consistencyis aconsistency modelused indistributed computingto achievehigh availabilitythat informally guarantees that, if no new updates are made to a given data item, eventually all accesses to that item will return the last updated value.[1]Eventual consistency, also calledoptimistic replication,[2]is widely deployed in distributed systems and has origins in early mobile computing projects.[3]A system that has achieved eventual consistency is often said to haveconverged, or achievedreplica convergence.[4]Eventual consistency is a weak guarantee – most stronger models, likelinearizability, are trivially eventually consistent.Eventually-consistent services are often classified as providing BASE semantics (basically-available, soft-state, eventual consistency), in contrast to traditionalACID (atomicity, consistency, isolation, durability).[5][6]In chemistry, a base is the opposite of an acid, which helps in remembering the acronym.[7]According to the same resource, these are the rough definitions of each term in BASE:Basically available: reading and writing operations are available as much as possible (using all nodes of a database cluster), but might not be consistent (the write might not persist after conflicts are reconciled, and the read might not get the latest write)Soft-state: without consistency guarantees, after some amount of time, we only have some probability of knowing the state, since it might not yet have convergedEventually consistent: If we execute some writes and then the system functions long enough, we can know the state of the data; any further reads of that data item will return the same valueEventual consistency is sometimes criticized[8]as increasing the complexity of distributed software applications. This is partly because eventual consistency is purely alivenessguarantee (reads eventually return the same value) and does not guaranteesafety: an eventually consistent system can return any value before it converges.Conflict resolution[edit]In order to ensure replica convergence, a system must reconcile differences between multiple copies of distributed data. This consists of two parts:exchanging versions or updates of data between servers (often known asanti-entropy);[9]andchoosing an appropriate final state when concurrent updates have occurred, calledreconciliation.The most appropriate approach to reconciliation depends on the application.  A widespread approach is "last writer wins".[1]Another is to invoke a user-specified conflict handler.[4]Timestampsandvector clocksare often used to detect concurrency between updates. Some people use "first writer wins" in situations where "last writer wins" is unacceptable.[10]Reconciliation of concurrent writes must occur sometime before the next read, and can be scheduled at different instants:[3][11]Read repair: The correction is done when a read finds an inconsistency. This slows down the read operation.Write repair: The correction takes place during a write operation, slowing down the write operation.Asynchronous repair: The correction is not part of a read or write operation.Strong eventual consistency[edit]Whereas eventual consistency is only alivenessguarantee (updates will be observed eventually),strong eventual consistency(SEC) adds thesafetyguarantee that any two nodes that have received the same (unordered) set of updates will be in the same state.  If, furthermore, the system ismonotonic, the application will never suffer rollbacks. A common approach to ensure SEC isconflict-free replicated data types.[12]See also[edit]ACIDCAP theoremReferences[edit]^abVogels, W.(2009)."Eventually consistent".Communications of the ACM.52: 40–44.doi:10.1145/1435417.1435432.^Vogels, W.(2008)."Eventually Consistent".Queue.6(6): 14–19.doi:10.1145/1466443.1466448.^abTerry, D. B.; Theimer, M. M.; Petersen, K.; Demers, A. J.; Spreitzer, M. J.; Hauser, C. H. (1995). "Managing update conflicts in Bayou, a weakly connected replicated storage system".Proceedings of the fifteenth ACM symposium on Operating systems principles - SOSP '95. p. 172.CiteSeerX10.1.1.12.7323.doi:10.1145/224056.224070.ISBN978-0897917155.S2CID7834967.^abPetersen, K.; Spreitzer, M. J.; Terry, D. B.; Theimer, M. M.; Demers, A. J. (1997). "Flexible update propagation for weakly consistent replication".ACM SIGOPS Operating Systems Review.31(5): 288.CiteSeerX10.1.1.17.555.doi:10.1145/269005.266711.^Pritchett, D. (2008)."Base: An Acid Alternative".Queue.6(3): 48–55.doi:10.1145/1394127.1394128.^Bailis, P.; Ghodsi, A. (2013)."Eventual Consistency Today: Limitations, Extensions, and Beyond".Queue.11(3): 20.doi:10.1145/2460276.2462076.^Roe, Charles (March 2012)."ACID vs. BASE: The Shifting pH of Database Transaction Processing".DATAVERSITY. DATAVERSITY Education, LLC. Retrieved29 August2019.^HYaniv Pessach (2013),Distributed Storage(Distributed Storage: Concepts, Algorithms, and Implementations ed.), Amazon,OL25423189M,Systems using Eventual Consistency result in decreased system load and increased system availability but result in increased cognitive complexity for users and developers^Demers, A.; Greene, D.; Hauser, C.; Irish, W.; Larson, J. (1987). "Epidemic algorithms for replicated database maintenance".Proceedings of the sixth annual ACM Symposium on Principles of distributed computing - PODC '87. p. 1.doi:10.1145/41840.41841.ISBN978-0-89791-239-6.S2CID1889203.^Rockford Lhotka."Concurrency techniques"Archived2018-05-11 at theWayback Machine.
2003.^Olivier Mallassi (2010-06-09)."Let's play with Cassandra… (Part 1/3)". OCTO Talks!. Retrieved2011-03-23.Of course, at a given time, chances are high that each node has its own version of the data. Conflict resolution is made during the read requests (called read-repair) and the current version of Cassandra does not provide a Vector Clock conflict resolution mechanisms [sic] (should be available in the version 0.7). Conflict resolution is so based on timestamp (the one set when you insert the row or the column): the higher timestamp win[s] and the node you are reading the data [from] is responsible for that. This is an important point because the timestamp is specified by the client, at the moment the column is inserted. Thus, all Cassandra clients' [sic] need to be synchronized...^Shapiro, Marc; Preguiça, Nuno; Baquero, Carlos; Zawirski, Marek (2011-10-10). "Conflict-free replicated data types".SSS'11 Proceedings of the 13th International Conference on Stabilization, Safety, and the Security of Distributed Systems. Springer-Verlag Berlin, Heidelberg: 386–400.Further reading[edit]Burckhardt, Sebastian (2014-10-09)."Principles of Eventual Consistency".Foundations and Trends in Programming Languages.1(1–2): 1–150.doi:10.1561/2500000011.ISSN2325-1107.Retrieved from "https://en.wikipedia.org/w/index.php?title=Eventual_consistency&oldid=1228677241"Category:Consistency modelsHidden categories:Webarchive template wayback linksArticles with short descriptionShort description matches WikidataWikipedia articles that are too technical from January 2017All articles that are too technicalThis page was last edited on 12 June 2024, at 15:18(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view