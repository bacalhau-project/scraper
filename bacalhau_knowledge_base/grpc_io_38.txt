URL: https://grpc.io/docs/languages/dart/quickstart/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issuePrerequisitesGet the example codeRun the exampleUpdate the appUpdate the gRPC serviceRegenerate gRPC codeUpdate the serverUpdate the clientRun the updated appContributingWhat’s nextDocsLanguagesDartQuick startQuick startThis guide gets you started with gRPC in Dart with a simple working example.ContentsPrerequisitesGet the example codeRun the exampleUpdate the appUpdate the gRPC serviceRegenerate gRPC codeUpdate the serverUpdate the clientRun the updated appContributingWhat’s nextQuick startThis guide gets you started with gRPC in Dart with a simple working example.PrerequisitesDartversion 2.12 or higher, through the Dart orFlutterSDKsFor installation instructions, seeInstall DartorInstall Flutter.Protocol buffercompiler,protoc,version 3For installation instructions, seeProtocol Buffer Compiler
Installation.Dart pluginfor the protocol compiler:Install the protocol compiler plugin for Dart (protoc-gen-dart) using
the following command:$ dart pub global activate protoc_pluginUpdate yourPATHso that theprotoccompiler can find the plugin:$exportPATH="$PATH:$HOME/.pub-cache/bin"NoteDart gRPC supports the Flutter and Server platforms.Get the example codeThe example code is part of thegrpc-dartrepo.Download the repo as a zip fileand unzip it, or clone
the repo:$ git clone https://github.com/grpc/grpc-dartChange to the quick start example directory:$cdgrpc-dart/example/helloworldRun the exampleFrom theexample/helloworlddirectory:Download package dependencies:$ dart pub getRun the server:$ dart bin/server.dartFrom another terminal, run the client:$ dart bin/client.dartGreeter client received: Hello, world!Congratulations! You’ve just run a client-server application with gRPC.Update the appIn this section you’ll update the app to make use of an extra server method. The
gRPC service is defined usingprotocol buffers. To learn more about how to
define a service in a.protofile, seeBasics tutorial. For now, all you
need to know is that both the server and the client stub have aSayHello()RPC
method that takes aHelloRequestparameter from the client and returns aHelloReplyfrom the server, and that the method is defined like this:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Update the gRPC serviceOpenprotos/helloworld.protoand add a newSayHelloAgain()method, with the
same request and response types:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}// Sends another greetingrpcSayHelloAgain (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Remember to save the file!Regenerate gRPC codeBefore you can use the new service method, you need to recompile the updated
proto file. From theexample/helloworlddirectory, run the following command:$ protoc --dart_out=grpc:lib/src/generated -Iprotos protos/helloworld.protoYou’ll find the regenerated request and response classes, and client and server
classes in thelib/src/generateddirectory.Now implement and call the new RPC in the server and client code, respectively.Update the serverOpenbin/server.dartand add the followingsayHelloAgain()method to theGreeterServiceclass:classGreeterServiceextendsGreeterServiceBase {@overrideFuture<HelloReply>sayHello(ServiceCall call, HelloRequest request)async{returnHelloReply()..message='Hello,${request.name}!';}@overrideFuture<HelloReply>sayHelloAgain(ServiceCall call, HelloRequest request)async{returnHelloReply()..message='Hello again,${request.name}!';}}Update the clientAdd a call tosayHelloAgain()inbin/client.dartlike this:Future<void>main(List<String>args)async{finalchannel=ClientChannel('localhost',port:50051,options:constChannelOptions(credentials:ChannelCredentials.insecure()),);finalstub=GreeterClient(channel);finalname=args.isNotEmpty?args[0]:'world';try{varresponse=awaitstub.sayHello(HelloRequest()..name=name);print('Greeter client received:${response.message}');response=awaitstub.sayHelloAgain(HelloRequest()..name=name);print('Greeter client received:${response.message}');}catch(e) {print('Caught error:$e');}awaitchannel.shutdown();}Run the updated appRun the client and server like you did before. Execute the following commands
from theexample/helloworlddirectory:Run the server:$ dart bin/server.dartFrom another terminal, run the client. This time, add a name as a command-line
argument:$ dart bin/client.dart AliceYou’ll see the following output:Greeter client received: Hello, Alice!Greeter client received: Hello again, Alice!ContributingIf you experience problems with Dart gRPC or have a feature request,create an
issueover thegrpc-dartrepo.What’s nextLearn how gRPC works inIntroduction to gRPCandCore concepts.Work through theBasics tutorial.Explore theAPI reference.Last modified February 16, 2023:Update Protocol Buffers documentation URL (#1092) (852a744)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About