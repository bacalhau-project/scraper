URL: https://www.consul.io/docs/security/encryption

HashiDaysOne conference. Three cities.Find a city near youDismiss alertHashiCorp DeveloperHashiCorp Cloud PlatformTerraformPackerConsulVaultBoundaryNomadWaypointVagrantConsulInstallTutorialsDocumentationAPICLITry Cloud(opens in new tab)SearchCommand or control keyK keySign inSign upThemeConsul HomeDocumentationDocumentationWhat is Consul?Why Choose Consul?Core ConceptsGet StartedArchitectureRelease NotesUpgradeServicesService MeshDynamic App ConfigurationSecurityOverviewAccess Control (ACLs)EncryptionSecurity ModelsAgentIntegrationsTroubleshootKubernetesNomadAWS ECSAWS LambdaHCP Consul DedicatedConsul EnterpriseNetwork Infrastructure AutomationResourcesTutorial LibraryCertificationsCommunity Forum(opens in new tab)Support(opens in new tab)GitHub(opens in new tab)DeveloperConsulDocumentationSecurityEncryptionv1.19.x (latest)Consulv1.18.xv1.17.xv1.16.xv1.15.xv1.14.xv1.13.xv1.12.xv1.11.xv1.10.xv1.9.xv1.8.xEncryptionThe Consul agent supports encrypting all of its network traffic. The exact
method of encryption is described on theencryption internals page.
There are two separate encryption systems, one for gossip traffic and one for RPC.To configure the encryption systems on a new cluster, review this following tutorials toenable gossip encryptionandTLS encryption for agent communication.Gossip EncryptionEnabling gossip encryption only requires that you set an encryption key when
starting the Consul agent. The key can be set via theencryptparameter.WAN Joined Datacenters Note:If using multiple WAN joined datacenters, be sure to usethe same encryption keyin all datacenters.The key must be 32-bytes, Base64 encoded. As a convenience, Consul provides theconsul keygencommand to generate a
cryptographically suitable key:$consul keygenpUqJrVyVRj5jsiYEkM/tFQYfWyJIv4s3XkvDwy7Cu5s=With that key, you can enable encryption on the agent. If encryption is enabled,
the output ofconsul agentwill include "Encrypt: true":$cat encrypt.json{"encrypt": "pUqJrVyVRj5jsiYEkM/tFQYfWyJIv4s3XkvDwy7Cu5s="}$consul agent -data-dir=/tmp/consul -config-file=encrypt.json==> WARNING: LAN keyring exists but -encrypt given, using keyring==> WARNING: WAN keyring exists but -encrypt given, using keyring==> Starting Consul agent...==> Starting Consul agent RPC...==> Consul agent running!Node name: 'Armons-MacBook-Air.local'Datacenter: 'dc1'Server: false (bootstrap: false)Client Addr: 127.0.0.1 (HTTP: 8500, HTTPS: -1, DNS: 8600, RPC: 8400)Cluster Addr: 10.1.10.12 (LAN: 8301, WAN: 8302)Gossip encrypt: true, RPC-TLS: false, TLS-Incoming: false...All nodes within a Consul cluster must share the same encryption key in
order to send and receive cluster information.Configuring Gossip Encryption on an existing clusterAs of version 0.8.4, Consul supports upshifting to encrypted gossip on a running cluster
through the following process. Review thisstep-by-step tutorialto encrypt gossip on an existing cluster.RPC Encryption with TLSConsul supports using TLS to verify the authenticity of servers and clients. To enable this,
Consul requires that all clients and servers have key pairs that are generated by a single
Certificate Authority. This can be a private CA, used only internally. The
CA then signs keys for each of the agents, as inthis tutorial on generating both a CA and signing keys.Certificates need to be created with x509v3 extendedKeyUsage attributes for both clientAuth and serverAuth since Consul uses a single cert/key pair for both server and client communications.TLS can be used to verify the authenticity of the servers or verify the authenticity of clients.
These modes are controlled by theverify_outgoing,verify_server_hostname,
andverify_incomingoptions, respectively.Ifverify_outgoingis set, agents verify the
authenticity of Consul for outgoing connections. Server nodes must present a certificate signed
by a common certificate authority present on all agents, set via the agent'sca_fileandca_pathoptions. All server nodes must have an appropriate key pair set usingcert_fileandkey_file.Ifverify_server_hostnameis set, then
outgoing connections perform hostname verification. All servers must have a certificate
valid forserver.<datacenter>.<domain>or the client will reject the handshake. This is
a new configuration as of 0.5.1, and it is used to prevent a compromised client from being
able to restart in server mode and perform a MITM (Man-In-The-Middle) attack. New deployments should set this
to true, and generate the proper certificates, but this is defaulted to false to avoid breaking
existing deployments.Ifverify_incomingis set, the servers verify the
authenticity of all incoming connections. All clients must have a valid key pair set usingcert_fileandkey_file. Servers will
also disallow any non-TLS connections. To force clients to use TLS,verify_outgoingmust also be set.TLS is used to secure the RPC calls between agents, but gossip between nodes is done over UDP
and is secured using a symmetric key. See above for enabling gossip encryption.Configuring TLS on an existing clusterAs of version 0.8.4, Consul supports migrating to TLS-encrypted traffic on a running cluster
without downtime. This process assumes a starting point with no TLS settings configured and involves
an intermediate step in order to get to full TLS encryption. Review theSecuring RPC Communication with TLS Encryption tutorialfor the step-by-step process to configure TLS on a new or existing cluster. Note the call outs there
for existing cluster configuration.Edit this page on GitHubOn this page:EncryptionGossip EncryptionConfiguring Gossip Encryption on an existing clusterRPC Encryption with TLSConfiguring TLS on an existing clusterThemeCertificationsSystem StatusCookie ManagerTerms of UseSecurityPrivacyTrademark PolicyTrade ControlsAccessibilityGive Feedback(opens in new tab)