URL: https://docs.bacalhau.org/setting-up/workload-onboarding/r-custom-docker-prophet/index

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookBuilding and Running your Custom R Containers on BacalhauIntroductionThis example will walk you through building Time Series Forecasting usingProphet. Prophet is a forecasting procedure implemented in R and Python. It is fast and provides completely automated forecasts that can be tuned by hand by data scientists and analysts.Quick script to run custom R container on Bacalhau:Copybacalhaudockerrun\-iipfs://QmY8BAftd48wWRYDf5XnZGkhwqgjpzjyUG3hN1se6SYaFt:/example_wp_log_R.csv\ghcr.io/bacalhau-project/examples/r-prophet:0.0.2\--RscriptSaturating-Forecasts.R"/example_wp_log_R.csv""/outputs/output0.pdf""/outputs/output1.pdf"PrerequisitesTo get started, you need to install the Bacalhau client, see more informationhere1. Running Prophet in R LocallyOpen R studio or R-supported IDE. If you want to run this on a notebook server, then make sure you use an R kernel. Prophet is a CRAN package, so you can useinstall.packagesto install theprophetpackage:CopyR-e"install.packages('prophet',dependencies=TRUE, repos='http://cran.rstudio.com/')"After installation is finished, you can download the example data that is stored in IPFS:Copywgethttps://w3s.link/ipfs/QmZiwZz7fXAvQANKYnt7ya838VPpj4agJt5EDvRYp3Deeo/example_wp_log_R.csvThe code below instantiates the library and fits a model to the data.Copymkdir-poutputsmkdir-pRCreate a new file calledSaturating-Forecasts.Rand in it paste the following script:Copy# content of the Saturating-Forecasts.R# Library Inclusionlibrary('prophet')# Command Line Arguments:args=commandArgs(trailingOnly=TRUE)argsinput=args[1]output=args[2]output1=args[3]# File Path Processing:I<-paste("",input, sep="")O<-paste("", output, sep="")O1<-paste("", output1 ,sep="")# Read CSV Data:df<-read.csv(I)# Forecasting 1:df$cap<-8.5m<-prophet(df, growth='logistic')future<-make_future_dataframe(m, periods=1826)future$cap<-8.5fcst<-predict(m, future)pdf(O)plot(m, fcst)dev.off()# Forecasting 2:df$y<-10-df$ydf$cap<-6df$floor<-1.5future$cap<-6future$floor<-1.5m<-prophet(df, growth='logistic')fcst<-predict(m, future)pdf(O1)plot(m, fcst)dev.off()This script performs time series forecasting using the Prophet library in R, taking input data from a CSV file, applying the forecasting model, and generating plots for analysis.Let's have a look at the command below:CopyRscriptSaturating-Forecasts.R"example_wp_log_R.csv""outputs/output0.pdf""outputs/output1.pdf"This command uses Rscript to execute the script that was created and written to theSaturating-Forecasts.Rfile.The input parameters provided in this case are the names of input and output files:example_wp_log_R.csv- the example data that was previously downloaded.outputs/output0.pdf- the name of the file to save the first forecast plot.outputs/output1.pdf- the name of the file to save the second forecast plot.2. Running R Prophet on BacalhauTo use Bacalhau, you need to package your code in an appropriate format. The developers have already pushed a container for you to use, but if you want to build your own, you can follow the steps below. You can view adedicated container examplein the documentation.3. Containerize Script with DockerTo build your own docker container, create aDockerfile, which contains instructions to build your image.CopyFROMr-baseRUNR -e"install.packages('prophet',dependencies=TRUE, repos='http://cran.rstudio.com/')"RUNmkdir /RRUNmkdir /outputsCOPYSaturating-Forecasts.R RWORKDIR/RThese commands specify how the image will be built, and what extra requirements will be included. We user-baseas the base image and then install theprophetpackage. We then copy theSaturating-Forecasts.Rscript into the container and set the working directory to theRfolder.Build the containerWe will rundocker buildcommand to build the container:Copydocker build -t <hub-user>/<repo-name>:<tag> .Before running the command replace:hub-userwith your docker hub username. If you don’t have a docker hub accountfollow these instructions to create docker account, and use the username of the account you createdrepo-namewith the name of the container, you can name it anything you wanttagthis is not required but you can use thelatesttagIn our case:Copydockerbuildxbuild--platformlinux/amd64-tghcr.io/bacalhau-project/examples/r-prophet:0.0.1.Push the containerNext, upload the image to the registry. This can be done by using the Docker hub username, repo name, or tag.Copydocker push <hub-user>/<repo-name>:<tag>In our case:Copydockerpushghcr.io/bacalhau-project/examples/r-prophet:0.0.14. Running a Job on BacalhauThe following command passes a prompt to the model and generates the results in the outputs directory. It takes approximately 2 minutes to run.CopyexportJOB_ID=$(bacalhaudockerrun\--wait\--id-only\-iipfs://QmY8BAftd48wWRYDf5XnZGkhwqgjpzjyUG3hN1se6SYaFt:/example_wp_log_R.csv\ghcr.io/bacalhau-project/examples/r-prophet:0.0.2\--RscriptSaturating-Forecasts.R"/example_wp_log_R.csv""/outputs/output0.pdf""/outputs/output1.pdf")Structure of the commandbacalhau docker run: call to Bacalhau-i ipfs://QmY8BAftd48wWRYDf5XnZGkhwqgjpzjyUG3hN1se6SYaFt:/example_wp_log_R.csv: Mounting the uploaded dataset at/inputsin the execution. It takes two arguments, the first is the IPFS CID (QmY8BAftd48wWRYDf5XnZGkhwqgjpzjyUG3hN1se6SYaFtz) and the second is file path within IPFS (/example_wp_log_R.csv)ghcr.io/bacalhau-project/examples/r-prophet:0.0.2: the name and the tag of the docker image we are using/example_wp_log_R.csv: path to the input dataset/outputs/output0.pdf,/outputs/output1.pdf: paths to the outputRscript Saturating-Forecasts.R: execute the R scriptWhen a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on:5. Checking the State of your JobsJob status: You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysPublishedorCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (results) and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presultsbacalhaujobget${JOB_ID}--output-dirresults6. Viewing your Job OutputTo view the file, run the following command:Copylsresults/outputsYou can't natively display PDFs in notebooks, so here are some static images of the PDFs:output0.pdfoutput1.pdfSupportIf you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).Static BadgePreviousR (language)NextRunning a Simple R Script on BacalhauLast updated2 months agoOn this pageIntroductionPrerequisites1. Running Prophet in R Locally2. Running R Prophet on Bacalhau3. Containerize Script with DockerBuild the containerPush the container4. Running a Job on BacalhauStructure of the command5. Checking the State of your Jobs6. Viewing your Job OutputSupportWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.