URL: https://en.wikipedia.org/wiki/Computer_science

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1History2Etymology and scope3PhilosophyToggle Philosophy subsection3.1Epistemology of computer science3.2Paradigms of computer science4FieldsToggle Fields subsection4.1Theoretical computer science4.1.1Theory of computation4.1.2Information and coding theory4.1.3Data structures and algorithms4.1.4Programming language theory and formal methods4.2Applied computer science4.2.1Computer graphics and visualization4.2.2Image and sound processing4.2.3Computational science, finance and engineering4.2.4Social computing and human–computer interaction4.2.5Software engineering4.2.6Artificial intelligence4.3Computer systems4.3.1Computer architecture and organization4.3.2Concurrent, parallel and distributed computing4.3.3Computer networks4.3.4Computer security and cryptography4.3.5Databases and data mining5Discoveries6Programming paradigms7Research8See also9Notes10References11Further reading12External linksToggle the table of contentsComputer science162 languagesAfrikaansAlemannischአማርኛالعربيةAragonésArmãneashtiঅসমীয়াAsturianuAzərbaycancaتۆرکجهবাংলা閩南語 / Bân-lâm-gúБашҡортсаБеларускаяБеларуская (тарашкевіца)भोजपुरीBikol CentralБългарскиBoarischBosanskiBrezhonegCatalàČeštinaCorsuCymraegDanskDeutschEestiΕλληνικάEmiliàn e rumagnòlEspañolEsperantoEstremeñuEuskaraفارسیFøroysktFrançaisFryskFurlanGaeilgeGaelgGalego客家語 / Hak-kâ-ngî한국어Հայերենहिन्दीHrvatskiBahasa IndonesiaInterlinguaInterlingueᐃᓄᒃᑎᑐᑦ / inuktitutIsiZuluÍslenskaItalianoעבריתKalaallisutಕನ್ನಡქართულიKaszëbscziҚазақшаKiswahiliKreyòl ayisyenKriyòl gwiyannenKurdîLadinoLatgaļuLatinaLatviešuLëtzebuergeschLietuviųLigureLa .lojban.LombardMagyarМакедонскиMalagasyമലയാളംმარგალურიمصرىBahasa Melayuꯃꯤꯇꯩ ꯂꯣꯟMinangkabauMirandésМокшеньМонголမြန်မာဘာသာNederlandsNedersaksiesनेपालीनेपाल भाषा日本語NapulitanoNordfriiskNorsk bokmålNorsk nynorskNouormandNovialOccitanОлык марийଓଡ଼ିଆOromooOʻzbekcha / ўзбекчаपालिپښتوភាសាខ្មែរPicardPiemontèisTok PisinPlattdüütschPolskiPortuguêsQaraqalpaqshaRomânăRuna SimiРусиньскыйРусскийСаха тылаसंस्कृतम्SarduScotsSeelterskShqipSicilianuසිංහලSimple EnglishسنڌيSlovenčinaSlovenščinaکوردیСрпски / srpskiSrpskohrvatski / српскохрватскиSundaSuomiSvenskaTagalogதமிழ்TaclḥitTaqbaylitТатарча / tatarçaၽႃႇသႃႇတႆးతెలుగుTetunไทยትግርኛТоҷикӣTürkçeУкраїнськаاردوئۇيغۇرچە / UyghurcheVènetoTiếng ViệtVõroWalonWinarayWolof吴语Yorùbá粵語ZazakiZeêuwsŽemaitėška中文Edit linksArticleTalkEnglishReadView sourceView historyToolsToolsmove to sidebarhideActionsReadView sourceView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsWikimedia CommonsWikiquoteWikiversityAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaStudy of computationFor other uses, seeComputer science (disambiguation).Fundamental areas of computer scienceProgramming language theoryComputational complexity theoryArtificial intelligenceComputer architectureComputer scienceHistoryOutlineGlossaryCategoryvteComputer scienceis the study ofcomputation,information, andautomation.[1][2][3]Computer science spanstheoretical disciplines(such asalgorithms,theory of computation, andinformation theory) toapplied disciplines(including the design and implementation ofhardwareandsoftware).[4][5][6]Algorithms anddata structuresare central to computer science.[7]The theory of computation concerns abstractmodels of computationand general classes ofproblemsthat can be solved using them. The fields ofcryptographyandcomputer securityinvolve studying the means for secure communication and preventingsecurity vulnerabilities.Computer graphicsandcomputational geometryaddress the generation of images.Programming language theoryconsiders different ways to describe computational processes, anddatabasetheory concerns the management of repositories of data.Human–computer interactioninvestigates the interfaces through which humans and computers interact, and software engineering focuses on the design and principles behind developing software. Areas such asoperating systems,networksandembedded systemsinvestigate the principles and design behindcomplex systems. Computer architecture describes the construction of computer components and computer-operated equipment.Artificial intelligenceandmachine learningaim to synthesize goal-orientated processes such as problem-solving, decision-making, environmental adaptation,planningand learning found in humans and animals. Within artificial intelligence,computer visionaims to understand and process image and video data, whilenatural language processingaims to understand and process textual and linguistic data.The fundamental concern of computer science is determining what can and cannot be automated.[2][8][3][9][10]TheTuring Awardis generally recognized as the highest distinction in computer science.[11][12]HistoryMain article:History of computer scienceHistory of computingHardwareHardware before 1960Hardware 1960s to presentSoftwareSoftwareSoftware configuration managementUnixFree software and open-source softwareComputer scienceArtificial intelligenceCompiler constructionEarly computer scienceOperating systemsProgramming languagesProminent pioneersSoftware engineeringModern conceptsGeneral-purpose CPUsGraphical user interfaceInternetLaptopsPersonal computersVideo gamesWorld Wide WebCloudBy countryBulgariaEastern BlocPolandRomaniaSouth AmericaSoviet UnionYugoslaviaTimeline of computingbefore 19501950–19791980–19891990–19992000–20092010–20192020–presentmore timelines...Glossary of computer scienceCategoryvteGottfried Wilhelm Leibniz(1646–1716) developedlogicin abinary numbersystem and has been called the "founder of computer science".[13]Charles Babbageis sometimes referred to as the "father of computing".[14]Ada Lovelacepublished the firstalgorithmintended for processing on a computer.[15]The earliest foundations of what would become computer science predate the invention of the moderndigital computer. Machines for calculating fixed numerical tasks such as theabacushave existed since antiquity, aiding in computations such as multiplication and division.Algorithmsfor performing computations have existed since antiquity, even before the development of sophisticated computing equipment.[16]Wilhelm Schickarddesigned and constructed the first workingmechanical calculatorin 1623.[17]In 1673,Gottfried Leibnizdemonstrated a digital mechanical calculator, called theStepped Reckoner.[18]Leibniz may be considered the firstcomputer scientistand information theorist, because of various reasons, including the fact that he documented the binary number system. In 1820,Thomas de Colmarlaunched the mechanical calculator industry[note 1]when he invented his simplifiedarithmometer, the first calculating machine strong enough and reliable enough to be used daily in an office environment.Charles Babbagestarted the design of the firstautomatic mechanical calculator, hisDifference Engine, in 1822, which eventually gave him the idea of the firstprogrammable mechanical calculator, hisAnalytical Engine.[19]He started developing this machine in 1834, and "in less than two years, he had sketched out many of thesalientfeatures of the modern computer".[20]"A crucial step was the adoption of a punched card system derived from theJacquard loom"[20]making it infinitely programmable.[note 2]In 1843, during the translation of a French article on the Analytical Engine,Ada Lovelacewrote, in one of the many notes she included, an algorithm to compute theBernoulli numbers, which is considered to be the first published algorithm ever specifically tailored for implementation on a computer.[21]Around 1885,Herman Hollerithinvented thetabulator, which usedpunched cardsto process statistical information; eventually his company became part ofIBM. Following Babbage, although unaware of his earlier work,Percy Ludgatein 1909 published[22]the 2nd of the only two designs for mechanical analytical engines in history. In 1914, the Spanish engineerLeonardo Torres Quevedopublished hisEssays on Automatics,[23]and designed, inspired by Babbage, a theoretical electromechanical calculating machine which was to be controlled by a read-only program. The paper also introduced the idea offloating-point arithmetic.[24][25]In 1920, to celebrate the 100th anniversary of the invention of the arithmometer, Torres presented in Paris theElectromechanical Arithmometer, a prototype that demonstrated the feasibility of an electromechanical analytical engine,[26]on which commands could be typed and the results printed automatically.[27]In 1937, one hundred years after Babbage's impossible dream,Howard Aikenconvinced IBM, which was making all kinds of punched card equipment and was also in the calculator business[28]to develop his giant programmable calculator, theASCC/Harvard Mark I, based on Babbage's Analytical Engine, which itself used cards and a central computing unit. When the machine was finished, some hailed it as "Babbage's dream come true".[29]During the 1940s, with the development of new and more powerfulcomputingmachines such as theAtanasoff–Berry computerandENIAC, the termcomputercame to refer to the machines rather than their human predecessors.[30]As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to studycomputationin general. In 1945, IBM founded theWatson Scientific Computing LaboratoryatColumbia UniversityinNew York City. The renovated fraternity house on Manhattan's West Side was IBM's first laboratory devoted to pure science. The lab is the forerunner of IBM's Research Division, which today operates research facilities around the world.[31]Ultimately, the close relationship between IBM and Columbia University was instrumental in the emergence of a new scientific discipline, with Columbia offering one of the first academic-credit courses in computer science in 1946.[32]Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.[33][34]The world's first computer science degree program, theCambridge Diploma in Computer Science, began at theUniversity of Cambridge Computer Laboratoryin 1953. The first computer science department in the United States was formed atPurdue Universityin 1962.[35]Since practical computers became available, many applications of computing have become distinct areas of study in their own rights.See also:History of computingandHistory of informaticsEtymology and scopeSee also:Informatics § EtymologyAlthough first proposed in 1956,[36]the term "computer science" appears in a 1959 article inCommunications of the ACM,[37]in which Louis Fein argues for the creation of aGraduate School in Computer Sciencesanalogous to the creation ofHarvard Business Schoolin 1921.[38]Louis justifies the name by arguing that, likemanagement science, the subject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.[37]His efforts, and those of others such asnumerical analystGeorge Forsythe, were rewarded: universities went on to create such departments, starting with Purdue in 1962.[39]Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed.[40]Certain departments of major universities prefer the termcomputing science, to emphasize precisely that difference. Danish scientistPeter Naursuggested the termdatalogy,[41]to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. An alternative term, also proposed by Naur, isdata science; this is now used for amulti-disciplinaryfield of data analysis, including statistics and databases.In the early days of computing, a number of terms for the practitioners of the field of computing were suggested in theCommunications of the ACM—turingineer,turologist,flow-charts-man,applied meta-mathematician, andappliedepistemologist.[42]Three months later in the same journal,comptologistwas suggested, followed next year byhypologist.[43]The termcomputicshas also been suggested.[44]In Europe, terms derived from contracted translations of the expression "automatic information" (e.g. "informazione automatica" in Italian) or "information and mathematics" are often used, e.g.informatique(French),Informatik(German),informatica(Italian, Dutch),informática(Spanish, Portuguese),informatika(Slavic languagesandHungarian) orpliroforiki(πληροφορική, which means informatics) inGreek. Similar words have also been adopted in the UK (as in theSchool of Informatics, University of Edinburgh).[45]"In the U.S., however,informaticsis linked with applied computing, or computing in the context of another domain."[46]A folkloric quotation, often attributed to—but almost certainly not first formulated by—Edsger Dijkstra, states that "computer science is no more about computers than astronomy is about telescopes."[note 3]The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of computer hardware is usually considered part ofcomputer engineering, while the study of commercialcomputer systemsand their deployment is often called information technology orinformation systems. However, there has been exchange of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such ascognitive science,linguistics,mathematics,physics,biology,Earth science,statistics,philosophy, andlogic.Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.[33]Early computer science was strongly influenced by the work of mathematicians such asKurt Gödel,Alan Turing,John von Neumann,Rózsa PéterandAlonzo Churchand there continues to be a useful interchange of ideas between the two fields in areas such asmathematical logic,category theory,domain theory, andalgebra.[36]The relationship between computer science and software engineering is a contentious issue, which is further muddied bydisputesover what the term "software engineering" means, and how computer science is defined.[47]David Parnas, taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.[48]The academic, political, and funding aspects of computer science tend to depend on whether a department is formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment withcomputational science. Both types of departments tend to make efforts to bridge the field educationally if not across all research.PhilosophyMain article:Philosophy of computer scienceEpistemology of computer scienceDespite the wordsciencein its name, there is debate over whether or not computer science is a discipline of science,[49]mathematics,[50]or engineering.[51]Allen NewellandHerbert A. Simonargued in 1975,Computer science is an empirical discipline. We would have called it an experimental science, but like astronomy, economics, and geology, some of its unique forms of observation and experience do not fit a narrow stereotype of the experimental method. Nonetheless, they are experiments. Each new machine that is built is an experiment. Actually constructing the machine poses a question to nature; and we listen for the answer by observing the machine in operation and analyzing it by all analytical and measurement means available.[51]It has since been argued that computer science can be classified as an empirical science since it makes use of empirical testing to evaluate thecorrectness of programs, but a problem remains in defining the laws and theorems of computer science (if any exist) and defining the nature of experiments in computer science.[51]Proponents of classifying computer science as an engineering discipline argue that the reliability of computational systems is investigated in the same way as bridges incivil engineeringand airplanes inaerospace engineering.[51]They also argue that while empirical sciences observe what presently exists, computer science observes what is possible to exist and while scientists discover laws from observation, no proper laws have been found in computer science and it is instead concerned with creating phenomena.[51]Proponents of classifying computer science as a mathematical discipline argue that computer programs are physical realizations of mathematical entities and programs that can bedeductively reasonedthrough mathematicalformal methods.[51]Computer scientistsEdsger W. DijkstraandTony Hoareregard instructions for computer programs as mathematical sentences and interpret formal semantics for programming languages as mathematicalaxiomatic systems.[51]Paradigms of computer scienceA number of computer scientists have argued for the distinction of three separate paradigms in computer science.Peter Wegnerargued that those paradigms are science, technology, and mathematics.[52]Peter Denning's working group argued that they are theory, abstraction (modeling), and design.[33]Amnon H. Eden described them as the "rationalist paradigm" (which treats computer science as a branch of mathematics, which is prevalent in theoretical computer science, and mainly employs deductive reasoning), the "technocratic paradigm" (which might be found in engineering approaches, most prominently in software engineering), and the "scientific paradigm" (which approaches computer-related artifacts from the empirical perspective ofnatural sciences,[53]identifiable in some branches ofartificial intelligence).[54]Computer science focuses on methods involved in design, specification, programming, verification, implementation and testing of human-made computing systems.[55]FieldsThis is adynamic listand may never be able to satisfy particular standards for completeness. You can help byadding missing itemswithreliable sources.Further information:Outline of computer scienceAs a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.[56][57]CSAB, formerly called Computing Sciences Accreditation Board—which is made up of representatives of theAssociation for Computing Machinery(ACM), and theIEEE Computer Society(IEEE CS)[58]—identifies four areas that it considers crucial to the discipline of computer science:theory of computation,algorithms and data structures,programming methodology and languages, andcomputer elements and architecture. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel computation, distributed computation, human–computer interaction, computer graphics, operating systems, and numerical andsymbolic computationas being important areas of computer science.[56]Theoretical computer scienceMain article:Theoretical computer scienceTheoretical Computer Scienceis mathematical and abstract in spirit, but it derives its motivation from practical and everyday computation. It aims to understand the nature of computation and, as a consequence of this understanding, provide more efficient methodologies.Theory of computationMain article:Theory of computationAccording toPeter Denning, the fundamental question underlying computer science is, "What can be automated?"[3]Theory of computation is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question,computability theoryexamines which computational problems are solvable on various theoreticalmodels of computation. The second question is addressed bycomputational complexity theory, which studies the time and space costs associated with different approaches to solving a multitude of computational problems.The famousP = NP?problem, one of theMillennium Prize Problems,[59]is an open problem in the theory of computation.M={X:X∉X}{\displaystyle M=\{X:X\not \in X\}}Automata theoryFormal languagesComputability theoryComputational complexity theoryModels of computationQuantum computing theoryLogic circuit theoryCellular automataInformation and coding theoryMain articles:Information theoryandCoding theoryInformation theory, closely related toprobabilityandstatistics, is related to the quantification of information. This was developed byClaude Shannonto find fundamental limits onsignal processingoperations such as compressing data and on reliably storing and communicating data.[60]Coding theory is the study of the properties ofcodes(systems for converting information from one form to another) and their fitness for a specific application. Codes are used fordata compression,cryptography,error detection and correction, and more recently also fornetwork coding. Codes are studied for the purpose of designing efficient and reliabledata transmissionmethods.[61]Coding theoryChannel capacityAlgorithmic information theorySignal detection theoryKolmogorov complexityData structures and algorithmsMain articles:Data structureandAlgorithmData structures and algorithms are the studies of commonly used computational methods and their computational efficiency.O(n2)Analysis of algorithmsAlgorithm designData structuresCombinatorial optimizationComputational geometryRandomized algorithmsProgramming language theory and formal methodsMain articles:Programming language theoryandFormal methodsProgramming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification ofprogramming languagesand their individualfeatures. It falls within the discipline of computer science, both depending on and affectingmathematics, software engineering, andlinguistics. It is an active research area, with numerous dedicated academic journals.Formal methods are a particular kind ofmathematicallybased technique for thespecification, development andverificationof software andhardwaresystems.[62]The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity andlife-critical systems, where safety orsecurityis of utmost importance. Formal methods are best described as the application of a fairly broad variety oftheoretical computer sciencefundamentals, in particularlogiccalculi,formal languages,automata theory, andprogram semantics, but alsotype systemsandalgebraic data typesto problems in software and hardware specification and verification.Γ⊢x:Int{\displaystyle \Gamma \vdash x:{\text{Int}}}Formal semanticsType theoryCompiler designProgramming languagesFormal verificationAutomated theorem provingApplied computer scienceComputer graphics and visualizationMain article:Computer graphics (computer science)Computer graphics is the study of digital visual contents and involves the synthesis and manipulation of image data. The study is connected to many other fields in computer science, includingcomputer vision,image processing, andcomputational geometry, and is heavily applied in the fields of special effects andvideo games.2D computer graphicsComputer animationRenderingMixed realityVirtual realitySolid modelingImage and sound processingMain article:Data processingInformationcan take the form of images, sound, video or other multimedia.Bitsof information can be streamed viasignals. Itsprocessingis the central notion ofinformatics, the European view oncomputing, which studies information processing algorithms independently of the type of information carrier – whether it is electrical, mechanical or biological. This field plays important role ininformation theory,telecommunications,information engineeringand has applications inmedical image computingandspeech synthesis, among others.What is the lower bound on the complexity offast Fourier transformalgorithms?is one of theunsolved problems in theoretical computer science.FFT algorithmsImage processingSpeech recognitionData compressionMedical image computingSpeech synthesisComputational science, finance and engineeringMain articles:Computational science,Computational finance, andComputational engineeringSee also:List of computer-aided engineering softwareScientific computing(orcomputational science) is the field of study concerned with constructingmathematical modelsandquantitative analysistechniques and using computers to analyze and solvescientificproblems. A major usage of scientific computing issimulationof various processes, including computationalfluid dynamics, physical, electrical, and electronic systems and circuits, as well as societies and social situations (notably war games) along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are SPICE,[63]as well as software for physical realization of new (or modified) designs. The latter includes essential design software forintegrated circuits.[64]Numerical analysisComputational physicsComputational chemistryBioinformaticsNeuroinformaticsPsychoinformaticsMedical informaticsComputational engineeringComputational musicologySocial computing and human–computer interactionMain articles:Social computingandHuman–computer interactionSocial computing is an area that is concerned with the intersection of social behavior and computational systems. Human–computer interaction research develops theories, principles, and guidelines for user interface designers.Software engineeringMain article:Software engineeringSee also:Computer programmingSoftware engineering is the study of designing, implementing, and modifying the software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software—it does not just deal with the creation or manufacture of new software, but its internal arrangement and maintenance. For examplesoftware testing,systems engineering,technical debtandsoftware development processes.Artificial intelligenceMain articles:Artificial intelligenceandBio-inspired computingArtificial intelligence (AI) aims to or is required to synthesize goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning, and communication found in humans and animals. From its origins incyberneticsand in theDartmouth Conference(1956), artificial intelligence research has been necessarily cross-disciplinary, drawing on areas of expertise such asapplied mathematics,symbolic logic,semiotics,electrical engineering,philosophy of mind,neurophysiology, andsocial intelligence. AI is associated in the popular mind withrobotic development, but the main field of practical application has been as an embedded component in areas ofsoftware development, which require computational understanding. The starting point in the late 1940s wasAlan Turing's question "Can computers think?", and the question remains effectively unanswered, although theTuring testis still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.Computational learning theoryComputer visionNeural networksPlanning and schedulingNatural language processingComputational game theoryEvolutionary computationAutonomic computingRepresentation and reasoningPattern recognitionRoboticsSwarm intelligenceComputer systemsComputer architecture and organizationMain articles:Computer architecture,Computer organization, andComputer engineeringComputer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory.[65]Computer engineers studycomputational logicand design ofcomputer hardware, from individualprocessorcomponents,microcontrollers,personal computerstosupercomputersandembedded systems. The term "architecture" in computer literature can be traced to the work of Lyle R. Johnson andFrederick P. Brooks Jr., members of the Machine Organization department in IBM's main research center in 1959.Processing unitMicroarchitectureMultiprocessingProcessor designUbiquitous computingSystems architectureOperating systemsInput/outputEmbedded systemReal-time computingDependabilityInterpreterConcurrent, parallel and distributed computingMain articles:Concurrency (computer science)andDistributed computingConcurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other.[66]A number of mathematical models have been developed for general concurrent computation includingPetri nets,process calculiand theParallel Random Access Machinemodel.[67]When multiple computers are connected in a network while using concurrency, this is known as a distributed system. Computers within that distributed system have their own private memory, and information can be exchanged to achieve common goals.[68]Computer networksMain article:Computer networkThis branch of computer science aims to manage networks between computers worldwide.Computer security and cryptographyMain articles:Computer securityandCryptographyComputer security is a branch of computer technology with the objective of protecting information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users.Historicalcryptographyis the art of writing and deciphering secret messages. Modern cryptography is the scientific study of problems relating to distributed computations that can be attacked.[69]Technologies studied in modern cryptography include symmetric and asymmetricencryption,digital signatures,cryptographic hash functions,key-agreement protocols,blockchain,zero-knowledge proofs, andgarbled circuits.Databases and data miningMain articles:DatabaseandData miningA database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, throughdatabase modelsandquery languages. Data mining is a process of discovering patterns in large data sets.DiscoveriesThe philosopher of computingBill Rapaportnoted threeGreat Insights of Computer Science:[70]Gottfried Wilhelm Leibniz's,George Boole's,Alan Turing's,Claude Shannon's, andSamuel Morse's insight: there are onlytwo objectsthat a computer has to deal with in order to represent "anything".[note 4]All the information about any computable problem can be represented using only 0 and 1 (or any other bistable pair that can flip-flop between two easily distinguishable states, such as "on/off", "magnetized/de-magnetized", "high-voltage/low-voltage", etc.).See also:Digital physicsAlan Turing's insight: there are onlyfive actionsthat a computer has to perform in order to do "anything".Every algorithm can be expressed in a language for a computer consisting of only five basic instructions:[71]move left one location;move right one location;read symbol at current location;print 0 at current location;print 1 at current location.See also:Turing machineCorrado Böhmand Giuseppe Jacopini's insight: there are onlythree ways of combiningthese actions (into more complex ones) that are needed in order for a computer to do "anything".[72]Only three rules are needed to combine any set of basic instructions into more complex ones:sequence: first do this, then do that;selection: IF such-and-such is the case, THEN do this, ELSE do that;repetition: WHILE such-and-such is the case, DO this.The three rules of Boehm's and Jacopini's insight can be further simplified with the use ofgoto(which means it is more elementary thanstructured programming).See also:Structured program theoremProgramming paradigmsMain article:Programming paradigmProgramming languages can be used to accomplish different tasks in different ways. Common programming paradigms include:Functional programming, a style of building the structure and elements of computer programs that treats computation as the evaluation of mathematical functions and avoids state and mutable data. It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements.[73]Imperative programming, a programming paradigm that uses statements that change a program's state.[74]In much the same way that the imperative mood in natural languages expresses commands, an imperative program consists of commands for the computer to perform. Imperative programming focuses on describing how a program operates.Object-oriented programming, a programming paradigm based on the concept of "objects", which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. A feature of objects is that an object's procedures can access and often modify the data fields of the object with which they are associated. Thus object-oriented computer programs are made out of objects that interact with one another.[75]Service-oriented programming, a programming paradigm that uses "services" as the unit of computer work, to design and implement integrated business applications andmission criticalsoftware programsMany languages offer support for multiple paradigms, making the distinction more a matter of style than of technical capabilities.[76]ResearchFurther information:List of computer science conferencesandCategory:Computer science journalsConferences are important events for computer science research. During these conferences, researchers from the public and private sectors present their recent work and meet. Unlike in most other academic fields, in computer science, the prestige ofconference papersis greater than that of journal publications.[77][78]One proposed explanation for this is the quick development of this relatively new field requires rapid review and distribution of results, a task better handled by conferences than by journals.[79]See alsoComputer science educationGlossary of computer scienceList of computer scientistsList of computer science awardsList of pioneers in computer scienceOutline of computer scienceNotes^In 1851^"The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be stored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbage's feeling that he had invented something really new, something much more than a sophisticated calculating machine."Bruce Collier, 1970^See the entry
"Computer science" on Wikiquote for the history of this quotation.^The word "anything" is written in quotation marks because there are things that computers cannot do. One example is: to answer the question if an arbitrary given computer program will eventually finish or run forever (theHalting problem).References^"What is Computer Science?".Department of Computer Science, University of York.Archivedfrom the original on June 11, 2020. RetrievedJune 11,2020.^abWhat Can Be Automated? Computer Science and Engineering Research Study. Computer Science Series. MIT Press. 1980.ISBN978-0262010603.Archivedfrom the original on January 9, 2021.^abcDenning, P.J.; Comer, D.E.; Gries, D.; Mulder, M.C.; Tucker, A.; Turner, A.J.; Young, P.R. (February 1989)."Computing as a discipline".Computer.22(2): 63–70.doi:10.1109/2.19833.ISSN1558-0814.Archivedfrom the original on March 3, 2022. RetrievedMarch 3,2022.The discipline of computing is the systematic study of algorithmic processes that describe and transform information, their theory, analysis, design, efficiency, implementation, and application. The fundamental question underlying all of computing is, 'What can be (efficiently) automated?'^"WordNet Search—3.1".WordNet Search. Wordnetweb.princeton.edu.Archivedfrom the original on October 18, 2017. RetrievedMay 14,2012.^"Definition of computer science | Dictionary.com".www.dictionary.com.Archivedfrom the original on June 11, 2020. RetrievedJune 11,2020.^"What is Computer Science? | Undergraduate Computer Science at UMD".undergrad.cs.umd.edu.Archivedfrom the original on November 27, 2020. RetrievedJuly 15,2022.^Harel, David (2014).Algorithmics The Spirit of Computing. Springer Berlin.ISBN978-3-642-44135-6.OCLC876384882.Archivedfrom the original on June 17, 2020. RetrievedJune 17,2020.^Patton, Richard D.; Patton, Peter C. (2009), Nof, Shimon Y. (ed.),"What Can be Automated? What Cannot be Automated?",Springer Handbook of Automation, Springer Handbooks, Berlin, Heidelberg: Springer, pp. 305–313,doi:10.1007/978-3-540-78831-7_18,ISBN978-3-540-78831-7,archivedfrom the original on January 11, 2023, retrievedMarch 3,2022^Forsythe, George (August 5–10, 1969). "Computer Science and Education".Proceedings of IFIP Congress 1968.The question 'What can be automated?' is one of the most inspiring philosophical and practical questions of contemporary civilization.^Knuth, Donald E. (August 1, 1972)."George Forsythe and the development of computer science".Communications of the ACM.15(8): 721–726.doi:10.1145/361532.361538.ISSN0001-0782.S2CID12512057.^Hanson, Vicki L. (January 23, 2017)."Celebrating 50 years of the Turing award".Communications of the ACM.60(2): 5.doi:10.1145/3033604.ISSN0001-0782.S2CID29984960.^Scott, Eric; Martins, Marcella Scoczynski Ribeiro; Yafrani, Mohamed El; Volz, Vanessa; Wilson, Dennis G (June 5, 2018)."ACM marks 50 years of the ACM A.M. turing award and computing's greatest achievements".ACM SIGEVOlution.10(3): 9–11.doi:10.1145/3231560.3231563.ISSN1931-8499.S2CID47021559.^"2021: 375th birthday of Leibniz, father of computer science".people.idsia.ch.Archivedfrom the original on September 21, 2022. RetrievedFebruary 4,2023.^"Charles Babbage Institute: Who Was Charles Babbage?".cbi.umn.edu.Archivedfrom the original on January 9, 2007. RetrievedDecember 28,2016.^"Ada Lovelace | Babbage Engine | Computer History Museum".www.computerhistory.org.Archivedfrom the original on December 25, 2018. RetrievedDecember 28,2016.^"History of Computer Science".cs.uwaterloo.ca.Archivedfrom the original on July 29, 2017. RetrievedJuly 15,2022.^"Wilhelm Schickard – Ein Computerpionier"(PDF)(in German). Archived fromthe original(PDF)on September 19, 2020. RetrievedDecember 4,2016.^Keates, Fiona (June 25, 2012)."A Brief History of Computing".The Repository. The Royal Society. Archived fromthe originalon June 29, 2012. RetrievedJanuary 19,2014.^"Science Museum, Babbage's Analytical Engine, 1834–1871 (Trial model)".Archivedfrom the original on August 30, 2019. RetrievedMay 11,2020.^abHyman, Anthony(1982).Charles Babbage: Pioneer of the Computer.Oxford University Press.ISBN978-0691083032.^"A Selection and Adaptation From Ada's Notes found in Ada, The Enchantress of Numbers," by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA". Archived fromthe originalon February 10, 2006. RetrievedMay 4,2006.^"The John Gabriel Byrne Computer Science Collection"(PDF). Archived fromthe originalon April 16, 2019. RetrievedAugust 8,2019.^Torres Quevedo, L. (1914). "Ensayos sobre Automática – Su definicion. Extension teórica de sus aplicaciones".Revista de la Academia de Ciencias Exacta, 12, pp. 391–418.^Torres Quevedo, Leonardo.Automática: Complemento de la Teoría de las Máquinas, (pdf), pp. 575-583, Revista de Obras Públicas, 19 November 1914.^Ronald T. Kneusel.Numbers and Computers,Springer, pp. 84-85, 2017.ISBN978-3319505084^Randell, Brian.Digital Computers, History of Origins, (pdf), p. 545, Digital Computers: Origins, Encyclopedia of Computer Science, January 2003.^Randell 1982, p. 6, 11–13.^"In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another",Bernard Cohen, p.44 (2000)^Brian Randell, p. 187, 1975^TheAssociation for Computing Machinery(ACM) was founded in 1947.^"IBM Archives: 1945". Ibm.com. January 23, 2003.Archivedfrom the original on January 5, 2019. RetrievedMarch 19,2019.^"IBM100 – The Origins of Computer Science". Ibm.com. September 15, 1995.Archivedfrom the original on January 5, 2019. RetrievedMarch 19,2019.^abcDenning, P.J.; Comer, D.E.; Gries, D.; Mulder, M.C.; Tucker, A.; Turner, A.J.; Young, P.R. (February 1989)."Computing as a discipline".Computer.22(2): 63–70.doi:10.1109/2.19833.ISSN1558-0814.Archivedfrom the original on March 3, 2022. RetrievedMarch 3,2022.^"Some EDSAC statistics". University of Cambridge.Archivedfrom the original on September 3, 2007. RetrievedNovember 19,2011.^"Computer science pioneer Samuel D. Conte dies at 85". Purdue Computer Science. July 1, 2002.Archivedfrom the original on October 6, 2014. RetrievedDecember 12,2014.^abTedre, Matti (2014).The Science of Computing: Shaping a Discipline. Taylor and Francis / CRC Press.^abLouis Fine (1960)."The Role of the University in Computers, Data Processing, and Related Fields".Communications of the ACM.2(9): 7–14.doi:10.1145/368424.368427.S2CID6740821.^"Stanford University Oral History". Stanford University.Archivedfrom the original on April 4, 2017. RetrievedMay 30,2013.^Donald Knuth(1972)."George Forsythe and the Development of Computer Science".Comms. ACM.ArchivedOctober 20, 2013, at theWayback Machine^Matti Tedre (2006)."The Development of Computer Science: A Sociocultural Perspective"(PDF). p. 260.Archived(PDF)from the original on October 9, 2022. RetrievedDecember 12,2014.^Peter Naur (1966)."The science of datalogy".Communications of the ACM.9(7): 485.doi:10.1145/365719.366510.S2CID47558402.^Weiss, E.A.; Corley, Henry P.T."Letters to the editor".Communications of the ACM.1(4): 6.doi:10.1145/368796.368802.S2CID5379449.^Communications of the ACM 2(1):p.4^IEEE Computer 28(12): p.136^P. Mounier-Kuhn,L'Informatique en France, de la seconde guerre mondiale au Plan Calcul. L'émergence d'une science, Paris, PUPS, 2010, ch. 3 & 4.^Groth, Dennis P. (February 2010)."Why an Informatics Degree?".Communications of the ACM. Cacm.acm.org.Archivedfrom the original on January 11, 2023. RetrievedJune 14,2016.^Tedre, M. (2011). "Computing as a Science: A Survey of Competing Viewpoints".Minds and Machines.21(3): 361–387.doi:10.1007/s11023-011-9240-4.S2CID14263916.^Parnas, D.L. (1998). "Software engineering programmes are not computer science programmes".Annals of Software Engineering.6: 19–37.doi:10.1023/A:1018949113292.S2CID35786237., p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, [...]"^Luk, R.W.P. (2020). "Insight in how computer science can be a science".Science & Philosophy.8(2): 17–47.doi:10.23756/sp.v8i2.531.^Knuth, D.E. (1974). "Computer science and its relation to mathematics".The American Mathematical Monthly.81(4): 323–343.doi:10.2307/2318994.JSTOR2318994.^abcdefg"The Philosophy of Computer Science".The Philosophy of Computer Science (Stanford Encyclopedia of Philosophy). Metaphysics Research Lab, Stanford University. 2021.Archivedfrom the original on September 16, 2021. RetrievedSeptember 16,2021.^Wegner, P. (October 13–15, 1976).Research paradigms in computer science—Proceedings of the 2nd international Conference on Software Engineering. San Francisco, California, United States: IEEE Computer Society Press, Los Alamitos, CA.^Denning, Peter J. (2007). "Computing is a natural science".Communications of the ACM.50(7): 13–18.doi:10.1145/1272516.1272529.S2CID20045303.^Eden, A.H. (2007)."Three Paradigms of Computer Science"(PDF).Minds and Machines.17(2): 135–167.CiteSeerX10.1.1.304.7763.doi:10.1007/s11023-007-9060-8.S2CID3023076. Archived fromthe original(PDF)on February 15, 2016.^Turner, Raymond; Angius, Nicola (2019)."The Philosophy of Computer Science". In Zalta, Edward N. (ed.).The Stanford Encyclopedia of Philosophy.Archivedfrom the original on October 14, 2019. RetrievedOctober 14,2019.^ab"Computer Science as a Profession". Computing Sciences Accreditation Board. May 28, 1997. Archived fromthe originalon June 17, 2008. RetrievedMay 23,2010.^Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council (2004).Computer Science: Reflections on the Field, Reflections from the Field. National Academies Press.ISBN978-0-309-09301-9.Archivedfrom the original on February 18, 2011. RetrievedAugust 31,2008.^"CSAB Leading Computer Education". CSAB. August 3, 2011.Archivedfrom the original on January 20, 2019. RetrievedNovember 19,2011.^Clay Mathematics InstituteP = NPArchivedOctober 14, 2013, at theWayback Machine^P. Collins, Graham (October 14, 2002)."Claude E. Shannon: Founder of Information Theory".Scientific American.Archivedfrom the original on January 16, 2014. RetrievedDecember 12,2014.^Van-Nam Huynh; Vladik Kreinovich; Songsak Sriboonchitta; 2012.Uncertainty Analysis in Econometrics with Applications. Springer Science & Business Media. p. 63.ISBN978-3-642-35443-4.^Phillip A. Laplante, (2010).Encyclopedia of Software EngineeringThree-Volume Set (Print). CRC Press. p. 309.ISBN978-1-351-24926-3.^Muhammad H. Rashid, (2016).SPICE for Power Electronics and Electric Power. CRC Press. p. 6.ISBN978-1-4398-6047-2.^"What is an integrated circuit (IC)? A vital component of modern electronics".WhatIs.com.Archivedfrom the original on November 15, 2021. RetrievedNovember 15,2021.^A. Thisted, Ronald (April 7, 1997)."Computer Architecture"(PDF). The University of Chicago.Archived(PDF)from the original on October 9, 2022.^Jiacun Wang, (2017).Real-Time Embedded Systems. Wiley. p. 12.ISBN978-1-119-42070-5.^Gordana Dodig-Crnkovic; Raffaela Giovagnoli, (2013).Computing Nature: Turing Centenary Perspective. Springer Science & Business Media. p. 247.ISBN978-3-642-37225-4.^Simon Elias Bibri (2018).Smart Sustainable Cities of the Future: The Untapped Potential of Big Data Analytics and Context-Aware Computing for Advancing Sustainability. Springer. p. 74.ISBN978-3-319-73981-6.^Katz, Jonathan (2008).Introduction to modern cryptography. Yehuda Lindell. Boca Raton: Chapman & Hall/CRC.ISBN978-1-58488-551-1.OCLC137325053.Archivedfrom the original on May 6, 2022. RetrievedNovember 17,2021.^Rapaport, William J. (September 20, 2013)."What Is Computation?". State University of New York at Buffalo.Archivedfrom the original on February 14, 2001. RetrievedAugust 31,2013.^B. Jack Copeland, (2012).Alan Turing's Electronic Brain: The Struggle to Build the ACE, the World's Fastest Computer. OUP Oxford. p. 107.ISBN978-0-19-960915-4.^Charles W. Herbert, (2010).An Introduction to Programming Using Alice 2.2. Cengage Learning. p. 122.ISBN0-538-47866-7.^Md. Rezaul Karim; Sridhar Alla, (2017).Scala and Spark for Big Data Analytics: Explore the concepts of functional programming, data streaming, and machine learning. Packt Publishing Ltd. p. 87.ISBN978-1-78355-050-0.^Lex Sheehan, (2017).Learning Functional Programming in Go: Change the way you approach your applications using functional programming in Go. Packt Publishing Ltd. p. 16.ISBN978-1-78728-604-7.^Evelio Padilla, (2015).Substation Automation Systems: Design and Implementation. Wiley. p. 245.ISBN978-1-118-98730-8.^"Multi-Paradigm Programming Language".MDN Web Docs.Mozilla Foundation. Archived fromthe originalon August 21, 2013.^Meyer, Bertrand (April 2009)."Viewpoint: Research evaluation for computer science".Communications of the ACM.25(4): 31–34.doi:10.1145/1498765.1498780.S2CID8625066.^Patterson, David (August 1999)."Evaluating Computer Scientists and Engineers For Promotion and Tenure". Computing Research Association.Archivedfrom the original on July 22, 2015. RetrievedJuly 19,2015.^Fortnow, Lance (August 2009)."Viewpoint: Time for Computer Science to Grow Up".Communications of the ACM.52(8): 33–35.doi:10.1145/1536616.1536631.Further readingTucker, Allen B. (2004).Computer Science Handbook(2nd ed.). Chapman and Hall/CRC.ISBN978-1-58488-360-9.Ralston, Anthony; Reilly, Edwin D.; Hemmendinger, David (2000).Encyclopedia of Computer Science(4th ed.). Grove's Dictionaries.ISBN978-1-56159-248-7.Archivedfrom the original on June 8, 2020. RetrievedFebruary 6,2011.Edwin D. Reilly (2003).Milestones in Computer Science and Information Technology. Greenwood Publishing Group.ISBN978-1-57356-521-9.Knuth, Donald E.(1996).Selected Papers on Computer Science. CSLI Publications,Cambridge University Press.Collier, Bruce (1990).The little engine that could've: The calculating machines of Charles Babbage. Garland Publishing Inc.ISBN978-0-8240-0043-1.Archivedfrom the original on January 20, 2007. RetrievedMay 4,2013.Cohen, Bernard (2000).Howard Aiken, Portrait of a computer pioneer. The MIT press.ISBN978-0-262-53179-5.Tedre, Matti (2014).The Science of Computing: Shaping a Discipline. CRC Press,Taylor & Francis.Randell, Brian(1973).The origins of Digital computers, Selected Papers. Springer-Verlag.ISBN978-3-540-06169-4.Randell, Brian(October–December 1982)."From Analytical Engine to Electronic Digital Computer: The Contributions of Ludgate, Torres, and Bush"(PDF).IEEE Annals of the History of Computing.4(4): 327–341.doi:10.1109/mahc.1982.10042.S2CID1737953. Archived fromthe original(PDF)on September 21, 2013.Peter J. Denning.Is computer science science?, Communications of the ACM, April 2005.Peter J. Denning,Great principles in computing curricula, Technical Symposium on Computer Science Education, 2004.External linksWikibooks has a book on the topic of:Informatics Practices for Class XI (CBSE)Computer scienceat Wikipedia'ssister projectsDefinitionsfrom WiktionaryMediafrom CommonsQuotationsfrom WikiquoteTextbooksfrom WikibooksResourcesfrom WikiversityLibrary resourcesaboutComputer scienceResources in your libraryResources in other librariesDBLP Computer Science BibliographyAssociation for Computing MachineryInstitute of Electrical and Electronics EngineersvteComputer scienceNote: This template roughly follows the 2012ACM Computing Classification System.HardwarePrinted circuit boardPeripheralIntegrated circuitVery Large Scale IntegrationSystems on Chip (SoCs)Energy consumption (Green computing)Electronic design automationHardware accelerationProcessorSize/FormComputer systems organizationComputer architectureComputational complexityDependabilityEmbedded systemReal-time computingNetworksNetwork architectureNetwork protocolNetwork componentsNetwork schedulerNetwork performance evaluationNetwork serviceSoftware organizationInterpreterMiddlewareVirtual machineOperating systemSoftware qualitySoftware notationsandtoolsProgramming paradigmProgramming languageCompilerDomain-specific languageModeling languageSoftware frameworkIntegrated development environmentSoftware configuration managementSoftware librarySoftware repositorySoftware developmentControl variableSoftware development processRequirements analysisSoftware designSoftware constructionSoftware deploymentSoftware engineeringSoftware maintenanceProgramming teamOpen-source modelTheory of computationModel of computationFormal languageAutomata theoryComputability theoryComputational complexity theoryLogicSemanticsAlgorithmsAlgorithm designAnalysis of algorithmsAlgorithmic efficiencyRandomized algorithmComputational geometryMathematics ofcomputingDiscrete mathematicsProbabilityStatisticsMathematical softwareInformation theoryMathematical analysisNumerical analysisTheoretical computer scienceInformation systemsDatabase management systemInformation storage systemsEnterprise information systemSocial information systemsGeographic information systemDecision support systemProcess control systemMultimedia information systemData miningDigital libraryComputing platformDigital marketingWorld Wide WebInformation retrievalSecurityCryptographyFormal methodsSecurity hackerSecurity servicesIntrusion detection systemHardware securityNetwork securityInformation securityApplication securityHuman–computer interactionInteraction designSocial computingUbiquitous computingVisualizationAccessibilityConcurrencyConcurrent computingParallel computingDistributed computingMultithreadingMultiprocessingArtificial intelligenceNatural language processingKnowledge representation and reasoningComputer visionAutomated planning and schedulingSearch methodologyControl methodPhilosophy of artificial intelligenceDistributed artificial intelligenceMachine learningSupervised learningUnsupervised learningReinforcement learningMulti-task learningCross-validationGraphicsAnimationRenderingPhotograph manipulationGraphics processing unitMixed realityVirtual realityImage compressionSolid modelingApplied computingQuantum ComputingE-commerceEnterprise softwareComputational mathematicsComputational physicsComputational chemistryComputational biologyComputational social scienceComputational engineeringDifferentiable computingComputational healthcareDigital artElectronic publishingCyberwarfareElectronic votingVideo gamesWord processingOperations researchEducational technologyDocument managementCategoryOutlineGlossariesvteGlossaries ofscienceandengineeringAerospace engineeringAgricultureArchaeologyArchitectureArtificial intelligenceAstronomyBiologyBotanyCalculusCell biologyChemistryCivil engineeringClinical researchComputer hardwareComputer scienceDevelopmental and reproductive biologyEcologyEconomicsElectrical and electronics engineeringEngineeringA–LM–ZEntomologyEnvironmental scienceGenetics and evolutionary biologyCellular and molecular biology0–LM–ZGeographyA–MN–ZArabic toponymsHebrew toponymsWestern and South AsiaGeologyIchthyologyMachine visionMathematicsMechanical engineeringMedicineMeteorologyMycologyNanotechnologyOrnithologyPhysicsProbability and statisticsPsychiatryQuantum computingRoboticsScientific namingStructural engineeringVirologyvteSoftware engineeringFieldsComputer programmingDevOpsEmpirical software engineeringExperimental software engineeringFormal methodsRequirements engineeringSearch-based software engineeringSite reliability engineeringSocial software engineeringSoftware deploymentSoftware designSoftware maintenanceSoftware testingSystems analysisConceptsAbstractionComponent-based software engineeringSoftware compatibilityBackward compatibilityCompatibility layerCompatibility modeForward compatibilitySoftware incompatibilityData modelingEnterprise architectureFunctional specificationModeling languageProgramming paradigmSoftwareSoftware archaeologySoftware architectureSoftware configuration managementSoftware development process/methodologySoftware qualitySoftware quality assuranceSoftware verification and validationSoftware systemStructured analysisEssential analysisCI/CDOrientationsAgileAspect-orientedObject orientationOntologyService orientationSDLCModelsDevelopmentalAgileEUPExecutable UMLIncremental modelIterative modelPrototype modelRADUPScrumSpiral modelV-modelWaterfall modelXPModel-driven engineeringRound-trip engineeringOtherSPICECMMIData modelER modelFunction modelInformation modelMetamodelingObject modelSystems modelView modelLanguagesIDEFUMLUSLSysMLRelated fieldsComputer scienceComputer engineeringInformation scienceProject managementRisk managementSystems engineeringCommonsCategoryAuthority control databasesNationalSpainFranceBnF dataGermanyIsraelUnited StatesCzech RepublicKoreaOtherEncyclopedia of Modern UkraineHistorical Dictionary of SwitzerlandRetrieved from "https://en.wikipedia.org/w/index.php?title=Computer_science&oldid=1243150804"Categories:Computer scienceFormal sciencesHidden categories:CS1 German-language sources (de)Webarchive template wayback linksArticles with short descriptionShort description matches WikidataWikipedia pages semi-protected against vandalismWikipedia indefinitely move-protected pagesUse American English from August 2022All Wikipedia articles written in American EnglishUse mdy dates from October 2017Pages using multiple image with auto scaled imagesDynamic listsPages using Sister project links with wikidata namespace mismatchPages using Sister project links with hidden wikidataThis page was last edited on 30 August 2024, at 20:24(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view