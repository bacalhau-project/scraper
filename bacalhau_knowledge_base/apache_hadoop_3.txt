URL: https://hadoop.apache.org/docs/current/

Wiki|git| Last Published: 2024-03-04
               | Version: 3.4.0GeneralOverviewSingle Node SetupCluster SetupCommands ReferenceFileSystem ShellCompatibility SpecificationDownstream Developer's GuideAdmin Compatibility GuideInterface ClassificationFileSystem SpecificationCommonCLI Mini ClusterFair Call QueueNative LibrariesProxy UserRack AwarenessSecure ModeService Level AuthorizationHTTP AuthenticationCredential Provider APIHadoop KMSTracingUnix Shell GuideRegistryAsync ProfilerHDFSArchitectureUser GuideCommands ReferenceNameNode HA With QJMNameNode HA With NFSObserver NameNodeFederationViewFsViewFsOverloadSchemeSnapshotsEdits ViewerImage ViewerPermissions and HDFSQuotas and HDFSlibhdfs (C API)WebHDFS (REST API)HttpFSShort Circuit Local ReadsCentralized Cache ManagementNFS GatewayRolling UpgradeExtended AttributesTransparent EncryptionMultihomingStorage PoliciesMemory Storage SupportSynthetic Load GeneratorErasure CodingDisk BalancerUpgrade DomainDataNode AdminRouter FederationProvided StorageMapReduceTutorialCommands ReferenceCompatibility with 1.xEncrypted ShufflePluggable Shuffle/SortDistributed Cache DeploySupport for YARN Shared CacheMapReduce REST APIsMR Application MasterMR History ServerYARNArchitectureCommands ReferenceCapacity SchedulerFair SchedulerResourceManager RestartResourceManager HAResource ModelNode LabelsNode AttributesWeb Application ProxyTimeline ServerTimeline Service V.2Writing YARN ApplicationsYARN Application SecurityNodeManagerRunning Applications in Docker ContainersRunning Applications in runC ContainersUsing CGroupsSecure ContainersReservation SystemGraceful DecommissionOpportunistic ContainersYARN FederationShared CacheUsing GPUUsing FPGAPlacement ConstraintsYARN UI2YARN REST APIsIntroductionResource ManagerNode ManagerTimeline ServerTimeline Service V.2YARN ServiceOverviewQuickStartConceptsYarn Service APIService DiscoverySystem ServicesHadoop Compatible File SystemsAliyun OSSAmazon S3Azure Blob StorageAzure Data Lake StorageTencent COSHuaweicloud OBSAuthOverviewExamplesConfigurationBuildingToolsHadoop StreamingHadoop ArchivesHadoop Archive LogsDistCpHDFS Federation BalanceGridMixRumenResource Estimator ServiceScheduler Load SimulatorHadoop BenchmarkingDynamometerReferenceChangelog and Release NotesJava API docsUnix Shell APIMetricsConfigurationcore-default.xmlhdfs-default.xmlhdfs-rbf-default.xmlmapred-default.xmlyarn-default.xmlkms-default.xmlhttpfs-default.xmlDeprecated PropertiesApache Hadoop 3.4.0Apache Hadoop 3.4.0 is an update to the Hadoop 3.4.x release branch.Overview of ChangesUsers are encouraged to read the full set of release notes. This page provides an overview of the major changes.S3A: Upgrade AWS SDK to V2HADOOP-18073S3A: Upgrade AWS SDK to V2This release upgrade Hadoop’s AWS connector S3A from AWS SDK for Java V1 to AWS SDK for Java V2. This is a significant change which offers a number of new features including the ability to work with Amazon S3 Express One Zone Storage - the new high performance, single AZ storage class.HDFS DataNode Split one FsDatasetImpl lock to volume grain locksHDFS-15382Split one FsDatasetImpl lock to volume grain locks.Throughput is one of the core performance evaluation for DataNode instance. However, it does not reach the best performance especially for Federation deploy all the time although there are different improvement, because of the global coarse-grain lock. These series issues (includeHDFS-16534,HDFS-16511,HDFS-15382andHDFS-16429.) try to split the global coarse-grain lock to fine-grain lock which is double level lock for blockpool and volume, to improve the throughput and avoid lock impacts between blockpools and volumes.YARN Federation improvementsYARN-5597YARN Federation improvements.We have enhanced the YARN Federation functionality for improved usability. The enhanced features are as follows: 1. YARN Router now boasts a full implementation of all interfaces including the ApplicationClientProtocol, ResourceManagerAdministrationProtocol, and RMWebServiceProtocol. 2. YARN Router support for application cleanup and automatic offline mechanisms for subCluster. 3. Code improvements were undertaken for the Router and AMRMProxy, along with enhancements to previously pending functionalities. 4. Audit logs and Metrics for Router received upgrades. 5. A boost in cluster security features was achieved, with the inclusion of Kerberos support. 6. The page function of the router has been enhanced. 7. A set of commands has been added to the Router side for operating on SubClusters and Policies.YARN Capacity Scheduler improvementsYARN-10496Support Flexible Auto Queue Creation in Capacity SchedulerCapacity Scheduler resource distribution mode was extended with a new allocation mode called weight mode. Defining queue capacities with weights allows the users to use the newly added flexible queue auto creation mode. Flexible mode now supports the dynamic creation of bothparent queuesandleaf queues, enabling the creation of complex queue hierarchies application submission time.YARN-10888New capacity modes for Capacity SchedulerCapacity Scheduler’s resource distribution was completely refactored to be more flexible and extensible. There is a new concept called Capacity Vectors, which allows the users to mix various resource types in the hierarchy, and also in a single queue. With this optionally enabled feature it is now possible to define different resources with different units, like memory with GBs, vcores with percentage values, and GPUs/FPGAs with weights, all in the same queue.YARN-10889Queue Creation in Capacity Scheduler - Various improvementsIn addition to the two new features above, there were a number of commits for improvements and bug fixes in Capacity Scheduler.HDFS RBF: Code Enhancements, New Features, and Bug FixesThe HDFS RBF functionality has undergone significant enhancements, encompassing over 200 commits for feature improvements, new functionalities, and bug fixes. Important features and improvements are as follows:FeatureHDFS-15294HDFS Federation balance tool introduces one tool to balance data across different namespace.HDFS-13522,HDFS-16767Support observer node from Router-Based Federation.ImprovementHADOOP-13144,HDFS-13274,HDFS-15757These tickets have enhanced IPC throughput between Router and NameNode via multiple connections per user, and optimized connection management.HDFS-14090RBF: Improved isolation for downstream name nodes. {Static}Router supports assignment of the dedicated number of RPC handlers to achieve isolation for all downstream nameservices it is configured to proxy. Since large or busy clusters may have relatively higher RPC traffic to the namenode compared to other clusters namenodes, this feature if enabled allows admins to configure higher number of RPC handlers for busy clusters.HDFS-17128RBF: SQLDelegationTokenSecretManager should use version of tokens updated by other routers.The SQLDelegationTokenSecretManager enhances performance by maintaining processed tokens in memory. However, there is a potential issue of router cache inconsistency due to token loading and renewal. This issue has been addressed by the resolution of HDFS-17128.HDFS-17148RBF: SQLDelegationTokenSecretManager must cleanup expired tokens in SQL.SQLDelegationTokenSecretManager, while fetching and temporarily storing tokens from SQL in a memory cache with a short TTL, faces an issue where expired tokens are not efficiently cleaned up, leading to a buildup of expired tokens in the SQL database. This issue has been addressed by the resolution of HDFS-17148.OthersOther changes to HDFS RBF include WebUI, command line, and other improvements. Please refer to the release document.HDFS EC: Code Enhancements and Bug FixesHDFS EC has made code improvements and fixed some bugs.Important improvements and bugs are as follows:ImprovementHDFS-16613EC: Improve performance of decommissioning dn with many ec blocks.In a hdfs cluster with a lot of EC blocks, decommission a dn is very slow. The reason is unlike replication blocks can be replicated from any dn which has the same block replication, the ec block have to be replicated from the decommissioning dn. The configurationsdfs.namenode.replication.max-streamsanddfs.namenode.replication.max-streams-hard-limitwill limit the replication speed, but increase these configurations will create risk to the whole cluster’s network. So it should add a new configuration to limit the decommissioning dn, distinguished from the cluster wide max-streams limit.HDFS-16663EC: Allow block reconstruction pending timeout refreshable to increase decommission performance.InHDFS-16613, increase the value ofdfs.namenode.replication.max-streams-hard-limitwould maximize the IO performance of the decommissioning DN, which has a lot of EC blocks. Besides this, we also need to decrease the value ofdfs.namenode.reconstruction.pending.timeout-sec, default is 5 minutes, to shorten the interval time for checking pendingReconstructions. Or the decommissioning node would be idle to wait for copy tasks in most of this 5 minutes. In decommission progress, we may need to reconfigure these 2 parameters several times. InHDFS-14560, thedfs.namenode.replication.max-streams-hard-limitcan already be reconfigured dynamically without namenode restart. And thedfs.namenode.reconstruction.pending.timeout-secparameter also need to be reconfigured dynamically.BugHDFS-16456EC: Decommission a rack with only on dn will fail when the rack number is equal with replication.In below scenario, decommission will fail byTOO_MANY_NODES_ON_RACKreason: - Enable EC policy, such as RS-6-3-1024k. - The rack number in this cluster is equal with or less than the replication number(9) - A rack only has one DN, and decommission this DN. This issue has been addressed by the resolution of HDFS-16456.HDFS-17094EC: Fix bug in block recovery when there are stale datanodes. During block recovery, theRecoveryTaskStripedin the datanode expects a one-to-one correspondence betweenrBlock.getLocations()andrBlock.getBlockIndices(). However, if there are stale locations during a NameNode heartbeat, this correspondence may be disrupted. Specifically, although there are no stale locations inrecoveryLocations, the block indices array remains complete. This discrepancy causesBlockRecoveryWorker.RecoveryTaskStriped#recoverto generate an incorrect internal block ID, leading to a failure in the recovery process as the corresponding datanode cannot locate the replica. This issue has been addressed by the resolution of HDFS-17094.HDFS-17284. EC: Fix int overflow in calculating numEcReplicatedTasks and numReplicationTasks during block recovery. Due to an integer overflow in the calculation of numReplicationTasks or numEcReplicatedTasks, the NameNode’s configuration parameterdfs.namenode.replication.max-streams-hard-limitfailed to take effect. This led to an excessive number of tasks being sent to the DataNodes, consequently occupying too much of their memory.This issue has been addressed by the resolution of HDFS-17284.OthersOther improvements and fixes for HDFS EC, Please refer to the release document.Transitive CVE fixesA lot of dependencies have been upgraded to address recent CVEs. Many of the CVEs were not actually exploitable through the Hadoop so much of this work is just due diligence. However, applications which have all the library is on a class path may be vulnerable, and the upgrades should also reduce the number of false positives security scanners report.We have not been able to upgrade every single dependency to the latest version there is. Some of those changes are fundamentally incompatible. If you have concerns about the state of a specific library, consult the Apache JIRA issue tracker to see if an issue has been filed, discussions have taken place about the library in question, and whether or not there is already a fix in the pipeline.Please don’t file new JIRAs about dependency-X.Y.Z having a CVE without searching for any existing issue firstAs an open-source project, contributions in this area are always welcome, especially in testing the active branches, testing applications downstream of those branches and of whether updated dependencies trigger regressions.Security AdvisoryHadoop HDFS is a distributed filesystem allowing remote callers to read and write data.Hadoop YARN is a distributed job submission/execution engine allowing remote callers to submit arbitrary work into the cluster.Unless a Hadoop cluster is deployed withcaller authentication with Kerberos, anyone with network access to the servers has unrestricted access to the data and the ability to run whatever code they want in the system.In production, there are generally three deployment patterns which can, with care, keep data and computing resources private. 1. Physical cluster:configure Hadoop security, usually bonded to the enterprise Kerberos/Active Directory systems. Good. 2. Cloud: transient or persistent single or multiple user/tenant cluster with private VLANand security. Good. ConsiderApache Knoxfor managing remote access to the cluster. 3. Cloud: transient single user/tenant cluster with private VLANand no security at all. Requires careful network configuration as this is the sole means of securing the cluster.. ConsiderApache Knoxfor managing remote access to the cluster.If you deploy a Hadoop cluster in-cloud without security, and without configuring a VLAN to restrict access to trusted users, you are implicitly sharing your data and computing resources with anyone with network accessIf you do deploy an insecure cluster this way then port scanners will inevitably find it and submit crypto-mining jobs. If this happens to you, please do not report this as a CVE or security issue: it isutterly predictable. Secureyour clusterif you want to remain exclusivelyyour cluster.Finally, if you are using Hadoop as a service deployed/managed by someone else, do determine what security their products offer and make sure it meets your requirements.Protobuf CompatibilityIn HADOOP-18197, we upgraded the Protobuf in hadoop-thirdparty to version 3.21.12. This version may have compatibility issues with certain versions of JDK8, and you may encounter some errors (please refer to the discussion in HADOOP-18197 for specific details).To address this issue, we recommend upgrading the JDK version in your production environment to a higher version (> JDK8). We will resolve this issue by upgrading hadoop-thirdparty’s Protobuf to a higher version in a future release of 3.4.x. Please note that we will discontinue support for JDK8 in future releases of 3.4.x.Getting StartedThe Hadoop documentation includes the information you need to get started using Hadoop. Begin with theSingle Node Setupwhich shows you how to set up a single-node Hadoop installation. Then move on to theCluster Setupto learn how to set up a multi-node Hadoop installation.Before deploying Hadoop in production, readHadoop in Secure Mode, and follow its instructions to secure your cluster.©            2008-2024
              Apache Software Foundation
            
                          -Privacy Policy.
        Apache Maven, Maven, Apache, the Apache feather logo, and the Apache Maven project logos are trademarks of The Apache Software Foundation.