URL: https://docs.bacalhau.org/examples/model-training/training-pytorch-model-with-bacalhau

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookTraining Pytorch Model with BacalhauIntroductionIn this example tutorial, we will show you how to train a PyTorch RNN MNIST neural network model with Bacalhau. PyTorch is a framework developed by Facebook AI Research for deep learning, featuring both beginner-friendly debugging tools and a high level of customization for advanced users, with researchers and practitioners using it across companies like Facebook and Tesla. Applications include computer vision, natural language processing, cryptography, and more.TL;DR​Copybacalhaudockerrun\--gpu1\--timeout3600\--wait-timeout-secs3600\--wait\--id-only\pytorch/pytorch\-w/outputs\-iipfs://QmdeQjz1HQQdT9wT2NHX86Le9X6X6ySGxp8dfRUKPtgziw:/data\-ihttps://raw.githubusercontent.com/pytorch/examples/main/mnist_rnn/main.py\--python../inputs/main.py--save-modelPrerequisite​To get started, you need to install the Bacalhau client, see more informationhereTraining the Model Locally​To train our model locally, we will start by cloning the Pytorch examplesrepo:Copygitclonehttps://github.com/pytorch/examplesInstall the following:Copypipinstall--upgradetorchtorchvisionNext, we run the command below to begin the training of themnist_rnnmodel. We added the--save-modelflag to save the modelCopypython./examples/mnist_rnn/main.py--save-modelNext, the downloaded MNIST dataset is saved in thedatafolder.Uploading Dataset to IPFS​Now that we have downloaded our dataset, the next step is to upload it to IPFS. The simplest way to upload the data to IPFS is to use a third-party service to "pin" data to the IPFS network, to ensure that the data exists and is available. To do this you need an account with a pinning service likePinataorNFT.Storage. Once registered you can use their UI or API or SDKs to upload files.Once you have uploaded your data, you'll be finished copying the CID.Hereis the dataset we have uploaded.Running a Bacalhau Job​After the repo image has been pushed to Docker Hub, we can now use the container for running on Bacalhau. To submit a job, run the following Bacalhau command:CopyexportJOB_ID=$(bacalhaudockerrun\--gpu1\--timeout3600\--wait-timeout-secs3600\--wait\--id-only\pytorch/pytorch\-w/outputs\-iipfs://QmdeQjz1HQQdT9wT2NHX86Le9X6X6ySGxp8dfRUKPtgziw:/data\-ihttps://raw.githubusercontent.com/pytorch/examples/main/mnist_rnn/main.py\--python../inputs/main.py--save-model)Structure of the command​export JOB_ID=$( ... )exports the job ID as environment variablebacalhau docker run: call to bacalhauThe--gpu 1flag is set to specify hardware requirements, a GPU is needed to run such a jobpytorch/pytorch: Using the official pytorch Docker imageThe-i ipfs://QmdeQjz1HQQd.....: flag is used to mount the uploaded datasetThe-i https://raw.githubusercontent.com/py..........: flag is used to mount our training script. We will use the URL to thisPytorch example-w /outputs:Our working directory is /outputs. This is the folder where we will save the model as it will automatically get uploaded to IPFS as outputspython ../inputs/main.py --save-model: URL script gets mounted to the/inputsfolder in the containerWhen a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on.Declarative job description​The same job can be presented in thedeclarativeformat. In this case, the description will look like this:Copyname:Stable Diffusion Dreambooth Finetuningtype:batchcount:1tasks:-name:My main taskEngine:type:dockerparams:Image:"pytorch/pytorch"Entrypoint:-/bin/bashParameters:--c-python ../inputs/main.py --save-modelInputSources:-Source:Type:"ipfs"Params:CID:"QmdeQjz1HQQdT9wT2NHX86Le9X6X6ySGxp8dfRUKPtgziw"Target:/data-Source:Type:urlDownloadParams:URL:https://raw.githubusercontent.com/pytorch/examples/main/mnist_rnn/main.pyTarget:/inputsResources:GPU:"1"The job description should be saved in.yamlformat, e.g.torch.yaml, and then run with the command:Copybacalhaujobruntorch.yamlChecking the State of your Jobs​Job status​You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysCompleted, that means the job is done, and we can get the results.Job information​You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download​You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presultsbacalhaujobget$JOB_ID--output-dirresultsAfter the download has finished you should see the following contents in results directoryViewing your Job Output​Now you can find results in theresults/outputsfolder. To view them, run the following command:Copylsresults/# list the contents of the current directoryCopycatresults/stdout# displays the contents of the file given to it as a parameter.Copylsresults/outputs/# list the successfully trained modelPreviousModel TrainingNextTraining Tensorflow ModelLast updated1 month agoOn this pageIntroductionTL;DR​Prerequisite​Training the Model Locally​Uploading Dataset to IPFS​Running a Bacalhau Job​Structure of the command​Declarative job description​Checking the State of your Jobs​Job status​Job information​Job download​Viewing your Job Output​Was this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.