Source: bacalhau_docs
URL: https://docs.bacalhau.org/setting-up/workload-onboarding/container/index

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+â€†KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookBacalhau Docker ImageHow to use the Bacalhau Docker imageThis documentation explains how to use the Bacalhau Docker image to run tasks and manage them using the Bacalhau client.PrerequisitesTo get started, you need to install the Bacalhau client (see more informationhere) and Docker.1. Pull the Bacalhau Docker imageThe first step is to pull the Bacalhau Docker image from theGithub container registry.Copydocker pull ghcr.io/bacalhau-project/bacalhau:latestExpected output:Copylatest:Pullingfrombacalhau-project/bacalhaud14ccdd25413:Pullcomplete621f190d05c8:PullcompleteDigest:sha256:3cda5619984de9b56c738c50f94188684170f54f7e417f8dcbe74ff8ec8eb434Status:Downloadednewerimageforghcr.io/bacalhau-project/bacalhau:latestghcr.io/bacalhau-project/bacalhau:latestYou can also pull a specific version of the image, e.g.:Copydockerpullghcr.io/bacalhau-project/bacalhau:v0.3.16Remember that the "latest" tag is just a string. It doesn't refer to the latest version of the Bacalhau client, it refers to an image that has the "latest" tag. Therefore, if your machine has already downloaded the "latest" image, it won't download it again. To force a download, you can use the--no-cacheflag.2. Check versionTo check the version of the Bacalhau client, run:Copydockerrun-tghcr.io/bacalhau-project/bacalhau:latestversionExpected Output:Copy13:38:54.518|INFpkg/repo/fs.go:81>Initializingrepoat'/root/.bacalhau'forenvironment'production'CLIENTSERVERUPDATEMESSAGEv1.2.0v1.2.03. Running a Bacalhau JobIn the example below, an Ubuntu-based job runs to print the message 'Hello from Docker Bacalhau':Copydockerrun-tghcr.io/bacalhau-project/bacalhau:latest\dockerrun\--id-only\--wait\ubuntu:latest\--sh-c'uname -a && echo "Hello from Docker Bacalhau!"'Structure of the commandghcr.io/bacalhau-project/bacalhau:latest: Name of the Bacalhau Docker image--id-only: Output only the job id--wait: Wait for the job to finishubuntu:latest.Ubuntu container--: Separate Bacalhau parameters from the command to be executed inside the containersh -c 'uname -a && echo "Hello from Docker Bacalhau!"': The command executed inside the containerLet's have a look at the command execution in the terminal:Copy13:53:46.478|INFpkg/repo/fs.go:81>Initializingrepoat'/root/.bacalhau'forenvironment'production'ab95a5cc-e6b7-40f1-957d-596b02251a66The output you're seeing is in two parts:The first line:13:53:46.478 | INF pkg/repo/fs.go:81 > Initializing repo at '/root/.bacalhau' for environment 'production'is an informational message indicating the initialization of a repository at the specified directory('/root/.bacalhau')for theproductionenvironment.The second line:ab95a5cc-e6b7-40f1-957d-596b02251a66is ajob ID, which represents the result of executing a command inside a Docker container. It can be used to obtain additional information about the executed job or to access the job's results. We store that in an environment variable so that we can reuse it later on (env:JOB_ID=ab95a5cc-e6b7-40f1-957d-596b02251a66)To print out thecontent of the Job ID, run the following command:Copydocker run -t ghcr.io/bacalhau-project/bacalhau:latest \describe ab95a5cc-e6b7-40f1-957d-596b02251a66 \| grep -A 2 "stdout: |"Expected Output:Copystdout:|Linux fff680719453 6.2.0-1019-gcp #21~22.04.1-Ubuntu SMP Thu Nov 16 18:18:34 UTC 2023 x86_64 x86_64 x86_64 GNU/LinuxHellofromDockerBacalhau!4. Submit a Job With Output FilesOne inconvenience that you'll see is that you'll need to mount directories into the container to access files. This is because the container is running in a separate environment from your host machine. Let's take a look at the example below:The first part of the example should look familiar, except for the Docker commands.Copydockerrun-tghcr.io/bacalhau-project/bacalhau:latest\dockerrun\--id-only\--wait\--gpu1\ghcr.io/bacalhau-project/examples/stable-diffusion-gpu:0.0.1--\python main.py --o ./outputs --p "A Docker whale and a cod having a conversation about the state of the ocean"When a job is submitted, Bacalhau prints out the relatedjob_id(a46a9aa9-63ef-486a-a2f8-6457d7bafd2e):Copy09:05:58.434|INFpkg/repo/fs.go:81>Initializingrepoat'/root/.bacalhau'forenvironment'production'a46a9aa9-63ef-486a-a2f8-6457d7bafd2e5. Checking the State of your JobsJob status: You can check the status of the job usingbacalhau job list.Copydockerrun-tghcr.io/bacalhau-project/bacalhau:latest\list$JOB_ID \When it saysCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe.Copydockerrun-tghcr.io/bacalhau-project/bacalhau:latest\describe$JOB_ID \Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in theresultdirectory.Copybacalhaujobget${JOB_ID}--output-dirresultAfter the download has finished, you should see the following contents in the results directory.SupportIf have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousWebAssembly (Wasm) WorkloadsNextHow To Work With Custom Containers in BacalhauLast updated2 months agoOn this pagePrerequisites1. Pull the Bacalhau Docker image2. Check version3. Running a Bacalhau JobStructure of the command4. Submit a Job With Output Files5. Checking the State of your JobsSupportWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.png