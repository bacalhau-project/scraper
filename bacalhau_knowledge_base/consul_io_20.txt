URL: https://www.consul.io/docs/security/acl

HashiDaysOne conference. Three cities.Find a city near youDismiss alertHashiCorp DeveloperHashiCorp Cloud PlatformTerraformPackerConsulVaultBoundaryNomadWaypointVagrantConsulInstallTutorialsDocumentationAPICLITry Cloud(opens in new tab)SearchCommand or control keyK keySign inSign upThemeConsul HomeDocumentationDocumentationWhat is Consul?Why Choose Consul?Core ConceptsGet StartedArchitectureRelease NotesUpgradeServicesService MeshDynamic App ConfigurationSecurityOverviewAccess Control (ACLs)ACL System OverviewTokensPoliciesRolesRules ReferenceACLs in Federated DatacentersAuth MethodsEncryptionSecurity ModelsAgentIntegrationsTroubleshootKubernetesNomadAWS ECSAWS LambdaHCP Consul DedicatedConsul EnterpriseNetwork Infrastructure AutomationResourcesTutorial LibraryCertificationsCommunity Forum(opens in new tab)Support(opens in new tab)GitHub(opens in new tab)DeveloperConsulDocumentationSecurityAccess Control (ACLs)v1.19.x (latest)Consulv1.18.xv1.17.xv1.16.xv1.15.xv1.14.xv1.13.xv1.12.xv1.11.xv1.10.xv1.9.xv1.8.xAccess Control List (ACL) overviewThis topic describes core concepts associated with the optional access control list (ACL) system shipped with Consul. ACLs authenticate requests and authorize access to resources. They also control access to the Consul UI, API, and CLI, as well as secure service-to-service and agent-to-agent communication.Refer to theACL API referenceandACL CLI referencefor additional usage information.Workflow overviewImplementations may vary depending on the needs of the organization, but the following procedure describes the basic workflow for creating and implementing ACLs:The person responsible for administrating ACLs in your organization specifies one or more authentication rules to define apolicy.The ACL administrator uses the Consul API to generate and link atokento one or more policies. The following diagram illustrates the relationship between rules, policies, and tokens:The ACL administrator can create and link additional artifacts to tokens, such astemplated policies,service identities,node identities, androlesthat enable policies to accommodate more complex requirements.Tokens are distributed to end users and incorporated into their services.Agents and services present the token when making requests.Consul evaluates the token to determine if the request has permission to interact with the requested resource.TokensACL tokens are the core method of authentication in Consul. Tokens contain several attributes, but the value of theSecretIDfield (sometimes referred to as the ACL token) is the attribute that you or your service must include to identify the person or system making the request. Your ACL administrator may also use the token'sAccessorIDfor audit logging purposes.Refer to the following topics for details about tokens:TokensACL token command lineACL tokens APIPoliciesAn ACL policy is a set of rules that grant or deny access to resources in the network.
The person responsible for administrating ACLs in your organization will assemble and create policies and link them to tokens.
Tokens are the artifacts distributed to users so that they can be implemented.
In addition to the rules that authenticate access to services, several attributes may be assigned policies that determine their scope.Refer to the following topics for details about policies:PoliciesACL policy command lineACL policy APIRolesA role is a collection of policies that your ACL administrator can link to a token.
They enable you to reuse policies by decoupling the policies from the token distributed to team members.
Instead, the token is linked to the role, which is able to hold several policies that can be updated asynchronously without distributing new tokens to users.
As a result, roles can provide a more convenient authentication infrastructure than creating unique policies and tokens for each requester.Refer to theRolestopic for additional information.Templated policiesTemplated policies are configuration blocks that you can add to token and role configurations. Consul uses them to generate a policy. Consul links the generated policy to the role or token, which provides the required access to a particular resource.You can use them during the authorization process to automatically generate a policy for common use-cases, rather than creating multiple identical policies or digging through the permission system to understand permissions.Refer to the following topics for more details about policies:API documentation for templated policiesAPI documentation for rolesAPI documentation for tokensService identitiesService identities are configuration blocks that you can add to role configurations or specify when linking tokens to policies. You can use them during the authorization process to automatically generate a policy for specific services. The policy is linked to the role or token, allowing the services to be discovered and to discover other healthy service instances in a service mesh.Service identities enable you to quickly construct policies for services, rather than creating identical policies for each service.Refer to the following topics for additional information about service identities:Service IdentitiesAPI documentation for rolesNode identitiesNode identities are configuration blocks that you can add to role configurations or specify when linking tokens to policies. You can use them during the authorization process to automatically generate a policy for specific nodes. When you configure the agent, you can specify the token linked to the policy withacl_tokens_agent.Use node identities to quickly construct policies for multiple nodes, rather than creating identical polices for each individual node.Refer to the following topics for additional information about node identities:Node IdentitiesAPI documentation for rolesEdit this page on GitHubOn this page:Access Control List (ACL) overviewWorkflow overviewTokensPoliciesRolesTemplated policiesService identitiesNode identitiesThemeCertificationsSystem StatusCookie ManagerTerms of UseSecurityPrivacyTrademark PolicyTrade ControlsAccessibilityGive Feedback(opens in new tab)