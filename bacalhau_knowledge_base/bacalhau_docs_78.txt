URL: https://docs.bacalhau.org/examples/model-training/training-tensorflow-model

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookTraining Tensorflow ModelIntroductionTensorFlowis an open-source machine learning software library, TensorFlow is used to train neural networks. Expressed in the form of stateful dataflow graphs, each node in the graph represents the operations performed by neural networks on multi-dimensional arrays. These multi-dimensional arrays are commonly known as “tensors”, hence the name TensorFlow. In this example, we will be training a MNIST model.Training TensorFlow models Locally​This section is fromTensorFlow 2 quickstart for beginnersTensorFlow 2 quickstart for beginners​This short introduction usesKerasto:Load a prebuilt dataset.Build a neural network machine learning model that classifies images.Train this neural network.Evaluate the accuracy of the model.Set up TensorFlow​Import TensorFlow into your program to check whether it is installedCopyimporttensorflowastfimportosprint("TensorFlow version:", tf.__version__)Copymkdir/inputswgethttps://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz-O/inputs/mnist.npzCopymnist=tf.keras.datasets.mnistCWD=''ifos.getcwd()=='/'elseos.getcwd()(x_train,y_train),(x_test,y_test) = mnist.load_data('/inputs/mnist.npz')x_train,x_test=x_train/255.0,x_test/255.0Build a machine-learning model​Build atf.keras.Sequentialmodel by stacking layers.Copymodel=tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape=(28,28)),tf.keras.layers.Dense(128, activation='relu'),tf.keras.layers.Dropout(0.2),tf.keras.layers.Dense(10)])For each example, the model returns a vector oflogitsorlog-oddsscores, one for each class.Copypredictions=model(x_train[:1]).numpy()predictionsThetf.nn.softmaxfunction converts these logits toprobabilitiesfor each class:Copytf.nn.softmax(predictions).numpy()Note: It is possible to bake thetf.nn.softmaxfunction into the activation function for the last layer of the network. While this can make the model output more directly interpretable, this approach is discouraged as it's impossible to provide an exact and numerically stable loss calculation for all models when using a softmax output.Define a loss function for training usinglosses.SparseCategoricalCrossentropy, which takes a vector of logits and aTrueindex and returns a scalar loss for each example.Copyloss_fn=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)This loss is equal to the negative log probability of the true class: The loss is zero if the model is sure of the correct class.This untrained model gives probabilities close to random (1/10 for each class), so the initial loss should be close to-tf.math.log(1/10) ~= 2.3.Copyloss_fn(y_train[:1], predictions).numpy()Before you start training, configure and compile the model using KerasModel.compile. Set theoptimizerclass toadam, set thelossto theloss_fnfunction you defined earlier, and specify a metric to be evaluated for the model by setting themetricsparameter toaccuracy.Copymodel.compile(optimizer='adam',loss=loss_fn,metrics=['accuracy'])Train and evaluate your model​Use theModel.fitmethod to adjust your model parameters and minimize the loss:Copymodel.fit(x_train, y_train, epochs=5)TheModel.evaluatemethod checks the models performance, usually on a "Validation-set" or "Test-set".Copymodel.evaluate(x_test,  y_test, verbose=2)The image classifier is now trained to ~98% accuracy on this dataset. To learn more, read theTensorFlow tutorials.If you want your model to return a probability, you can wrap the trained model, and attach the softmax to it:Copyprobability_model=tf.keras.Sequential([model,tf.keras.layers.Softmax()])Copyprobability_model(x_test[:5])Copymkdir/outputsThe following method can be used to save the model as a checkpointCopymodel.save_weights('/outputs/checkpoints/my_checkpoint')Copyls/outputs/Running on Bacalhau​The dataset and the script are mounted to the TensorFlow container using an URL, we then run the script inside the containerDeclarative job description​The same job can be presented in thedeclarativeformat. In this case, the description will look like this:Copyname:Training ML model using tensorflowtype:batchcount:1tasks:-name:My main taskEngine:type:dockerparams:WorkingDirectory:"/inputs"Image:"tensorflow/tensorflow"Entrypoint:-/bin/bashParameters:--c-python train.pyInputSources:-Source:Type:urlDownloadParams:URL:https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npzTarget:/inputs-Source:Type:urlDownloadParams:URL: https://gist.githubusercontent.com/js-ts/e7d32c7d19ffde7811c683d4fcb1a219/raw/ff44ac5b157d231f464f4d43ce0e05bccb4c1d7b/train.pyTarget:/inputsResources:GPU:"1"The job description should be saved in.yamlformat, e.g.tensorflow.yaml, and then run with the command:Copybacalhaujobruntensorflow.yamlChecking the State of your Jobs​Job status​You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysCompleted, that means the job is done, and we can get the results.Job information​You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download​You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presultsbacalhaujobget$JOB_ID--output-dirresultsAfter the download has finished you should see the following contents in results directoryViewing your Job Output​Now you can find the file in theresults/outputsfolder. To view it, run the following command:Copycatresults/outputs/Support​If you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousTraining Pytorch Model with BacalhauNextStable Diffusion Dreambooth (Finetuning)Last updated1 month agoOn this pageIntroductionTraining TensorFlow models Locally​TensorFlow 2 quickstart for beginners​Set up TensorFlow​Build a machine-learning model​Train and evaluate your model​Running on Bacalhau​Declarative job description​Checking the State of your Jobs​Job status​Job information​Job download​Viewing your Job Output​Support​Was this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.