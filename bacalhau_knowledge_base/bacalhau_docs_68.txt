URL: https://docs.bacalhau.org/examples/model-inference/running-inference-on-dolly-2.0-model-with-hugging-face

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookRunning Inference on Dolly 2.0 Model with Hugging FaceIntroduction​Dolly 2.0, the groundbreaking, open-source, instruction-following Large Language Model (LLM) that has been fine-tuned on a human-generated instruction dataset, licensed for both research and commercial purposes. Developed using the EleutherAI Pythia model family, this 12-billion-parameter language model is built exclusively on a high-quality, human-generated instruction following dataset, contributed by Databricks employees.Dolly 2.0 package is open source, including the training code, dataset, and model weights, all available for commercial use. This unprecedented move empowers organizations to create, own, and customize robust LLMs capable of engaging in human-like interactions, without the need for API access fees or sharing data with third parties.Running locally​Prerequisites​A NVIDIA GPUPythonInstalling dependencies​Copypip-qinstallgit+https://github.com/huggingface/transformers# need to install from githubpip-q--upgradeinstallaccelerate# ensure you are using version higher than 0.12.0Create aninference.pyfile with following code:Copy# content of the inference.py fileimportargparseimporttorchfromtransformersimportpipelinedefmain(prompt_string,model_version):# use dolly-v2-12b if you're using Colab Pro+, using pythia-2.8b for Free Colabgenerate_text=pipeline(model=model_version,torch_dtype=torch.bfloat16,trust_remote_code=True,device_map="auto")print(generate_text(prompt_string))if__name__=="__main__":parser=argparse.ArgumentParser()parser.add_argument("--prompt", type=str, required=True, help="The prompt to be used in the GPT model")parser.add_argument("--model_version", type=str, default="./databricks/dolly-v2-12b", help="The model version to be used")args=parser.parse_args()main(args.prompt, args.model_version)Building the container (optional)​You may want to create your own container for this kind of task. In that case, use the instructions forcreatingandpublishingyour own image in the docker hub. Usehuggingface/transformers-pytorch-deepspeed-nightly-gpuas base image, install dependencies listed above and copy theinference.pyinto it. So your Dockerfile will look like this:CopyFROMhuggingface/transformers-pytorch-deepspeed-nightly-gpuRUNapt-get update -yRUNpip -q install git+https://github.com/huggingface/transformersRUNpip -q install accelerate>=0.12.0COPY./inference.py .Running Inference on Bacalhau​Prerequisite​To get started, you need to install the Bacalhau client, see more informationhereStructure of the command​export JOB_ID=$( ... ): Export results of a command execution as environment variablebacalhau docker run: Run a job using docker executor.--gpu 1: Flag to specify the number of GPUs to use for the execution. In this case, 1 GPU will be used.-w /inputs: Flag to set the working directory inside the container to/inputs.-i gitlfs://huggingface.co/databricks/dolly-v2-3b.git: Flag to clone the Dolly V2-3B model from Hugging Face's repository using Git LFS. The files will be mounted to/inputs/databricks/dolly-v2-3b.-i https://gist.githubusercontent.com/js-ts/d35e2caa98b1c9a8f176b0b877e0c892/raw/3f020a6e789ceef0274c28fc522ebf91059a09a9/inference.py: Flag to download theinference.pyscript from the provided URL. The file will be mounted to/inputs/inference.py.jsacex/dolly_inference:latest: The name and the tag of the Docker image.The command to run inference on the model:python inference.py --prompt "Where is Earth located ?" --model_version "./databricks/dolly-v2-3b". It consists of:inference.py: The Python script that runs the inference process using the Dolly V2-3B model.--prompt "Where is Earth located ?": Specifies the text prompt to be used for the inference.--model_version "./databricks/dolly-v2-3b": Specifies the path to the Dolly V2-3B model. In this case, the model files are mounted to/inputs/databricks/dolly-v2-3b.When a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on.CopyexportJOB_ID=$(bacalhaudockerrun\--gpu1\--id-only\-w/inputs\-igitlfs://huggingface.co/databricks/dolly-v2-3b.git\-i https://gist.githubusercontent.com/js-ts/d35e2caa98b1c9a8f176b0b877e0c892/raw/3f020a6e789ceef0274c28fc522ebf91059a09a9/inference.py \jsacex/dolly_inference:latest\--pythoninference.py--prompt"Where is Earth located ?"--model_version"./databricks/dolly-v2-3b")Checking the State of your Jobs​Job status: You can check the status of the job usingbacalhau job list:Copybacalhau job list --id-filter ${JOB_ID}When it saysCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe:Copybacalhau job describe ${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.Copyrm -rf results && mkdir resultsbacalhau job get ${JOB_ID} --output-dir resultsViewing your Job Output​After the download has finished, we can see the results in theresults/outputsfolder.PreviousEasyOCR (Optical Character Recognition) on BacalhauNextSpeech Recognition using WhisperLast updated1 month agoOn this pageIntroduction​Running locally​Prerequisites​Installing dependencies​Building the container (optional)​Running Inference on Bacalhau​Prerequisite​Structure of the command​Checking the State of your Jobs​Viewing your Job Output​Was this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.