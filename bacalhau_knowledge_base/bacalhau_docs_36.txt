URL: https://docs.bacalhau.org/setting-up/workload-onboarding/python/index-3

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+â€†KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookRunning Jupyter Notebooks on BacalhauIntroductionJupyter Notebooks have become an essential tool for data scientists, researchers, and developers for interactive computing and the development of data-driven projects. They provide an efficient way to share code, equations, visualizations, and narrative text with support for multiple programming languages. In this tutorial, we will introduce you to running Jupyter Notebooks on Bacalhau, a powerful and flexible container orchestration platform. By leveraging Bacalhau, you can execute Jupyter Notebooks in a scalable and efficient manner using Docker containers, without the need for manual setup or configuration.In the following sections, we will explore two examples of executing Jupyter Notebooks on Bacalhau:Executing a Simple Hello World Notebook:We will begin with a basic example to familiarize you with the process of running a Jupyter Notebook on Bacalhau. We will execute a simple "Hello, World!" notebook to demonstrate the steps required for running a notebook in a containerized environment.Notebook to Train an MNIST Model:In this section, we will dive into a more advanced example. We will execute a Jupyter Notebook that trains a machine-learning model on the popular MNIST dataset. This will showcase the potential of Bacalhau to handle more complex tasks while providing you with insights into utilizing containerized environments for your data science projects.PrerequisiteTo get started, you need to install the Bacalhau client, see more informationhere1. Executing a Simple Hello World NotebookThere are no external dependencies that we need to install. All dependencies are already there in the container.CopyexportJOB_ID=$(bacalhaudockerrun\--wait\--id-only\--timeout3600\--wait-timeout-secs3600\-w/inputs\-ihttps://raw.githubusercontent.com/js-ts/hello-notebook/main/hello.ipynb\jsacex/jupyter\--jupyternbconvert--execute--tonotebook--output/outputs/hello_output.ipynbhello.ipynb)/inputs/hello.ipynb: This is the path of the input Jupyter Notebook inside the Docker container.-i: This flag stands for "input" and is used to provide the URL of the input Jupyter Notebook you want to execute.https://raw.githubusercontent.com/js-ts/hello-notebook/main/hello.ipynb: This is the URL of the input Jupyter Notebook.jsacex/jupyter: This is the name of the Docker image used for running the Jupyter Notebook. It is a minimal Jupyter Notebook stack based on the official Jupyter Docker Stacks.--: This double dash is used to separate the Bacalhau command options from the command that will be executed inside the Docker container.jupyter nbconvert: This is the primary command used to convert and execute Jupyter Notebooks. It allows for the conversion of notebooks to various formats, including execution.--execute: This flag tellsnbconvertto execute the notebook and store the results in the output file.--to notebook: This option specifies the output format. In this case, we want to keep the output as a Jupyter Notebook.--output /outputs/hello_output.ipynb: This option specifies the path and filename for the output Jupyter Notebook, which will contain the results of the executed input notebook.Checking the State of your JobsJob status: You can check the status of the job usingbacalhau job list:Copybacalhaujoblist--id-filter=${JOB_ID}--no-styleWhen it saysPublishedorCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe:Copybacalhaujobdescribe${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (results) and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdirresults# Temporary directory to store the resultsbacalhaujobget${JOB_ID}--output-dirresults# Download the resultsAfter the download has finished you can see the contents in theresultsdirectory, running the command below:Copylsresults/outputshello_output.nbconvert.ipynb2. Running Notebook to Train an MNIST ModelBuilding the container (optional)PrerequisiteInstall Docker on your local machine.Sign up for a DockerHub account if you don't already have one.Step 1: Create a DockerfileCreate a new file named Dockerfile in your project directory with the following content:Copy# Use the official Python image as the base imageFROM tensorflow/tensorflow:nightly-gpu# Set the working directory in the containerWORKDIR /RUN apt-get update -yCOPY mnist.ipynb .# Install the Python packagesCOPY requirements.txt .RUN python3 -m pip install --upgrade pip# Install the Python packagesRUN pip install --no-cache-dir -r requirements.txtRUN pip install -U scikit-learnThis Dockerfile creates a Docker image based on the officialTensorFlowGPU-enabled image, sets the working directory to the root, updates the package list, and copies an IPython notebook (mnist.ipynb) and arequirements.txtfile. It then upgradespipand installs Python packages from therequirements.txtfile, along withscikit-learn. The resulting image provides an environment ready for running themnist.ipynbnotebook withTensorFlowandscikit-learn, as well as other specified dependencies.Step 2: Build the Docker ImageIn your terminal, navigate to the directory containing the Dockerfile and run the following command to build the Docker image:Copydockerbuild-tyour-dockerhub-username/jupyter-mnist-tensorflow:latest.Replace "your-dockerhub-username" with your actual DockerHub username. This command will build the Docker image and tag it with your DockerHub username and the name "your-dockerhub-username/jupyter-mnist-tensorflow".Step 3: Push the Docker Image to DockerHubOnce the build process is complete, push the Docker image to DockerHub using the following command:Copydockerpushyour-dockerhub-username/jupyter-mnist-tensorflowAgain, replace "your-dockerhub-username" with your actual DockerHub username. This command will push the Docker image to your DockerHub repository.Running the job on BacalhauPrerequisiteTo get started, you need to install the Bacalhau client, see more informationhereCopyexportJOB_ID=$(bacalhaudockerrun\--wait\--id-only\--timeout3600\--wait-timeout-secs3600\--gpu1\-igitlfs://huggingface.co/datasets/VedantPadwal/mnist.git\jsacex/jupyter-tensorflow-mnist:v02\--jupyternbconvert--execute--tonotebook--output/outputs/mnist_output.ipynbmnist.ipynb)Structure of the command--gpu 1: Flag to specify the number of GPUs to use for the execution. In this case, 1 GPU will be used.-i gitlfs://huggingface.co/datasets/VedantPadwal/mnist.git: The-iflag is used to clone the MNIST dataset from Hugging Face's repository using Git LFS. The files will be mounted inside the container.jsacex/jupyter-tensorflow-mnist:v02: The name and the tag of the Docker image.--: This double dash is used to separate the Bacalhau command options from the command that will be executed inside the Docker container.jupyter nbconvert --execute --to notebook --output /outputs/mnist_output.ipynb mnist.ipynb: The command to be executed inside the container. In this case, it runs thejupyter nbconvertcommand to execute themnist.ipynbnotebook and save the output asmnist_output.ipynbin the/outputsdirectory.Checking the State of your JobsJob status: You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter=${JOB_ID}--no-styleWhen it saysPublishedorCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (results) and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdirresults# Temporary directory to store the resultsbacalhaujobget${JOB_ID}--output-dirresults# Download the resultsAfter the download has finished you can see the contents in theresultsdirectory, running the command below:Copylsresults/outputsThe outputs include our trained model and the Jupyter notebook with the output cells.SupportIf you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousRunning a Python ScriptNextScripting Bacalhau with PythonLast updated2 months agoOn this pageIntroductionPrerequisite1. Executing a Simple Hello World NotebookChecking the State of your Jobs2. Running Notebook to Train an MNIST ModelBuilding the container (optional)Running the job on BacalhauStructure of the commandChecking the State of your JobsSupportWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.