URL: https://docs.bacalhau.org/examples/model-inference/speech-recognition-using-whisper

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookSpeech Recognition using WhisperIntroduction​Whisper is an automatic speech recognition (ASR) system trained on 680,000 hours of multilingual and multitask supervised data collected from the web. It shows that the use of such a large and diverse dataset leads to improved robustness to accents, background noise, and technical language. Moreover, it enables transcription in multiple languages, as well as translation from those languages into English. Creators are open-sourcing models and inference code to serve as a foundation for building useful applications and for further research on robust speech processing. In this example, we will transcribe an audio clip locally, containerize the script and then run the container on Bacalhau.The advantage of using Bacalhau over managed Automatic Speech Recognition services is that you can run your own containers which can scale to do batch process petabytes of videos or audio for automatic speech recognitionTL;DR​Copybacalhaudockerrun\--id-only\--gpu1\--timeout3600\--wait-timeout-secs3600\jsacex/whisper\-iipfs://bafybeielf6z4cd2nuey5arckect5bjmelhouvn5rhbjlvpvhp7erkrc4nu\--pythonopenai-whisper.py-pinputs/Apollo_11_moonwalk_montage_720p.mp4-ooutputsPrerequisite​To get started, you need to install:Bacalhau client, see more informationhere.Whisper.PyTorch.Python Pandas.Running whisper locally​Copypipinstallgit+https://github.com/openai/whisper.gitpipinstalltorch==1.10.1pipinstall--upgradepandassudoaptupdate&&sudoaptinstallffmpegBefore we create and run the script we need a sample audio file to test the code. For that we download a sample audio clip:Copywgethttps://github.com/js-ts/hello/raw/main/hello.mp3Create the script​We will create a script that accepts parameters (input file path, output file path, temperature, etc.) and set the default parameters. Also if the input file is inmp4format, then the script converts it towavformat. The transcript can be saved in various formats. Then the large model is loaded and we pass it the required parameters.This model is not only limited to English and transcription, it supports many other languages.Next, let's create an openai-whisper script:Copy#content of the openai-whisper.py fileimportargparseimportosimportsysimportwarningsimportwhisperfrompathlibimportPathimportsubprocessimporttorchimportshutilimportnumpyasnpparser=argparse.ArgumentParser(description="OpenAI Whisper Automatic Speech Recognition")parser.add_argument("-l",dest="audiolanguage", type=str,help="Language spoken in the audio, use Auto detection to let Whisper detect the language. Select from the following languages['Auto detection', 'Afrikaans', 'Albanian', 'Amharic', 'Arabic', 'Armenian', 'Assamese', 'Azerbaijani', 'Bashkir', 'Basque', 'Belarusian', 'Bengali', 'Bosnian', 'Breton', 'Bulgarian', 'Burmese', 'Castilian', 'Catalan', 'Chinese', 'Croatian', 'Czech', 'Danish', 'Dutch', 'English', 'Estonian', 'Faroese', 'Finnish', 'Flemish', 'French', 'Galician', 'Georgian', 'German', 'Greek', 'Gujarati', 'Haitian', 'Haitian Creole', 'Hausa', 'Hawaiian', 'Hebrew', 'Hindi', 'Hungarian', 'Icelandic', 'Indonesian', 'Italian', 'Japanese', 'Javanese', 'Kannada', 'Kazakh', 'Khmer', 'Korean', 'Lao', 'Latin', 'Latvian', 'Letzeburgesch', 'Lingala', 'Lithuanian', 'Luxembourgish', 'Macedonian', 'Malagasy', 'Malay', 'Malayalam', 'Maltese', 'Maori', 'Marathi', 'Moldavian', 'Moldovan', 'Mongolian', 'Myanmar', 'Nepali', 'Norwegian', 'Nynorsk', 'Occitan', 'Panjabi', 'Pashto', 'Persian', 'Polish', 'Portuguese', 'Punjabi', 'Pushto', 'Romanian', 'Russian', 'Sanskrit', 'Serbian', 'Shona', 'Sindhi', 'Sinhala', 'Sinhalese', 'Slovak', 'Slovenian', 'Somali', 'Spanish', 'Sundanese', 'Swahili', 'Swedish', 'Tagalog', 'Tajik', 'Tamil', 'Tatar', 'Telugu', 'Thai', 'Tibetan', 'Turkish', 'Turkmen', 'Ukrainian', 'Urdu', 'Uzbek', 'Valencian', 'Vietnamese', 'Welsh', 'Yiddish', 'Yoruba'] ",default="English")parser.add_argument("-p",dest="inputpath", type=str,help="Path of the input file",default="/hello.mp3")parser.add_argument("-v",dest="typeverbose", type=str,help="Whether to print out the progress and debug messages. ['Live transcription', 'Progress bar', 'None']",default="Live transcription")parser.add_argument("-g",dest="outputtype", type=str,help="Type of file to generate to record the transcription. ['All', '.txt', '.vtt', '.srt']",default="All")parser.add_argument("-s",dest="speechtask", type=str,help="Whether to perform X->X speech recognition (`transcribe`) or X->English translation (`translate`). ['transcribe', 'translate']",default="transcribe")parser.add_argument("-n",dest="numSteps", type=int,help="Number of Steps",default=50)parser.add_argument("-t",dest="decodingtemperature", type=int,help="Temperature to increase when falling back when the decoding fails to meet either of the thresholds below.",default=0.15 )parser.add_argument("-b",dest="beamsize", type=int,help="Number of Images",default=5)parser.add_argument("-o",dest="output", type=str,help="Output Folder where to store the outputs",default="")args=parser.parse_args()device=torch.device('cuda:0')print('Using device:', device, file=sys.stderr)Model='large'whisper_model=whisper.load_model(Model)video_path_local=os.getcwd()+args.inputpathfile_name=os.path.basename(video_path_local)output_file_path=args.outputifos.path.splitext(video_path_local)[1]==".mp4":video_path_local_wav=os.path.splitext(file_name)[0]+".wav"result  = subprocess.run(["ffmpeg", "-i", str(video_path_local), "-vn", "-acodec", "pcm_s16le", "-ar", "16000", "-ac", "1", str(video_path_local_wav)])# add language parameters# Language spoken in the audio, use Auto detection to let Whisper detect the language.#  ['Auto detection', 'Afrikaans', 'Albanian', 'Amharic', 'Arabic', 'Armenian', 'Assamese', 'Azerbaijani', 'Bashkir', 'Basque', 'Belarusian', 'Bengali', 'Bosnian', 'Breton', 'Bulgarian', 'Burmese', 'Castilian', 'Catalan', 'Chinese', 'Croatian', 'Czech', 'Danish', 'Dutch', 'English', 'Estonian', 'Faroese', 'Finnish', 'Flemish', 'French', 'Galician', 'Georgian', 'German', 'Greek', 'Gujarati', 'Haitian', 'Haitian Creole', 'Hausa', 'Hawaiian', 'Hebrew', 'Hindi', 'Hungarian', 'Icelandic', 'Indonesian', 'Italian', 'Japanese', 'Javanese', 'Kannada', 'Kazakh', 'Khmer', 'Korean', 'Lao', 'Latin', 'Latvian', 'Letzeburgesch', 'Lingala', 'Lithuanian', 'Luxembourgish', 'Macedonian', 'Malagasy', 'Malay', 'Malayalam', 'Maltese', 'Maori', 'Marathi', 'Moldavian', 'Moldovan', 'Mongolian', 'Myanmar', 'Nepali', 'Norwegian', 'Nynorsk', 'Occitan', 'Panjabi', 'Pashto', 'Persian', 'Polish', 'Portuguese', 'Punjabi', 'Pushto', 'Romanian', 'Russian', 'Sanskrit', 'Serbian', 'Shona', 'Sindhi', 'Sinhala', 'Sinhalese', 'Slovak', 'Slovenian', 'Somali', 'Spanish', 'Sundanese', 'Swahili', 'Swedish', 'Tagalog', 'Tajik', 'Tamil', 'Tatar', 'Telugu', 'Thai', 'Tibetan', 'Turkish', 'Turkmen', 'Ukrainian', 'Urdu', 'Uzbek', 'Valencian', 'Vietnamese', 'Welsh', 'Yiddish', 'Yoruba']language=args.audiolanguage# Whether to print out the progress and debug messages.# ['Live transcription', 'Progress bar', 'None']verbose=args.typeverbose#  Type of file to generate to record the transcription.# ['All', '.txt', '.vtt', '.srt']output_type=args.outputtype# Whether to perform X->X speech recognition (`transcribe`) or X->English translation (`translate`).# ['transcribe', 'translate']task=args.speechtask# Temperature to use for sampling.temperature=args.decodingtemperature#  Temperature to increase when falling back when the decoding fails to meet either of the thresholds below.temperature_increment_on_fallback=0.2#  Number of candidates when sampling with non-zero temperature.best_of=5#  Number of beams in beam search, only applicable when temperature is zero.beam_size=args.beamsize# Optional patience value to use in beam decoding, as in [*Beam Decoding with Controlled Patience*](https://arxiv.org/abs/2204.05424), the default (1.0) is equivalent to conventional beam search.patience=1.0# Optional token length penalty coefficient (alpha) as in [*Google's Neural Machine Translation System*](https://arxiv.org/abs/1609.08144), set to negative value to uses simple length normalization.length_penalty=-0.05# Comma-separated list of token ids to suppress during sampling; '-1' will suppress most special characters except common punctuations.suppress_tokens="-1"# Optional text to provide as a prompt for the first window.initial_prompt=""# if True, provide the previous output of the model as a prompt for the next window; disabling may make the text inconsistent across windows, but the model becomes less prone to getting stuck in a failure loop.condition_on_previous_text=True#  whether to perform inference in fp16.fp16=True#  If the gzip compression ratio is higher than this value, treat the decoding as failed.compression_ratio_threshold=2.4# If the average log probability is lower than this value, treat the decoding as failed.logprob_threshold=-1.0# If the probability of the <|nospeech|> token is higher than this value AND the decoding has failed due to `logprob_threshold`, consider the segment as silence.no_speech_threshold=0.6verbose_lut={'Live transcription':True,'Progress bar':False,'None':None}args=dict(language=(Noneiflanguage=="Auto detection"elselanguage),verbose=verbose_lut[verbose],task=task,temperature=temperature,temperature_increment_on_fallback=temperature_increment_on_fallback,best_of=best_of,beam_size=beam_size,patience=patience,length_penalty=(length_penaltyiflength_penalty>=0.0elseNone),suppress_tokens=suppress_tokens,initial_prompt=(Noneifnotinitial_promptelseinitial_prompt),condition_on_previous_text=condition_on_previous_text,fp16=fp16,compression_ratio_threshold=compression_ratio_threshold,logprob_threshold=logprob_threshold,no_speech_threshold=no_speech_threshold)temperature=args.pop("temperature")temperature_increment_on_fallback=args.pop("temperature_increment_on_fallback")iftemperature_increment_on_fallbackisnotNone:temperature=tuple(np.arange(temperature,1.0+1e-6, temperature_increment_on_fallback))else:temperature=[temperature]ifModel.endswith(".en")andargs["language"]notin{"en","English"}:warnings.warn(f"{Model}is an English-only model but receipted '{args['language']}'; using English instead.")args["language"]="en"video_transcription=whisper.transcribe(whisper_model,str(video_path_local),temperature=temperature,**args,)# Save outputwriting_lut={'.txt':whisper.utils.write_txt,'.vtt':whisper.utils.write_vtt,'.srt':whisper.utils.write_txt,}ifoutput_type=="All":forsuffix,write_suffixinwriting_lut.items():transcript_local_path=os.getcwd()+output_file_path+'/'+os.path.splitext(file_name)[0]+suffixwithopen(transcript_local_path,"w", encoding="utf-8")asf:write_suffix(video_transcription["segments"], file=f)try:transcript_drive_path=file_nameexcept:print(f"**Transcript file created:{transcript_local_path}**")else:transcript_local_path=output_file_path+'/'+os.path.splitext(file_name)[0]+output_typewithopen(transcript_local_path,"w", encoding="utf-8")asf:writing_lut[output_type](video_transcription["segments"], file=f)Let's run the script with the default parameters:Copypythonopenai-whisper.pyTo view the outputs, execute following:Copycathello.srtContainerize Script using Docker​To build your own docker container, create aDockerfile, which contains instructions on how the image will be built, and what extra requirements will be included.CopyFROMpytorch/pytorch:1.12.1-cuda11.3-cudnn8-runtimeWORKDIR/RUNapt-get -y updateRUNapt-get -y install gitRUNpython3 -m pip install --upgrade pipRUNpython -m pip install regex tqdm PillowRUNpip install git+https://github.com/openai/whisper.gitADDhello.mp3 hello.mp3ADDopenai-whisper.py openai-whisper.pyRUNpython openai-whisper.pyWe choosepytorch/pytorch:1.12.1-cuda11.3-cudnn8-runtimeas our base image.And then install all the dependencies, after that we will add the test audio file and our openai-whisper script to the container, we will also run a test command to check whether our script works inside the container and if the container builds successfullySee more information on how to containerize your script/apphereBuild the container​We will rundocker buildcommand to build the container;Copydocker build -t <hub-user>/<repo-name>:<tag> .Before running the command replace:hub-userwith your docker hub username, If you don’t have a docker hub accountfollow these instructions to create a Docker account, and use the username of the account you createdrepo-namewith the name of the container, you can name it anything you wanttagthis is not required but you can use the latest tagIn our case:Copydocker build -t jsacex/whisperPush the container​Next, upload the image to the registry. This can be done by using the Docker hub username, repo name or tag.Copydocker push <hub-user>/<repo-name>:<tag>In our case:Copydocker push jsacex/whisperRunning a Bacalhau Job​We will transcribe the moon landing video, which can be found here:https://www.nasa.gov/multimedia/hd/apollo11_hdpage.htmlSince the downloaded video is in mov format we convert the video to mp4 format and then upload it to our public storage in this case IPFS. We will be usingNFT.Storage(Recommended Option). To upload your dataset usingNFTupjust drag and drop your directory it will upload it to IPFS.After the dataset has been uploaded, copy the CID:Copybafybeielf6z4cd2nuey5arckect5bjmelhouvn5rhbjlvpvhp7erkrc4nuStructure of the command​Let's look closely at the command below:export JOB_ID=$( ... )exports the job ID as environment variablebacalhau docker run: call to bacalhauThe-i ipfs://bafybeielf6z4cd2nuey5arckect5bjmelhouvn5r: flag to mount the CID which contains our file to the container at the path/inputsThe--gpu 1flag is set to specify hardware requirements, a GPU is needed to run such a jobjsacex/whisper: the name and the tag of the docker image we are usingpython openai-whisper.py: execute the script with following parameters:-p inputs/Apollo_11_moonwalk_montage_720p.mp4: the input path of our file-o outputs: the path where to store the outputsCopyexportJOB_ID=$(bacalhaudockerrun\--id-only\--gpu1\--timeout3600\--wait-timeout-secs3600\jsacex/whisper\-iipfs://bafybeielf6z4cd2nuey5arckect5bjmelhouvn5rhbjlvpvhp7erkrc4nu\--pythonopenai-whisper.py-pinputs/Apollo_11_moonwalk_montage_720p.mp4-ooutputsWhen a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on.Declarative job description​The same job can be presented in thedeclarativeformat. In this case, the description will look like this:Copyname:Speech Recognition using Whispertype:batchcount:1tasks:-name:My main taskEngine:type:dockerparams:Image:jsacex/whisper:latestEntrypoint:-/bin/bashParameters:--c-python openai-whisper.py -p inputs/Apollo_11_moonwalk_montage_720p.mp4 -o outputsResources:GPU:"1"Checking the State of your Jobs​Job status​You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysCompleted, that means the job is done, and we can get the results.Job information​You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download​You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presultsbacalhaujobget$JOB_ID--output-dirresultsAfter the download has finished you should see the following contents in results directoryViewing your Job Output​Now you can find the file in theresults/outputsfolder. To view it, run the following command:Copycatresults/outputs/Apollo_11_moonwalk_montage_720p.vttPreviousRunning Inference on Dolly 2.0 Model with Hugging FaceNextStable Diffusion on a GPULast updated1 month agoOn this pageIntroduction​TL;DR​Prerequisite​Running whisper locally​Create the script​Containerize Script using Docker​Build the container​Push the container​Running a Bacalhau Job​Structure of the command​Declarative job description​Checking the State of your Jobs​Job status​Job information​Job download​Viewing your Job Output​Was this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.