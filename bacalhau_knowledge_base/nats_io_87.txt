Source: nats_io
URL: https://nats.io/blog/natsproxy_project/

AboutDownloadDocumentationBlogCommunitySupportPrivacyGuest Post: REST to NATS ProxyRadomír Sohlich— April 23, 2016Back to BlogThe REST to NATS proxy projectsohlich/nats-proxyis the micro framework that provides a bridge between HTTP and NATS. To introduce the problem, we first compare the HTTP and NATS communication models. The table below represents the matching of HTTP and NATS concepts and what do they provide.HTTPNATSRequest/ResponseRequest/Replysynchronous communicationWebsocketPublish/Subscribereal-time asynchronous communicationAs you can see, the NATS provides both synchronous and asynchronous communication between clients. The synchronous communication, represented by simple Request and Response of HTTP protocol, could be matched with the Request/Reply communication model of NATS. As the documentation for“request reply”model describes: each request sent via NATS contains reply subject, to which the reply is sent. The asynchronous, let’s say real-time communication, can be represented by Websockets on HTTP side.The truth is that it is not really related to HTTP, but if we simplify it, at least the handshake is based on HTTP. For this purpose, the Publish/Subscribe model could be used.So the REST to NATS project uses this similarity between NATS and HTTP communication and tries to implement the bridge between HTTP(Websockets) and NATS in such way. The library was originally created for the purpose of migrating REST based architecture like thisinto NATS messaging platform based one. But as it evolved, it started to grow into some kind of framework, that can be used for the creation of service API and seamless protocol bridging. So one of the many examples of how the system using a nats-proxy framework could look like is on the architecture below.Proxy basicsAs the name of the project suggests the function of the library is very similar to basic HTTP proxy. The proxy receives the HTTP request and translates it into a struct, which contains all the information from original request (URL, header, body).typeRequeststruct{URLstringMethodstringHeaderhttp.HeaderFormurl.ValuesRemoteAddrstringBody[]byte}This struct is serialized and sent as a message through NATS via request (seehttps://nats.io/documentation/concepts/nats-req-rep/) to ensure synchronous processing.
The subject, to which the serialized struct is sent, is constructed from the HTTP request URL and METHOD by a very simple rule: slashes in the path are replaced by dots and the method is used as the prefix.Lets say we have GET request on URLhttps://example.com/user/infoso the proxy will translate this URL to subjectGET:user.info.The client side is subscribed to the subjectGET:user.info. Because of that, it receives the request and writes back the response to the reply subject. The response struct also contains the body, status and header.typeResponsestruct{Headerhttp.HeaderStatusCodeintBody[]byte}For better picture of how it works in reality. There is a code of simple client and proxy.ProxyThe proxy side implements thehttp.Handlerinterface, so it can be used with built-inhttppackage as you can see in the code below. The handler does nothing special. It parses the request and translates it to custom representation which is then serialized to JSON by built injsonpackage encoder.import("gopkg.in/sohlich/nats-proxy.v1""net/http""github.com/nats-io/go-nats")funcmain(){proxyConn,_:=nats.Connect(nats.DefaultURL)proxy,_:=natsproxy.NewNatsProxy(proxyConn)deferproxyConn.Close()http.ListenAndServe(":8080",proxy)}The proxy itself does not implement any mechanisms to apply filters before the request is passed to the proxy handler as this could be implemented by decorating the proxy handler or other similar techniques.
Because the implementation does not allow writing data to thehttp.ResponseWriterafter the handler is applied, the proxy providesnatsproxy.Hookinterface. This hook is applied on the response before it is written tohttp.ResponseWriter. The example bellow shows the usage of hook to translate JWT token with all user info to meaningless reference token.proxyHandler.AddHook(".*",func(r*Response){// Exchange the jwt token for// reference token to hide user informationjwt:=r.GetHeader().Get("X-Auth")refToken:=auth.GetTokenFor(jwt)r.GetHeader().Set("X-Auth",refToken)})ClientThe client code uses the nats connection as the constructor argument, so all available options for configuring the connection are accessible. The client itself uses the asynchronous subscription to handle incoming messages, so it’s behavior similar tohttp.HandlerFunc. The client API and internals are heavily inspired byGin Gonicproject. The sample code shows how to use the client API.import("gopkg.in/sohlich/nats-proxy.v1""net/http""github.com/nats-io/go-nats")funcmain(){clientConn,_:=nats.Connect(nats.DefaultURL)natsClient,_:=natsproxy.NewNatsClient(clientConn)//Subscribe to URL /user/infonatsClient.GET("/user/info",func(c*natsproxy.Context){user:=struct{Namestring}{"Alan",}c.JSON(200,user)})deferclientConn.Close()// Waiting for signal to close the clientsig:=make(chanos.Signal,1)signal.Notify(sig,syscall.SIGINT,syscall.SIGTERM)fmt.Println("Press Ctrl+C for exit.")<-sig}The client API naturally provides the subscription for other HTTP methods and generic subscription method. The request handler which implementsnatsproxy.NatsHandlerinterface usesnatsproxy.Contextstruct which encapsulates both Request and Response and provides some useful methods to access request data and to write a response.//GETnatsClient.GET("/user/info",func(c*natsproxy.Context){c.JSON(200,"Hello")})//POSTnatsClient.POST("/user/info",func(c*natsproxy.Context){c.JSON(200,"Hello")})//PUTnatsClient.PUT("/user/info",func(c*natsproxy.Context){c.JSON(200,"Hello")})//DELETEnatsClient.DELETE("/user/info",func(c*natsproxy.Context){c.JSON(200,"Hello")})//General methodnatsClient.Subscribe("HEAD","/user/info",func(c*natsproxy.Context){c.JSON(200,"Hello")})The client also implements middleware function that provides the means of accessing the request before it is handled by the specific handler. The reason behind this feature is to provide options for security checks, logging, etc. The example shows the implementation of middleware, that logs all incoming requests.natsClient.Use(funclogger(c*natsproxy.Context){log.Infof("%s:%s from %s",c.Request.Method,c.Request.URL)})SummaryThe first version (v1) of the nats-proxy framework implements only HTTP Request/Response proxying.
Because it started as some kind of proof of concept, the solution is not really optimized, all the work is done on the proxy side.
Also, the serialization of structs is done by JSON encoder, which does not provide very fast serialization.
However for the purpose of bridging REST(HTTP) requests to NATS messaging platform, it’s enough to make it possible.Currently, the next version (v2) is under development.
The v2 should bring some performance improvements because the serialization is done via protocol buffers. Also, a lot of work originally done on the proxy side was moved to client(service) side.The next significant feature is the WebSocket support.If you are interested or have some ideas, seeREST to NATS proxyproject, fire an issue.Back to BlogCopyright © NATS Authors 2024NATS is aCloud Native Computing Foundationincubating projectThe Linux Foundation has registered trademarks and uses trademarks.For a list of trademarks of The Linux Foundation, please seeTrademark Usage page.