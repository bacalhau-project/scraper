Source: raft_consensus
URL: https://raft.github.io/

Raft is a consensus algorithm that is designed to be easy to understand. It's equivalent to Paxos in fault-tolerance and performance. The difference is that it's decomposed into relatively independent subproblems, and it cleanly addresses all major pieces needed for practical systems. We hope Raft will make consensus available to a wider audience, and that this wider audience will be able to develop a variety of higher quality consensus-based systems than are available today.
Consensus is a fundamental problem in fault-tolerant distributed systems. Consensus involves multiple servers agreeing on values. Once they reach a decision on a value, that decision is final. Typical consensus algorithms make progress when any majority of their servers is available; for example, a cluster of 5 servers can continue to operate even if 2 servers fail. If more servers fail, they stop making progress (but will never return an incorrect result).
Consensus typically arises in the context of replicated state machines, a general approach to building fault-tolerant systems. Each server has a state machine and a log. The state machine is the component that we want to make fault-tolerant, such as a hash table. It will appear to clients that they are interacting with a single, reliable state machine, even if a minority of the servers in the cluster fail. Each state machine takes as input commands from its log. In our hash table example, the log would include commands like set x to 3. A consensus algorithm is used to agree on the commands in the servers' logs. The consensus algorithm must ensure that if any state machine applies set x to 3 as the nth command, no other state machine will ever apply a different nth command. As a result, each state machine processes the same series of commands and thus produces the same series of results and arrives at the same series of states.
Here's a Raft cluster running in your browser. You can interact with it to see
Raft in action. Five servers are shown on the left, and their logs are shown on
the right. We hope to create a screencast soon to explain what's going on. This
visualization ([RaftScope](https://github.com/ongardie/raftscope))
is still pretty rough around the edges; pull requests would be very welcome.
[The Secret Lives of Data](http://thesecretlivesofdata.com/raft/)
is a different visualization of Raft. It's more guided and less interactive, so
it may be a gentler starting point.
This is "the Raft paper", which describes Raft in detail:
[In Search of an Understandable Consensus Algorithm (Extended Version)](raft.pdf)
by [Diego Ongaro](https://twitter.com/ongardie) and
[John Ousterhout](https://www.stanford.edu/~ouster/).
A slightly shorter version of this paper received a Best Paper Award at the
[2014 USENIX Annual Technical Conference](https://www.usenix.org/conference/atc14/technical-sessions/presentation/ongaro).
Diego Ongaro's
[Ph.D. dissertation](https://github.com/ongardie/dissertation#readme)
expands on the content of the paper in much more detail, and it includes a
simpler cluster membership change algorithm. The dissertation also includes a
formal specification of Raft written in TLA+; a slightly updated version of that
specification is [here](https://github.com/ongardie/raft.tla).
More Raft-related papers:
Doug Woos,
James R. Wilcox,
Steve Anton,
Zachary Tatlock,
Michael D. Ernst, and
Thomas Anderson.
[Planning for Change in a Formal Verification of the Raft Consensus Protocol](https://dl.acm.org/doi/abs/10.1145/2854065.2854081).
Certified Programs and Proofs (CPP), January 2016.
James R. Wilcox,
Doug Woos,
Pavel Panchekha,
Zachary Tatlock,
Xi Wang,
Michael D. Ernst, and
Thomas Anderson.
[Verdi: A Framework for Implementing and Verifying Distributed Systems](http://verdi.uwplse.org/).
Programming Language Design and Implementation (PLDI), June 2015.
Hugues Evrard and
Frédéric Lang.
[Automatic Distributed Code Generation from Formal Models of Asynchronous Concurrent Processes](https://hal.inria.fr/hal-01086522).
Parallel, Distributed, and Network-Based Processing (PDP), March 2015.
[Heidi Howard](https://twitter.com/heidiann360),
Malte Schwarzkopf,
Anil Madhavapeddy, and
Jon Crowcroft.
[Raft Refloated: Do We Have Consensus?](https://www.cl.cam.ac.uk/~ms705/pub/papers/2015-osr-raft.pdf).
SIGOPS Operating Systems Review, January 2015.
Heidi Howard.
[ARC: Analysis of Raft Consensus](https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-857.html).
University of Cambridge, Computer Laboratory, UCAM-CL-TR-857, July 2014.
These talks serve as good introductions to Raft:
Video |
|
Video |
|
Video |
|
Video |
|
Video |
|
Video |
|
Video |
|
Video |
|
Video |
|
Video |
|
Video |
|
Video |
|
Video |
|
Video |
|
Slides |
|
Video (screencast) |
|
This is a list of courses that include lectures or programming assignments on Raft.
This might be useful for other instructors and for online learners looking for materials.
If you know of additional courses, please submit a
[pull request](https://github.com/raft/raft.github.io)
or an issue to update it.
The best place to ask questions about Raft and its implementations is the
[raft-dev Google group](https://groups.google.com/forum/#!forum/raft-dev).
Some of the implementations also have their own mailing lists; check their READMEs.
There are many implementations of Raft available in various stages of
development. This table lists the implementations we know about with source
code available. The most popular and/or recently updated implementations are
towards the top. This information will inevitably get out of date; please submit a
[pull request](https://github.com/raft/raft.github.io)
or an issue to update it.
Stars | Name | Primary Authors | Language | License | Leader Election + Log Replication? | Persistence? | Membership Changes? | Log Compaction? |
---|