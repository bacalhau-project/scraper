URL: https://docs.bacalhau.org/getting-started/workload-onboarding/wasm-workload-onboarding

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+â€†KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookWebAssembly (Wasm) WorkloadsBacalhau supports running programs that are compiled toWebAssembly (Wasm). With the Bacalhau client, you can upload Wasm programs, retrieve data from public storage, read and write data, receive program arguments, and access environment variables.Prerequisites and LimitationsSupported WebAssembly System Interface (WASI)Bacalhau can run compiled Wasm programs that expect the WebAssembly System Interface (WASI) Snapshot. WebAssembly programs can access data, environment variables, and program arguments through this interface.Networking RestrictionsAll ingress/egress networking is disabled; you won't be able to pulldata/code/weightsetc. from an external source. Wasm jobs say what data they need using URLs or CIDs (Content IDentifier) and then access the data by reading from the filesystem.Single-ThreadingThere is no multi-threading as WASI does not expose any interface.Onboarding Your WorkloadStep 1: Replace network operations with filesystem reads and writesIf your program typically involves reading from and writing to network endpoints, follow these steps to adapt it for Bacalhau:Replace Network Operations:Instead of making HTTP requests to external servers (e.g., example.com), modify your program to read data from the local filesystem.Input Data Handling:Specify the input data location in Bacalhau using the--inputflag when running the job. For instance, if your program used to fetch data fromexample.com, read from the/inputsfolder locally, and provide the URL as input when executing the Bacalhau job. For example,--input http://example.com.Output Handling:Adjust your program to output results to standard output (stdout) or standard error (stderr) pipes. Alternatively, you can write results to the filesystem, typically into an output mount. In the case of Wasm jobs, a default folder at/outputsis available, ensuring that data written there will persist after the job concludes.By making these adjustments, you can effectively transition your program to operate within the Bacalhau environment, utilizing filesystem operations instead of traditional network interactions.You can specify additional or different output mounts using the-oflag.Step 2: Configure your compiler to output WASI-compliant WebAssemblyYou will need to compile your program to WebAssembly that expects WASI. Check the instructions for your compiler to see how to do this.For example, Rust users can specify thewasm32-wasitargetrustupandcargoto get programs compiled for WASI WebAssembly. Seethe Rust examplefor more information on this.Step 3: Upload the input dataData is identified by its content identifier (CID) and can be accessed by anyone who knows the CID. You can use either of these methods to upload your data:Copy data from a URL to public storagePin Data to public storageCopy Data from S3 Bucket to public storage.You can mount your data anywhere on your machine, and Bacalhau will be able to run against that dataStep 4: Run your programYou can run a WebAssembly program on Bacalhau using thebacalhau wasm runcommand.CopybacalhauwasmrunRun Locally Compiled Program:If your program is locally compiled, specify it as an argument. For instance, running the following command will upload and execute themain.wasmprogram:Copybacalhauwasmrunmain.wasmThe program you specify will be uploaded to a Bacalhau storage node and will be publicly available.Alternative Program Specification:You can use a Content IDentifier (CID) for a specific WebAssembly program.CopybacalhauwasmrunQmajb9T3jBdMSp7xh2JruNrqg3hniCnM6EUVsBocARPJRQInput Data Specification:Make sure to specify any input data using--inputflag.Copybacalhauwasmrun--inputhttp://example.comThis ensures the necessary data is available for the program's execution.Program argumentsYou can give the Wasm program arguments by specifying them after the program path or CID. If the Wasm program is already compiled and located in the current directory, you can run it by adding arguments after the file name:Copybacalhauwasmrunecho.wasmhelloworldFor a specific WebAssembly program, run:CopybacalhauwasmrunQmajb9T3jBdMSp7xh2JruNrqg3hniCnM6EUVsBocARPJRQhelloworldWrite your program to use program arguments to specify input and output paths. This makes your program more flexible in handling different configurations of input and output volumes.For example, instead of hard-coding your program to read from/inputs/data.txt, accept a program argument that should contain the path and then specify the path as an argument tobacalhau wasm run:Copybacalhauwasmrunprog.wasm/inputs/data.txtYour language of choice should contain a standard way of reading program arguments that will work with WASI.Environment variablesYou can also specify environment variables using the-eflag.Copy$bacalhauwasmrunprog.wasm-eHELLO=worldExamplesSeethe Rust examplefor a workload that leverages WebAssembly support.SupportIf you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousDocker WorkloadsNextRunning NodesLast updated1 day agoOn this pagePrerequisites and LimitationsOnboarding Your WorkloadStep 1: Replace network operations with filesystem reads and writesStep 2: Configure your compiler to output WASI-compliant WebAssemblyStep 3: Upload the input dataStep 4: Run your programExamplesSupportWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.