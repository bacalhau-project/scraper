URL: https://docs.bacalhau.org/examples/model-inference/stable-diffusion-on-a-gpu

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookStable Diffusion on a GPUThis example tutorial demonstrates how to use Stable Diffusion on a GPU and run it on theBacalhaudemo network.Stable Diffusionis a state of the art text-to-image model that generates images from text and was developed as an open-source alternative toDALL·E 2. It is based on aDiffusion Probabilistic Modeland uses aTransformerto generate images from text.TL;DR​Copybacalhaudockerrun\--id-only\--gpu1\ghcr.io/bacalhau-project/examples/stable-diffusion-gpu:0.0.1\--pythonmain.py--o./outputs--p"meme about tensorflow"Prerequisite​To get started, you need to install the Bacalhau client, see more informationhere.Quick Test​Here is an example of an image generated by this model.Copybacalhaudockerrun\--gpu1\ghcr.io/bacalhau-project/examples/stable-diffusion-gpu:0.0.1\--pythonmain.py--o./outputs--p"cod swimming through data"Development​This stable diffusion example is based on theKeras/Tensorflow implementation. You might also be interested in the Pytorch orienteddiffusers library.Installing dependencies​When you run this code for the first time, it will download the pre-trained weights, which may add a short delay.Based on the requirementshere, we will install the following:Copypipinstallgit+https://github.com/fchollet/stable-diffusion-tensorflow--upgrade--quietpipinstalltensorflowtensorflow_addonsftfy--upgrade--quietpipinstalltqdm--upgradeaptinstall--allow-change-held-packageslibcudnn8=8.1.0.77-1+cuda11.2Testing the Code​We have a sample code from this theStable Diffusion in TensorFlow/Kerasrepo which we will use to check if the code is working as expected. Our output for this code will be aDSLR photograph of an astronaut riding a horse.When you run this code for the first time, it will download the pre-trained weights, which may add a short delay.Copyfromstable_diffusion_tf.stable_diffusionimportText2ImagefromPILimportImagegenerator=Text2Image(img_height=512,img_width=512,jit_compile=False,# You can try True as well (different performance profile))img=generator.generate("DSLR photograph of an astronaut riding a horse",num_steps=50,unconditional_guidance_scale=7.5,temperature=1,batch_size=1,)pil_img=Image.fromarray(img[0])display(pil_img)When running this code, if you check the GPU RAM usage, you'll see that it's sucked up many GBs, and depending on what GPU you're running, it may OOM (Out of memory) if you run this again.You can try and reduce RAM usage by playing with batch sizes (although it is only set to 1 above!) or more carefully controlling the TensorFlow session.To clear the GPU memory we will usenumba. This won't be required when running in a single-shot manner.Copypipinstallnumba--upgradeCopy# clearing the GPU memoryfromnumbaimportcudadevice=cuda.get_current_device()device.reset()Write the Script​You need a script to execute when we submit jobs. The code below is a slightly modified version of the code we ran above which we got fromhere, however, this includes more things such as argument parsingargument parsingto be able to customize the generator.Copy#content of the main.py fileimportargparsefromstable_diffusion_tf.stable_diffusionimportText2ImagefromPILimportImageimportosparser=argparse.ArgumentParser(description="Stable Diffusion")parser.add_argument("--h",dest="height", type=int,help="height of the image",default=512)parser.add_argument("--w",dest="width", type=int,help="width of the image",default=512)parser.add_argument("--p",dest="prompt", type=str,help="Description of the image you want to generate",default="cat")parser.add_argument("--n",dest="numSteps", type=int,help="Number of Steps",default=50)parser.add_argument("--u",dest="unconditionalGuidanceScale", type=float,help="Number of Steps",default=7.5)parser.add_argument("--t",dest="temperature", type=int,help="Number of Steps",default=1)parser.add_argument("--b",dest="batchSize", type=int,help="Number of Images",default=1)parser.add_argument("--o",dest="output", type=str,help="Output Folder where to store the Image",default="./")args=parser.parse_args()height=args.heightwidth=args.widthprompt=args.promptnumSteps=args.numStepsunconditionalGuidanceScale=args.unconditionalGuidanceScaletemperature=args.temperaturebatchSize=args.batchSizeoutput=args.outputgenerator=Text2Image(img_height=height,img_width=width,jit_compile=False,# You can try True as well (different performance profile))img=generator.generate(prompt,num_steps=numSteps,unconditional_guidance_scale=unconditionalGuidanceScale,temperature=temperature,batch_size=batchSize,)foriinrange(0,batchSize):pil_img=Image.fromarray(img[i])image=pil_img.save(f"{output}/image{i}.png")For a full list of arguments that you can pass to the script, see more informationhereRun the Script​After writing the code the next step is to run the script.Copypython3main.pyAs a result, you will get something like this:The following presents additional parameters you can try:python main.py --p "cat with three eyes- to set promptpython main.py --p "cat with three eyes" --n 100- to set the number of iterations to 100python stable-diffusion.py --p "cat with three eyes" --b 2to set batch size to 2 (№ of images to generate)Containerize Script using Docker​Docker is the easiest way to run TensorFlow on a GPU since the host machine only requires theNVIDIA® driver. To containerize the inference code, we will create aDockerfile. The Dockerfile is a text document that contains the commands that specify how the image will be built.CopyFROMtensorflow/tensorflow:2.10.0-gpuRUNapt-get -y updateRUNapt-get -y install --allow-change-held-packages libcudnn8=8.1.0.77-1+cuda11.2 gitRUNpython3 -m pip install --upgrade pipRUNpython -m pip install regex tqdm Pillow tensorflow tensorflow_addons ftfy  --upgrade --quietRUNpip install git+https://github.com/fchollet/stable-diffusion-tensorflow --upgrade --quietADDmain.py main.py# Run once so it downloads and caches the pre-trained weightsRUNpython main.py --n 1The Dockerfile leverages the latest official TensorFlow GPU image and then installs other dependencies likegit,CUDApackages, and other image-related necessities. Seethe original repositoryfor the expected requirements.See more information on how to containerize your script/apphereBuild the container​We will rundocker buildcommand to build the container;Copydockerbuild-t<hub-user>/<repo-name>:<tag>.Before running the command replace following:hub-userwith your docker hub username, If you don’t have a docker hub account followthese instructionsto create a Docker account, and use the username of the account you createdrepo-namewith the name of the container, you can name it anything you wanttagthis is not required but you can use the latest tagIn our case:Copydockerbuild-tghcr.io/bacalhau-project/examples/stable-diffusion-gpu:0.0.1.Push the container​Next, upload the image to the registry. This can be done by using the Docker hub username, repo name or tag.Copydockerpush<hub-user>/<repo-name>:<tag>In our case:Copydockerpushghcr.io/bacalhau-project/examples/stable-diffusion-gpu:0.0.1.Running a Bacalhau Job​Structure of the command​Some of the jobs presented in the Examples section may require more resources than are currently available on the demo network. Considerstarting your own networkor running less resource-intensive jobs on the demo networkTo submit a job run the Bacalhau command with following structure:export JOB_ID=$( ... )exports the job ID as environment variableThe--gpu 1flag is set to specify hardware requirements, a GPU is needed to run such a jobThe--id-onlyflag is set to print only job idghcr.io/bacalhau-project/examples/stable-diffusion-gpu:0.0.1: the name and the tag of the docker image we are using-- python main.py --o ./outputs --p "meme about tensorflow": The command to run inference on the model. It consists of:main.pypath to the script--o ./outputsspecifies the output directory--p "meme about tensorflow"specifies the promptCopyexportJOB_ID=$(bacalhaudockerrun\--id-only\--gpu1\ghcr.io/bacalhau-project/examples/stable-diffusion-gpu:0.0.1\--pythonmain.py--o./outputs--p"meme about tensorflow")The Bacalhau command passes a prompt to the model and generates an image in the outputs directory. The main difference in the example below compared to all the other examples is the addition of the--gpu Xflag, which tells Bacalhau to only schedule the job on nodes that haveXGPUs free. You canread more about GPU supportin the documentation.This will take about 5 minutes to complete and is mainly due to the cold-start GPU setup time. This is faster than the CPU version, but you might still want to grab some fruit or plan your lunchtime run.Furthermore, the container itself is about 10GB, so it might take a while to download on the node if it isn't cached.When a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on.Checking the State of your Jobs​Job status: You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presultsbacalhaujobget$JOB_ID--output-dirresultsAfter the download has finished you should see the following contents in results directoryViewing your Job Output​Now you can find the file in theresults/outputsfolder:PreviousSpeech Recognition using WhisperNextStable Diffusion on a CPULast updated1 month agoOn this pageTL;DR​Prerequisite​Quick Test​Development​Installing dependencies​Testing the Code​Write the Script​Run the Script​Containerize Script using Docker​Build the container​Push the container​Running a Bacalhau Job​Structure of the command​Checking the State of your Jobs​Viewing your Job Output​Was this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.