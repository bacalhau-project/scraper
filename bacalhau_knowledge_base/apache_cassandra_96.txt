URL: https://cassandra.apache.org/doc/latest/cassandra/developing/cql/json.html

Get StartedCassandra BasicsQuickstartEcosystemDocumentationCommunityWelcomeDiscussionsGovernanceContributeMeet the CommunityCatalyst ProgramEventsLearnCassandra 5.0Case StudiesResourcesBlogDownload NowCassandra DocumentationVersion:5.0mastertrunk5.04.14.03.11MainGlossaryHow to report bugsContact usDevelopmentGetting startedBuilding and IDE integrationTestingContributing code changesCode styleReview checklistHow to commitWorking on documentationJenkins CI environmentDependency managementRelease processCassandraFAQGetting StartedCassandra QuickstartSAI QuickstartVector Search QuickstartInstalling CassandraConfiguring CassandraInserting and queryingClient driversProduction recommendationsWhat’s newSupport for JavaArchitectureOverviewDynamoStorage EngineGuaranteesImproved Internode MessagingImproved StreamingData ModelingIntroductionConceptual data modelingRDBMS designDefining application queriesLogical data modelingPhysical data modelingEvaluating and refining data modelsDefining database schemaCassandra data modeling toolsCassandra Query Language (CQL)DefinitionsData typesData definition (DDL)Data manipulation (DML)Dynamic Data Masking (DDM)OperatorsIndexing conceptsSAI OverviewConceptsSAI QuickstartSAI FAQWorking with SAISAI operationsSecondary indexes (2i) overviewConceptsWorking with 2iRebuild 2iMaterialized viewsFunctionsJSONSecurityTriggersAppendicesChangesSASISingle file of CQL informationVector Search overviewConceptsData ModelingVector Search QuickstartWorking with Vector SearchManagingConfiguringcassandra.yamlcassandra-rackdc.propertiescassandra-env.shcassandra-topologies.propertiescommitlog-archiving.propertieslogback.xmljvm-* filesLiberating cassandra.yaml Parameters' Names from Their UnitsOperatingBackupsBloom filtersBulk loadingChange Data Capture (CDC)CompactionCompressionHardwareHintsLoggingAudit loggingAudit logging 2Full query loggingMonitoring metricsRepairRead repairSecuritySnitchesTopology changesTransient replicationVirtual tablesToolscqlsh: the CQL shellnodetoolSSTable toolscassandra-stressTroubleshootingFinding misbehaving nodesReading Cassandra logsUsing nodetoolUsing external tools to deep-diveReferenceALTER TABLECREATE INDEXCREATE CUSTOM INDEXCREATE TABLEDROP INDEXDROP TABLEPlug-insYou are viewing the documentation for a prerelease version.CassandraCassandra Query Language (CQL)JSONEditJSON SupportCassandra 2.2 introduced JSON support toSELECT <select-statement>andINSERT <insert-statement>statements.
This support does not fundamentally alter the CQL API (for example, the schema is still
enforced).
It simply provides a convenient way to work with JSON documents.SELECT JSONWithSELECTstatements, theJSONkeyword is used to return each row as a singleJSONencoded map.
The remainder of theSELECTstatement behavior is the same.The result map keys match the column names in a normal result set.
For example, a statement likeSELECT JSON a, ttl(b) FROM …​would result in a map with keys"a"and"ttl(b)".
However, there is one notable exception: for symmetry withINSERT JSONbehavior, case-sensitive column names with upper-case letters will be surrounded with double quotes.
For example,SELECT JSON myColumn FROM …​would result in a map key"\"myColumn\""with escaped quotes).The map values will JSON-encoded representations (as described below) of the result set values.INSERT JSONWithINSERTstatements, the newJSONkeyword can be used to enable
inserting aJSONencoded map as a single row. The format of theJSONmap should generally match that returned by aSELECT JSONstatement on
the same table. In particular, case-sensitive column names should be
surrounded with double quotes. For example, to insert into a table with
two columns named "myKey" and "value", you would do the following:INSERT INTO mytable JSON '{ "\"myKey\"": 0, "value": 0}';By default (or ifDEFAULT NULLis explicitly used), a column omitted
from theJSONmap will be set toNULL, meaning that any pre-existing
value for that column will be removed (resulting in a tombstone being
created). Alternatively, if theDEFAULT UNSETdirective is used after
the value, omitted column values will be left unset, meaning that
pre-existing values for those column will be preserved.JSON Encoding of Cassandra Data TypesWhere possible, Cassandra will represent and accept data types in their
nativeJSONrepresentation. Cassandra will also accept string
representations matching the CQL literal format for all single-field
types. For example, floats, ints, UUIDs, and dates can be represented by
CQL literal strings. However, compound types, such as collections,
tuples, and user-defined types must be represented by nativeJSONcollections (maps and lists) or a JSON-encoded string representation of
the collection.The following table describes the encodings that Cassandra will accept
inINSERT JSONvalues (andfrom_json()arguments) as well as the
format Cassandra will use when returning data forSELECT JSONstatements (andfrom_json()):TypeFormats acceptedReturn formatNotesasciistringstringUses JSON’s\ucharacter escapebigintinteger, stringintegerString must be valid 64 bit integerblobstringstringString should be 0x followed by an even number of hex digitsbooleanboolean, stringbooleanString must be "true" or "false"datestringstringDate in formatYYYY-MM-DD, timezone UTCdecimalinteger, float, stringfloatMay exceed 32 or 64-bit IEEE-754 floating point precision in client-side decoderdoubleinteger, float, stringfloatString must be valid integer or floatfloatinteger, float, stringfloatString must be valid integer or floatinetstringstringIPv4 or IPv6 addressintinteger, stringintegerString must be valid 32 bit integerlistlist, stringlistUses JSON’s native list representationmapmap, stringmapUses JSON’s native map representationsmallintinteger, stringintegerString must be valid 16 bit integersetlist, stringlistUses JSON’s native list representationtextstringstringUses JSON’s\ucharacter escapetimestringstringTime of day in formatHH-MM-SS[.fffffffff]timestampinteger, stringstringA timestamp. Strings constant allows to inputtimestamps
as dates <timestamps>. Datestamps with formatYYYY-MM-DD HH:MM:SS.SSSare returned.timeuuidstringstringType 1 UUID. Seeconstantfor the UUID formattinyintinteger, stringintegerString must be valid 8 bit integertuplelist, stringlistUses JSON’s native list representationUDTmap, stringmapUses JSON’s native map representation with field names as keysuuidstringstringSeeconstantfor the UUID formatvarcharstringstringUses JSON’s\ucharacter escapevarintinteger, stringintegerVariable length; may overflow 32 or 64 bit integers in client-side decoderThe from_json() FunctionThefrom_json()function may be used similarly toINSERT JSON, but
for a single column value. It may only be used in theVALUESclause of
anINSERTstatement or as one of the column values in anUPDATE,DELETE, orSELECTstatement. For example, it cannot be used in the
selection clause of aSELECTstatement.The to_json() FunctionTheto_json()function may be used similarly toSELECT JSON, but for
a single column value. It may only be used in the selection clause of aSELECTstatement.Get started with Cassandra, fast.Quickstart GuideApache Cassandrapowers mission-critical deployments with improved performance and unparalleled levels of scale in the cloud.HomeCassandra BasicsQuickstartEcosystemDocumentationCommunityCase StudiesResourcesBlogFoundationEventsLicenseThanksSecurityPrivacySponsorshipÂ© 2009-The Apache Software Foundationunder the terms of the Apache License 2.0.  Apache, the Apache feather logo, Apache Cassandra, Cassandra, and the Cassandra logo, are either registered trademarks or trademarks of The Apache Software Foundation.