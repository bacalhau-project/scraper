URL: https://en.wikipedia.org/wiki/Distributed_algorithm

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Standard problems2References3Further reading4External linksToggle the table of contentsDistributed algorithm6 languagesFrançais한국어日本語Tiếng Việt粵語中文Edit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsWikimedia CommonsAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaAdistributed algorithmis analgorithmdesigned to run oncomputer hardwareconstructed from interconnectedprocessors. Distributed algorithms are used in different application areas ofdistributed computing, such astelecommunications,scientific computing, distributedinformation processing, and real-timeprocess control. Standard problems solved by distributed algorithms includeleader election,consensus, distributedsearch,spanning treegeneration,mutual exclusion, andresource allocation.[1]Distributed algorithms are a sub-type ofparallel algorithm, typically executedconcurrently, with separate parts of the algorithm being run simultaneously on independent processors, and having limited information about what the other parts of the algorithm are doing. One of the major challenges in developing and implementing distributed algorithms is successfully coordinating the behavior of the independent parts of the algorithm in the face of processor failures and unreliable communications links. The choice of an appropriate distributed algorithm to solve a given problem depends on both the characteristics of the problem, and characteristics of the system the algorithm will run on such as the type and probability of processor or link failures, the kind ofinter-process communicationthat can be performed, and the level of timing synchronization between separate processes.[1]Standard problems[edit]Atomic commitAn atomic commit is an operation where a set of distinct changes is applied as a single operation. If the atomic commit succeeds, it means that all the changes have been applied. If there is a failure before the atomic commit can be completed, the "commit" is aborted and no changes will be applied.Algorithms for solving the atomic commit problem include thetwo-phase commit protocoland thethree-phase commit protocol.ConsensusConsensus algorithms try to solve the problem of a number of processes agreeing on a common decision.More precisely, a Consensus protocol must satisfy the four formal properties below.Termination: every correct process decides some value.Validity: if all processes propose the same valuev{\displaystyle v}, then every correct process decidesv{\displaystyle v}.Integrity: every correct process decides at most one value, and if it decides some valuev{\displaystyle v}, thenv{\displaystyle v}must have been proposed by some process.Agreement: if a correct process decidesv{\displaystyle v}, then every correct process decidesv{\displaystyle v}.Common algorithms for solving consensus are thePaxos algorithmand theRaft algorithm.Distributed searchLeader electionLeader election is the process of designating a single process as the organizer of some task distributed among several computers (nodes). Before the task is begun, all network nodes are unaware of which node will serve as the "leader," or coordinator, of the task. After a leader election algorithm has been run, however, each node throughout the network recognizes a particular, unique node as the task leader.Mutual exclusionNon-blocking data structuresReliable BroadcastReliable broadcast is a communication primitive in distributed systems. A reliable broadcast is defined by the following properties:Validity- if a correct process sends a message, then some correct process will eventually deliver that message.Agreement- if a correct process delivers a message, then all correct processes eventually deliver that message.Integrity- every correct process delivers the same message at most once and only if that message has been sent by a process.A reliable broadcast can have sequential, causal or total ordering.ReplicationResource allocationSpanning treegenerationSymmetry breaking, e.g.vertex coloringReferences[edit]^abLynch, Nancy (1996).Distributed Algorithms. San Francisco, CA:Morgan Kaufmann Publishers.ISBN978-1-55860-348-6.Further reading[edit]Christian Cachin; Rachid Guerraoui; Luís Rodrigues (2011),Introduction to Reliable and Secure Distributed Programming(2. ed.), Springer,Bibcode:2011itra.book.....C,ISBN978-3-642-15259-7C. Rodríguez, M. Villagra and B. Barán,Asynchronous team algorithms for Boolean Satisfiability, Bionetics2007, pp. 66–69, 2007.External links[edit]Media related toDistributed algorithmsat Wikimedia CommonsMIT Open Courseware - Distributed AlgorithmsRetrieved from "https://en.wikipedia.org/w/index.php?title=Distributed_algorithm&oldid=1195718181"Category:Distributed algorithmsHidden category:Commons category link is on WikidataThis page was last edited on 15 January 2024, at 00:12(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view