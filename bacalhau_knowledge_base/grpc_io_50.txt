URL: https://grpc.io/docs/languages/java/generated-code/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issuePackagesService StubUnaryServer-streamingClient-streamingBidirectional-streamingClient StubsAsynchronous StubUnaryServer-streamingClient-streamingBidirectional-streamingBlocking StubUnaryServer-streamingFuture StubUnaryCodegenDocsLanguagesJavaGenerated codeGenerated-code referenceContentsPackagesService StubUnaryServer-streamingClient-streamingBidirectional-streamingClient StubsAsynchronous StubUnaryServer-streamingClient-streamingBidirectional-streamingBlocking StubUnaryServer-streamingFuture StubUnaryCodegenGenerated-code referencePackagesFor each service defined in a .proto file, the Java code generation produces a
Java class. The class name is the service’s name suffixed byGrpc. The package
for the generated code is specified in the .proto file using thejava_packageoption.For example, ifServiceNameis defined in a .proto file containing the
following:packagegrpcexample;optionjava_package="io.grpc.examples";Then the generated class will beio.grpc.examples.ServiceNameGrpc.Ifjava_packageis not specified, the generated class will use thepackageas specified in the .proto file. This should be avoided, as proto packages
usually do not begin with a reversed domain name.Service StubThe generated Java code contains an inner abstract class suffixed withImplBase, such asServiceNameImplBase. This class defines one Java method
for each method in the service definition. It is up to the service implementer
to extend this class and implement the functionality of these methods. Without
being overridden, the methods return an error to the client saying the method is
unimplemented.The signatures of the stub methods inServiceNameImplBasevary depending on
the type of RPCs it handles. There are four types of gRPC service methods:
unary, server-streaming, client-streaming, and bidirectional-streaming.UnaryThe service stub signature for a unary RPC methodunaryExample:publicvoidunaryExample(RequestType request,StreamObserver<ResponseType>responseObserver)Server-streamingThe service stub signature for a server-streaming RPC methodserverStreamingExample:publicvoidserverStreamingExample(RequestType request,StreamObserver<ResponseType>responseObserver)Notice that the signatures for unary and server-streaming RPCs are the same. A
singleRequestTypeis received from the client, and the service implementation
sends its response(s) by invokingresponseObserver.onNext(ResponseType response).Client-streamingThe service stub signature for a client-streaming RPC methodclientStreamingExample:publicStreamObserver<RequestType>clientStreamingExample(StreamObserver<ResponseType>responseObserver)Bidirectional-streamingThe service stub signature for a bidirectional-streaming RPC methodbidirectionalStreamingExample:publicStreamObserver<RequestType>bidirectionalStreamingExample(StreamObserver<ResponseType>responseObserver)The signatures for client and bidirectional-streaming RPCs are the same. Since
the client can send multiple messages to the service, the service implementation
is responsible for returning aStreamObserver<RequestType>instance. ThisStreamObserveris invoked whenever additional messages are received from the
client.Client StubsThe generated class also contains stubs for use by gRPC clients to call methods
defined by the service. Each stub wraps aChannel, supplied by the user of the
generated code. The stub uses this channel to send RPCs to the service.gRPC Java generates code for three types of stubs: asynchronous, blocking, and
future. Each type of stub has a corresponding class in the generated code, such
asServiceNameStub,ServiceNameBlockingStub, andServiceNameFutureStub.Asynchronous StubRPCs made via an asynchronous stub operate entirely through callbacks onStreamObserver.The asynchronous stub contains one Java method for each method from the service
definition.A new asynchronous stub is instantiated via theServiceNameGrpc.newStub(Channel channel)static method.UnaryThe asynchronous stub signature for a unary RPC methodunaryExample:publicvoidunaryExample(RequestType request,StreamObserver<ResponseType>responseObserver)Server-streamingThe asynchronous stub signature for a server-streaming RPC methodserverStreamingExample:publicvoidserverStreamingExample(RequestType request,StreamObserver<ResponseType>responseObserver)Client-streamingThe asynchronous stub signature for a client-streaming RPC methodclientStreamingExample:publicStreamObserver<RequestType>clientStreamingExample(StreamObserver<ResponseType>responseObserver)Bidirectional-streamingThe asynchronous stub signature for a bidirectional-streaming RPC methodbidirectionalStreamingExample:publicStreamObserver<RequestType>bidirectionalStreamingExample(StreamObserver<ResponseType>responseObserver)Blocking StubRPCs made through a blocking stub, as the name implies, block until the response
from the service is available.The blocking stub contains one Java method for each unary and server-streaming
method in the service definition. Blocking stubs do not support client-streaming
or bidirectional-streaming RPCs.A new blocking stub is instantiated via theServiceNameGrpc.newBlockingStub(Channel channel)static method.UnaryThe blocking stub signature for a unary RPC methodunaryExample:publicResponseTypeunaryExample(RequestType request)Server-streamingThe blocking stub signature for a server-streaming RPC methodserverStreamingExample:publicIterator<ResponseType>serverStreamingExample(RequestType request)Future StubRPCs made via a future stub wrap the return value of the asynchronous stub in aGrpcFuture<ResponseType>, which implements thecom.google.common.util.concurrent.ListenableFutureinterface.The future stub contains one Java method for each unary method in the service
definition. Future stubs do not support streaming calls.A new future stub is instantiated via theServiceNameGrpc.newFutureStub(Channel channel)static method.UnaryThe future stub signature for a unary RPC methodunaryExample:publicListenableFuture<ResponseType>unaryExample(RequestType request)CodegenTypically the build system handles creation of the gRPC generated code.For protobuf-based codegen, you can put your.protofiles in thesrc/main/protoandsrc/test/protodirectories along with an appropriate plugin.A typicalprotobuf-maven-pluginconfiguration for generating gRPC and Protocol
Buffers code would look like the following:<build><extensions><extension><groupId>kr.motd.maven</groupId><artifactId>os-maven-plugin</artifactId><version>1.4.1.Final</version></extension></extensions><plugins><plugin><groupId>org.xolstice.maven.plugins</groupId><artifactId>protobuf-maven-plugin</artifactId><version>0.5.0</version><configuration><protocArtifact>com.google.protobuf:protoc:3.3.0:exe:${os.detected.classifier}</protocArtifact><pluginId>grpc-java</pluginId><pluginArtifact>io.grpc:protoc-gen-grpc-java:1.4.0:exe:${os.detected.classifier}</pluginArtifact></configuration><executions><execution><goals><goal>compile</goal><goal>compile-custom</goal></goals></execution></executions></plugin></plugins></build>Eclipse and NetBeans users should also look atos-maven-plugin’sIDE documentation.A typicalprotobuf-gradle-pluginconfiguration would look like the following:applyplugin:'java'applyplugin:'com.google.protobuf'buildscript{repositories{mavenCentral()}dependencies{// ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier// gradle versionsclasspath'com.google.protobuf:protobuf-gradle-plugin:0.8.0'}}protobuf{protoc{artifact="com.google.protobuf:protoc:3.2.0"}plugins{grpc{artifact='io.grpc:protoc-gen-grpc-java:1.4.0'}}generateProtoTasks{all()*.plugins{grpc{}}}}Bazel developers can use thejava_grpc_libraryrule, typically as follows:load("@grpc_java//:java_grpc_library.bzl","java_grpc_library")proto_library(name="helloworld_proto",srcs=["src/main/proto/helloworld.proto"],)java_proto_library(name="helloworld_java_proto",deps=[":helloworld_proto"],)java_grpc_library(name="helloworld_java_grpc",srcs=[":helloworld_proto"],deps=[":helloworld_java_proto"],)Android developers, seeGenerating client codefor reference.If you wish to invoke the protobuf plugin for gRPC Java directly,
the command-line syntax is as follows:$ protoc --plugin=protoc-gen-grpc-java\--grpc-java_out="$OUTPUT_FILE"--proto_path="$DIR_OF_PROTO_FILE""$PROTO_FILE"Last modified August 21, 2021:Java codegen: link directly to Android page (#837) (1a0dd75)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About