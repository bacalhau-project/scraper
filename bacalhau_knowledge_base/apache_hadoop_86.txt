URL: https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HdfsRollingUpgrade.html

Wiki|git|Apache Hadoop| Last Published: 2024-03-04
               | Version: 3.4.0GeneralOverviewSingle Node SetupCluster SetupCommands ReferenceFileSystem ShellCompatibility SpecificationDownstream Developer's GuideAdmin Compatibility GuideInterface ClassificationFileSystem SpecificationCommonCLI Mini ClusterFair Call QueueNative LibrariesProxy UserRack AwarenessSecure ModeService Level AuthorizationHTTP AuthenticationCredential Provider APIHadoop KMSTracingUnix Shell GuideRegistryAsync ProfilerHDFSArchitectureUser GuideCommands ReferenceNameNode HA With QJMNameNode HA With NFSObserver NameNodeFederationViewFsViewFsOverloadSchemeSnapshotsEdits ViewerImage ViewerPermissions and HDFSQuotas and HDFSlibhdfs (C API)WebHDFS (REST API)HttpFSShort Circuit Local ReadsCentralized Cache ManagementNFS GatewayRolling UpgradeExtended AttributesTransparent EncryptionMultihomingStorage PoliciesMemory Storage SupportSynthetic Load GeneratorErasure CodingDisk BalancerUpgrade DomainDataNode AdminRouter FederationProvided StorageMapReduceTutorialCommands ReferenceCompatibility with 1.xEncrypted ShufflePluggable Shuffle/SortDistributed Cache DeploySupport for YARN Shared CacheMapReduce REST APIsMR Application MasterMR History ServerYARNArchitectureCommands ReferenceCapacity SchedulerFair SchedulerResourceManager RestartResourceManager HAResource ModelNode LabelsNode AttributesWeb Application ProxyTimeline ServerTimeline Service V.2Writing YARN ApplicationsYARN Application SecurityNodeManagerRunning Applications in Docker ContainersRunning Applications in runC ContainersUsing CGroupsSecure ContainersReservation SystemGraceful DecommissionOpportunistic ContainersYARN FederationShared CacheUsing GPUUsing FPGAPlacement ConstraintsYARN UI2YARN REST APIsIntroductionResource ManagerNode ManagerTimeline ServerTimeline Service V.2YARN ServiceOverviewQuickStartConceptsYarn Service APIService DiscoverySystem ServicesHadoop Compatible File SystemsAliyun OSSAmazon S3Azure Blob StorageAzure Data Lake StorageTencent COSHuaweicloud OBSAuthOverviewExamplesConfigurationBuildingToolsHadoop StreamingHadoop ArchivesHadoop Archive LogsDistCpHDFS Federation BalanceGridMixRumenResource Estimator ServiceScheduler Load SimulatorHadoop BenchmarkingDynamometerReferenceChangelog and Release NotesJava API docsUnix Shell APIMetricsConfigurationcore-default.xmlhdfs-default.xmlhdfs-rbf-default.xmlmapred-default.xmlyarn-default.xmlkms-default.xmlhttpfs-default.xmlDeprecated PropertiesHDFS Rolling UpgradeIntroductionUpgradeUpgrade without DowntimeUpgrading Non-Federated ClustersUpgrading Federated ClustersUpgrade with DowntimeUpgrading Non-HA ClustersDowngrade and RollbackDowngradeRollbackCommands and Startup Options for Rolling UpgradeDFSAdmin Commandsdfsadmin -rollingUpgradedfsadmin -getDatanodeInfodfsadmin -shutdownDatanodeNameNode Startup Optionsnamenode -rollingUpgradeIntroductionHDFS rolling upgradeallows upgrading individual HDFS daemons. For examples, the datanodes can be upgraded independent of the namenodes. A namenode can be upgraded independent of the other namenodes. The namenodes can be upgraded independent of datanodes and journal nodes.UpgradeIn Hadoop v2, HDFS supports highly-available (HA) namenode services and wire compatibility. These two capabilities make it feasible to upgrade HDFS without incurring HDFS downtime. In order to upgrade a HDFS cluster without downtime, the cluster must be setup with HA.If there is any new feature which is enabled in new software release, may not work with old software release after upgrade. In such cases upgrade should be done by following steps.Disable new feature.Upgrade the cluster.Enable the new feature.Note that rolling upgrade is supported only from Hadoop-2.4.0 onwards.Upgrade without DowntimeIn an HA cluster, there are two or moreNameNodes (NNs), manyDataNodes (DNs), a fewJournalNodes (JNs)and a fewZooKeeperNodes (ZKNs).JNsis relatively stable and does not require upgrade when upgrading HDFS in most of the cases. In the rolling upgrade procedure described here, onlyNNsandDNsare considered butJNsandZKNsare not. UpgradingJNsandZKNsmay incur cluster downtime.Upgrading Non-Federated ClustersSuppose there are two namenodesNN1andNN2, whereNN1andNN2are respectively in active and standby states. The following are the steps for upgrading an HA cluster:Prepare Rolling UpgradeRun “hdfs dfsadmin -rollingUpgrade prepare” to create a fsimage for rollback.Run “hdfs dfsadmin -rollingUpgrade query” to check the status of the rollback image. Wait and re-run the command until the “Proceed with rolling upgrade” message is shown.Upgrade Active and StandbyNNsShutdown and upgradeNN2.StartNN2as standby with the “-rollingUpgrade started” option.Failover fromNN1toNN2so thatNN2becomes active andNN1becomes standby.Shutdown and upgradeNN1.StartNN1as standby with the “-rollingUpgrade started” option.UpgradeDNsChoose a small subset of datanodes (e.g. all datanodes under a particular rack).Run “hdfs dfsadmin -shutdownDatanode <DATANODE_HOST:IPC_PORT> upgrade” to shutdown one of the chosen datanodes.Run “hdfs dfsadmin -getDatanodeInfo <DATANODE_HOST:IPC_PORT>” to check and wait for the datanode to shutdown.Upgrade and restart the datanode.Perform the above steps for all the chosen datanodes in the subset in parallel.Repeat the above steps until all datanodes in the cluster are upgraded.Finalize Rolling UpgradeRun “hdfs dfsadmin -rollingUpgrade finalize” to finalize the rolling upgrade.Upgrading Federated ClustersIn a federated cluster, there are multiple namespaces and a pair of active and standbyNNsfor each namespace. The procedure for upgrading a federated cluster is similar to upgrading a non-federated cluster except that Step 1 and Step 4 are performed on each namespace and Step 2 is performed on each pair of active and standbyNNs, i.e.Prepare Rolling Upgrade for Each NamespaceUpgrade Active and StandbyNNpairs for Each NamespaceUpgradeDNsFinalize Rolling Upgrade for Each NamespaceUpgrade with DowntimeFor non-HA clusters, it is impossible to upgrade HDFS without downtime since it requires restarting the namenodes. However, datanodes can still be upgraded in a rolling manner.Upgrading Non-HA ClustersIn a non-HA cluster, there are aNameNode (NN), aSecondaryNameNode (SNN)and manyDataNodes (DNs). The procedure for upgrading a non-HA cluster is similar to upgrading an HA cluster except that Step 2 “Upgrade Active and StandbyNNs” is changed to below:UpgradeNNandSNNShutdownSNNShutdown and upgradeNN.StartNNwith the “-rollingUpgrade started” option.Upgrade and restartSNNDowngrade and RollbackWhen the upgraded release is undesirable or, in some unlikely case, the upgrade fails (due to bugs in the newer release), administrators may choose to downgrade HDFS back to the pre-upgrade release, or rollback HDFS to the pre-upgrade release and the pre-upgrade state.Note that downgrade can be done in a rolling fashion but rollback cannot. Rollback requires cluster downtime.Note also that downgrade and rollback are possible only after a rolling upgrade is started and before the upgrade is terminated. An upgrade can be terminated by either finalize, downgrade or rollback. Therefore, it may not be possible to perform rollback after finalize or downgrade, or to perform downgrade after finalize.DowngradeDowngraderestores the software back to the pre-upgrade release and preserves the user data. Suppose timeTis the rolling upgrade start time and the upgrade is terminated by downgrade. Then, the files created before or afterTremain available in HDFS. The files deleted before or afterTremain deleted in HDFS.A newer release is downgradable to the pre-upgrade release only if both the namenode layout version and the datanode layout version are not changed between these two releases.In an HA cluster, when a rolling upgrade from an old software release to a new software release is in progress, it is possible to downgrade, in a rolling fashion, the upgraded machines back to the old software release. Same as before, supposeNN1andNN2are respectively in active and standby states. Below are the steps for rolling downgrade without downtime:DowngradeDNsChoose a small subset of datanodes (e.g. all datanodes under a particular rack).Run “hdfs dfsadmin -shutdownDatanode <DATANODE_HOST:IPC_PORT> upgrade” to shutdown one of the chosen datanodes.Run “hdfs dfsadmin -getDatanodeInfo <DATANODE_HOST:IPC_PORT>” to check and wait for the datanode to shutdown.Downgrade and restart the datanode.Perform the above steps for all the chosen datanodes in the subset in parallel.Repeat the above steps until all upgraded datanodes in the cluster are downgraded.Downgrade Active and StandbyNNsShutdown and downgradeNN2.StartNN2as standby normally.Failover fromNN1toNN2so thatNN2becomes active andNN1becomes standby.Shutdown and downgradeNN1.StartNN1as standby normally.Finalize Rolling DowngradeRun “hdfs dfsadmin -rollingUpgrade finalize” to finalize the rolling downgrade.Note that the datanodes must be downgraded before downgrading the namenodes since protocols may be changed in a backward compatible manner but not forward compatible, i.e. old datanodes can talk to the new namenodes but not vice versa.RollbackRollbackrestores the software back to the pre-upgrade release but also reverts the user data back to the pre-upgrade state. Suppose timeTis the rolling upgrade start time and the upgrade is terminated by rollback. The files created beforeTremain available in HDFS but the files created afterTbecome unavailable. The files deleted beforeTremain deleted in HDFS but the files deleted afterTare restored.Rollback from a newer release to the pre-upgrade release is always supported. However, it cannot be done in a rolling fashion.  It requires cluster downtime. SupposeNN1andNN2are respectively in active and standby states. Below are the steps for rollback:Rollback HDFSShutdown allNNsandDNs.Restore the pre-upgrade release in all machines.StartNN1as Active with the “-rollingUpgrade rollback” option.Run `-bootstrapStandby’ on NN2 and start it normally as standby.StartDNswith the “-rollback” option.Commands and Startup Options for Rolling UpgradeDFSAdmin Commandsdfsadmin -rollingUpgradehdfs dfsadmin -rollingUpgrade <query|prepare|finalize>Execute a rolling upgrade action.Options:queryQuery the current rolling upgrade status.preparePrepare a new rolling upgrade.finalizeFinalize the current rolling upgrade.dfsadmin -getDatanodeInfohdfs dfsadmin -getDatanodeInfo <DATANODE_HOST:IPC_PORT>Get the information about the given datanode. This command can be used for checking if a datanode is alive like the Unixpingcommand.dfsadmin -shutdownDatanodehdfs dfsadmin -shutdownDatanode <DATANODE_HOST:IPC_PORT> [upgrade]Submit a shutdown request for the given datanode. If the optionalupgradeargument is specified, clients accessing the datanode will be advised to wait for it to restart and the fast start-up mode will be enabled. When the restart does not happen in time, clients will timeout and ignore the datanode. In such case, the fast start-up mode will also be disabled.Note that the command does not wait for the datanode shutdown to complete. The “dfsadmin -getDatanodeInfo” command can be used for checking if the datanode shutdown is completed.NameNode Startup Optionsnamenode -rollingUpgradehdfs namenode -rollingUpgrade <rollback|started>When a rolling upgrade is in progress, the-rollingUpgradenamenode startup option is used to specify various rolling upgrade options.Options:rollbackRestores the namenode back to the pre-upgrade release but also reverts the user data back to the pre-upgrade state.startedSpecifies a rolling upgrade already started so that the namenode should allow image directories with different layout versions during startup.WARN: downgrade options is obsolete.It is not necessary to start namenode with downgrade options explicitly.©            2008-2024
              Apache Software Foundation
            
                          -Privacy Policy.
        Apache Maven, Maven, Apache, the Apache feather logo, and the Apache Maven project logos are trademarks of The Apache Software Foundation.