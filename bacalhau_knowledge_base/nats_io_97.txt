URL: https://nats.io/blog/java-ocsp-stapling/

AboutDownloadDocumentationBlogCommunitySupportPrivacyUsing OCSP Stapling with the NATS Java LibraryScott Fauerbach— July 6, 2021Back to BlogYou already know that theNATS Java librarycan connect to the NATS Server
with TLS. The NATS Server now supports OCSP Stapling. To that end, I have built an example on how to set up theSSLContextto use with the NATS Java Library. Mileage may vary, and you will need to incorporate your own certificates and key stores,
but thisOCSP Examplewill get you most of the way there.OCSP Stapling SSLContextOCSP Stapling has been supported in Java since JDK 8. This excellent document from Oracle,Client-Driven OCSP and OCSP Stapling, describes it in detail.ExamplesExample of creating theSSLContextcan be found in theOCSP Example ClassThese are the methods of interest…DescriptionMethodStandard TLScreateStandardContext()Vm Wide Check RevocationcreateVmWideOcspCheckRevocationContext()Vm Wide Don’t Check RevocationcreateVmWideOcspDontCheckRevocationContext()Siloed Check RevocationcreateSiloedContextCheckRevocation()Entire VM ApproachIt’s trivial to turn on Client Side OCSP revocation checking. It’s as simple as this code, adding system properties:System.setProperty("jdk.tls.client.enableStatusRequestExtension", "true");
System.setProperty("com.sun.net.ssl.checkRevocation", "true");The caveat here is that these properties apply to every singleSSLContextrunning in that VM.
These properties are checked at runtime, each time a TLS handshake is made, so it cannot be turned on
to create anSSLContextthen turned off. If it is turned off, revocation checking will not happen.Siloed ApproachIf it’s that easy to turn on OCSP stapling with revocation, why do we need the example?Consider 3 different types of connections.Standard TLSOCSP with revocation checkingOCSP without revocation checkingIt appears that setting the system properties does not affect Standard TLS certificate handshakes.
But if you need both OCSP with revocation checking and OCSP without, you cannot use thecom.sun.net.ssl.checkRevocationproperty,
so you must use the siloed implementation for the context that will check revocation.
Find your configuration in this table to see if you have to set the system properties and which OCSP context implementation to use.Have Standard TLS?Have OCSP With Revocation?Have OCSP Without Revocation?Enable Status Request Extension Flag?Check Revocation Flag?Use Context ImplementationsYesNoNofalsefalseStandard TLSYesYesNotruetrueStandard TLSandVm Wide Check RevocationYesNoYestruefalseStandard TLSandVm Wide Don’t Check RevocationYesYesYestruefalseStandard TLS,Siloed Check RevocationandVm Wide Don’t Check RevocationNoNoNofalsefalseNoneNoYesNotruetrueVm Wide Check RevocationNoNoYestruefalseVm Wide Don’t Check RevocationNoYesYestruefalseSiloed Check RevocationandVm Wide Don’t Check RevocationPlease note, there are a few examples on the internet that guided development examples, in fact the siloed version is almost identical to those,
but none of them set theenableStatusRequestExtensionflag. As far as we can tell it simply does not work without setting the flag.About the AuthorScott Fauerbach is a member of the engineering team atSynadia Communications.Back to BlogCopyright © NATS Authors 2024NATS is aCloud Native Computing Foundationincubating projectThe Linux Foundation has registered trademarks and uses trademarks.For a list of trademarks of The Linux Foundation, please seeTrademark Usage page.