URL: https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/AsyncProfilerServlet.html

Wiki|git|Apache Hadoop| Last Published: 2024-03-04
               | Version: 3.4.0GeneralOverviewSingle Node SetupCluster SetupCommands ReferenceFileSystem ShellCompatibility SpecificationDownstream Developer's GuideAdmin Compatibility GuideInterface ClassificationFileSystem SpecificationCommonCLI Mini ClusterFair Call QueueNative LibrariesProxy UserRack AwarenessSecure ModeService Level AuthorizationHTTP AuthenticationCredential Provider APIHadoop KMSTracingUnix Shell GuideRegistryAsync ProfilerHDFSArchitectureUser GuideCommands ReferenceNameNode HA With QJMNameNode HA With NFSObserver NameNodeFederationViewFsViewFsOverloadSchemeSnapshotsEdits ViewerImage ViewerPermissions and HDFSQuotas and HDFSlibhdfs (C API)WebHDFS (REST API)HttpFSShort Circuit Local ReadsCentralized Cache ManagementNFS GatewayRolling UpgradeExtended AttributesTransparent EncryptionMultihomingStorage PoliciesMemory Storage SupportSynthetic Load GeneratorErasure CodingDisk BalancerUpgrade DomainDataNode AdminRouter FederationProvided StorageMapReduceTutorialCommands ReferenceCompatibility with 1.xEncrypted ShufflePluggable Shuffle/SortDistributed Cache DeploySupport for YARN Shared CacheMapReduce REST APIsMR Application MasterMR History ServerYARNArchitectureCommands ReferenceCapacity SchedulerFair SchedulerResourceManager RestartResourceManager HAResource ModelNode LabelsNode AttributesWeb Application ProxyTimeline ServerTimeline Service V.2Writing YARN ApplicationsYARN Application SecurityNodeManagerRunning Applications in Docker ContainersRunning Applications in runC ContainersUsing CGroupsSecure ContainersReservation SystemGraceful DecommissionOpportunistic ContainersYARN FederationShared CacheUsing GPUUsing FPGAPlacement ConstraintsYARN UI2YARN REST APIsIntroductionResource ManagerNode ManagerTimeline ServerTimeline Service V.2YARN ServiceOverviewQuickStartConceptsYarn Service APIService DiscoverySystem ServicesHadoop Compatible File SystemsAliyun OSSAmazon S3Azure Blob StorageAzure Data Lake StorageTencent COSHuaweicloud OBSAuthOverviewExamplesConfigurationBuildingToolsHadoop StreamingHadoop ArchivesHadoop Archive LogsDistCpHDFS Federation BalanceGridMixRumenResource Estimator ServiceScheduler Load SimulatorHadoop BenchmarkingDynamometerReferenceChangelog and Release NotesJava API docsUnix Shell APIMetricsConfigurationcore-default.xmlhdfs-default.xmlhdfs-rbf-default.xmlmapred-default.xmlyarn-default.xmlkms-default.xmlhttpfs-default.xmlDeprecated PropertiesAsync Profiler Servlet for HadoopPurposePrerequisitesUsagePurposeThis document describes how to configure and use async profiler with Hadoop applications. Async profiler is a low overhead sampling profiler for Java that does not suffer from Safepoint bias problem. It features HotSpot-specific APIs to collect stack traces and to track memory allocations. The profiler works with OpenJDK, Oracle JDK and other Java runtimes based on the HotSpot JVM.Hadoop profiler servlet supports Async Profiler major versions 1.x and 2.x.PrerequisitesMake sure Hadoop is installed, configured and setup correctly. For more information see:Single Node Setupfor first-time users.Cluster Setupfor large, distributed clusters.Go tohttps://github.com/jvm-profiling-tools/async-profiler, download a release appropriate for your platform, and install on every cluster host.SetASYNC_PROFILER_HOMEin the environment (put it in hadoop-env.sh) to the root directory of the async-profiler install location, or pass it on the Hadoop daemon’s command line as a system property as-Dasync.profiler.home=/path/to/async-profiler.UsageOnce the prerequisites have been satisfied, access to the async-profiler is available by using Namenode or ResourceManager UI.Following options from async-profiler can be specified as query paramater. *-e eventprofiling event: cpu|alloc|lock|cache-misses etc. *-d durationrun profiling for ‘duration’ seconds (integer) *-i intervalsampling interval in nanoseconds (long) *-j jstackdepthmaximum Java stack depth (integer) *-b bufsizeframe buffer size (long) *-tprofile different threads separately *-ssimple class names instead of FQN *-o fmt[,fmt...]output format: summary|traces|flat|collapsed|svg|tree|jfr|html *--width pxSVG width pixels (integer) *--height pxSVG frame height pixels (integer) *--minwidth pxskip frames smaller than px (double) *--reversegenerate stack-reversed FlameGraph / Call treeExample: If Namenode http address is localhost:9870, and ResourceManager http address is localhost:8088, ProfileServlet running with async-profiler setup can be accessed withhttp://localhost:9870/profandhttp://localhost:8088/proffor Namenode and ResourceManager processes respectively.Diving deep into some params:To collect 10 second CPU profile of current process (returns FlameGraph svg)curl http://localhost:9870/prof(FlameGraph svg for Namenode)curl http://localhost:8088/prof(FlameGraph svg for ResourceManager)To collect 10 second CPU profile of pid 12345 (returns FlameGraph svg)curl http://localhost:9870/prof?pid=12345(For instance, provide pid of Datanode here)To collect 30 second CPU profile of pid 12345 (returns FlameGraph svg)curl http://localhost:9870/prof?pid=12345&duration=30To collect 1 minute CPU profile of current process and output in tree format (html)curl http://localhost:9870/prof?output=tree&amp;duration=60To collect 10 second heap allocation profile of current process (returns FlameGraph svg)curl http://localhost:9870/prof?event=allocTo collect lock contention profile of current process (returns FlameGraph svg)curl http://localhost:9870/prof?event=lockThe following event types are supported by async-profiler. Use the ‘event’ parameter to specify. Default is ‘cpu’. Not all operating systems will support all types.Perf events:cpupage-faultscontext-switchescyclesinstructionscache-referencescache-missesbranchesbranch-missesbus-cyclesL1-dcache-load-missesLLC-load-missesdTLB-load-missesJava events:alloclockThe following output formats are supported. Use the ‘output’ parameter to specify. Default is ‘flamegraph’.Output formats:summary: A dump of basic profiling statistics.traces: Call traces.flat: Flat profile (top N hot methods).collapsed: Collapsed call traces in the format used by FlameGraph script. This is a collection of call stacks, where each line is a semicolon separated list of frames followed by a counter.svg: FlameGraph in SVG format.tree: Call tree in HTML format.jfr: Call traces in Java Flight Recorder format.The ‘duration’ parameter specifies how long to collect trace data before generating output, specified in seconds. The default is 10 seconds.©            2008-2024
              Apache Software Foundation
            
                          -Privacy Policy.
        Apache Maven, Maven, Apache, the Apache feather logo, and the Apache Maven project logos are trademarks of The Apache Software Foundation.