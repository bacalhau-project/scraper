URL: https://cassandra.apache.org/doc/latest/cassandra/developing/cql/mvs.html

Get StartedCassandra BasicsQuickstartEcosystemDocumentationCommunityWelcomeDiscussionsGovernanceContributeMeet the CommunityCatalyst ProgramEventsLearnCassandra 5.0Case StudiesResourcesBlogDownload NowCassandra DocumentationVersion:5.0mastertrunk5.04.14.03.11MainGlossaryHow to report bugsContact usDevelopmentGetting startedBuilding and IDE integrationTestingContributing code changesCode styleReview checklistHow to commitWorking on documentationJenkins CI environmentDependency managementRelease processCassandraFAQGetting StartedCassandra QuickstartSAI QuickstartVector Search QuickstartInstalling CassandraConfiguring CassandraInserting and queryingClient driversProduction recommendationsWhat’s newSupport for JavaArchitectureOverviewDynamoStorage EngineGuaranteesImproved Internode MessagingImproved StreamingData ModelingIntroductionConceptual data modelingRDBMS designDefining application queriesLogical data modelingPhysical data modelingEvaluating and refining data modelsDefining database schemaCassandra data modeling toolsCassandra Query Language (CQL)DefinitionsData typesData definition (DDL)Data manipulation (DML)Dynamic Data Masking (DDM)OperatorsIndexing conceptsSAI OverviewConceptsSAI QuickstartSAI FAQWorking with SAISAI operationsSecondary indexes (2i) overviewConceptsWorking with 2iRebuild 2iMaterialized viewsFunctionsJSONSecurityTriggersAppendicesChangesSASISingle file of CQL informationVector Search overviewConceptsData ModelingVector Search QuickstartWorking with Vector SearchManagingConfiguringcassandra.yamlcassandra-rackdc.propertiescassandra-env.shcassandra-topologies.propertiescommitlog-archiving.propertieslogback.xmljvm-* filesLiberating cassandra.yaml Parameters' Names from Their UnitsOperatingBackupsBloom filtersBulk loadingChange Data Capture (CDC)CompactionCompressionHardwareHintsLoggingAudit loggingAudit logging 2Full query loggingMonitoring metricsRepairRead repairSecuritySnitchesTopology changesTransient replicationVirtual tablesToolscqlsh: the CQL shellnodetoolSSTable toolscassandra-stressTroubleshootingFinding misbehaving nodesReading Cassandra logsUsing nodetoolUsing external tools to deep-diveReferenceALTER TABLECREATE INDEXCREATE CUSTOM INDEXCREATE TABLEDROP INDEXDROP TABLEPlug-insYou are viewing the documentation for a prerelease version.CassandraCassandra Query Language (CQL)Materialized viewsEditMaterialized ViewsMaterialized views names are defined by:view_name::= re('[a-zA-Z_0-9]+')CREATE MATERIALIZED VIEWYou can create a materialized view on a table using aCREATE MATERIALIZED VIEWstatement:create_materialized_view_statement::= CREATE MATERIALIZED VIEW [ IF NOT EXISTS ] view_name
	AS select_statement
	PRIMARY KEY '(' primary_key')'
	WITH table_optionsFor instance:CREATE MATERIALIZED VIEW monkeySpecies_by_population AS
   SELECT * FROM monkeySpecies
   WHERE population IS NOT NULL AND species IS NOT NULL
   PRIMARY KEY (population, species)
   WITH comment='Allow query by population instead of species';TheCREATE MATERIALIZED VIEWstatement creates a new materialized
view. Each such view is a set ofrowswhich corresponds to rows which
are present in the underlying, or base, table specified in theSELECTstatement. A materialized view cannot be directly updated, but updates
to the base table will cause corresponding updates in the view.Creating a materialized view has 3 main parts:Theselect statementthat restrict the data included in
the view.Theprimary keydefinition for the view.Theoptionsfor the view.Attempting to create an already existing materialized view will return
an error unless theIF NOT EXISTSoption is used. If it is used, the
statement will be a no-op if the materialized view already exists.By default, materialized views are built in a single thread. The initial
build can be parallelized by increasing the number of threads specified
by the propertyconcurrent_materialized_view_buildersincassandra.yaml. This property can also be manipulated at runtime
through both JMX and thesetconcurrentviewbuildersandgetconcurrentviewbuildersnodetool commands.MV select statementThe select statement of a materialized view creation defines which of
the base table is included in the view. That statement is limited in a
number of ways:theselectionis limited to those that only
select columns of the base table. In other words, you can’t use any
function (aggregate or not), casting, term, etc. Aliases are also not
supported.
You can however use * as a shortcut of selecting all columns.
Further,static columnscannot be included in a materialized view.
Thus, aSELECT *command isn’t allowed if the base table has static columns.
TheWHEREclause has the following restrictions:cannot include anybind_markercannot have columns that are not part of thebase tableprimary key that are not restricted by anIS NOT NULLrestrictionno other restriction is allowedcannot have columns that are part of theviewprimary key be null, they must always be at least restricted by aIS NOT NULLrestriction (or any other restriction, but they must have one).cannot have anordering clause, alimit, or xref:cassandra:developing/cql/dml.adoc#allow-filtering[ALLOW FILTERINGMV primary keyA view must have a primary key and that primary key must conform to the
following restrictions:it must contain all the primary key columns of the base table. This
ensures that every row of the view correspond to exactly one row of the
base table.it can only contain a single column that is not a primary key column
in the base table.So for instance, give the following base table definition:CREATE TABLE t (
    k int,
    c1 int,
    c2 int,
    v1 int,
    v2 int,
    PRIMARY KEY (k, c1, c2)
);then the following view definitions are allowed:CREATE MATERIALIZED VIEW mv1 AS
   SELECT * FROM t
   WHERE k IS NOT NULL AND c1 IS NOT NULL AND c2 IS NOT NULL
   PRIMARY KEY (c1, k, c2);

CREATE MATERIALIZED VIEW mv1 AS
  SELECT * FROM t
  WHERE k IS NOT NULL AND c1 IS NOT NULL AND c2 IS NOT NULL
  PRIMARY KEY (v1, k, c1, c2);but the following ones arenotallowed:// Error: cannot include both v1 and v2 in the primary key as both are not in the base table primary key

CREATE MATERIALIZED VIEW mv1 AS
   SELECT * FROM t
   WHERE k IS NOT NULL AND c1 IS NOT NULL AND c2 IS NOT NULL AND v1 IS NOT NULL
   PRIMARY KEY (v1, v2, k, c1, c2);

// Error: must include k in the primary as it's a base table primary key column

CREATE MATERIALIZED VIEW mv1 AS
   SELECT * FROM t
   WHERE c1 IS NOT NULL AND c2 IS NOT NULL
   PRIMARY KEY (c1, c2);MV optionsA materialized view is internally implemented by a table and as such,
creating a MV allows thesame options than
creating a table <create-table-options>.ALTER MATERIALIZED VIEWAfter creation, you can alter the options of a materialized view using
theALTER MATERIALIZED VIEWstatement:alter_materialized_view_statement::= ALTER MATERIALIZED VIEW [ IF EXISTS ] view_name WITH table_optionsThe options that can be updated are the same than at creation time and
thus thesame than for tables
<create-table-options>. If the view does not exist, the statement will return an error, unlessIF EXISTSis used in which case the operation is a no-op.DROP MATERIALIZED VIEWDropping a materialized view using theDROP MATERIALIZED VIEWstatement:drop_materialized_view_statement::= DROP MATERIALIZED VIEW [ IF EXISTS ] view_name;If the materialized view does not exists, the statement will return an
error, unlessIF EXISTSis used in which case the operation is a
no-op.MV LimitationsRemoval of columns not selected in the Materialized View (viaUPDATE base SET unselected_column = nullorDELETE unselected_column FROM base) may shadow missed updates to other
columns received by hints or repair. For this reason, we advise against
doing deletions on base columns not selected in views until this is
fixed on CASSANDRA-13826.Get started with Cassandra, fast.Quickstart GuideApache Cassandrapowers mission-critical deployments with improved performance and unparalleled levels of scale in the cloud.HomeCassandra BasicsQuickstartEcosystemDocumentationCommunityCase StudiesResourcesBlogFoundationEventsLicenseThanksSecurityPrivacySponsorshipÂ© 2009-The Apache Software Foundationunder the terms of the Apache License 2.0.  Apache, the Apache feather logo, Apache Cassandra, Cassandra, and the Cassandra logo, are either registered trademarks or trademarks of The Apache Software Foundation.