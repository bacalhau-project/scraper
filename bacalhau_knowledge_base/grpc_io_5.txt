URL: https://grpc.io/docs/guides/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueDocsGuidesGuidesTask-oriented walkthroughs of common use casesThe documentation covers the following techniques:AuthenticationAn overview of gRPC authentication, including built-in auth mechanisms, and how to plug in your own authentication systems.BenchmarkinggRPC is designed to support high-performance open-source RPCs in many languages. This page describes performance benchmarking tools, scenarios considered by tests, and the testing infrastructure.CancellationExplains how and when to cancel RPCs.CompressionHow to compress the data sent over the wire while using gRPC.Custom Backend MetricsA mechanism in the gRPC library that allows users to inject custom metrics at the gRPC server and consume at gRPC clients to make your custom load balancing algorithms.Custom Load Balancing PoliciesExplains how custom load balancing policies can help optimize load balancing under unique circumstances.Custom Name ResolutionExplains standard name resolution, the custom name resolver interface, and how to write an implementation.DeadlinesExplains how deadlines can be used to effectively deal with unreliable backends.DebuggingExplains the debugging process of gRPC applications using grpcdebugError handlingHow gRPC deals with errors, and gRPC error codes.Flow ControlExplains what flow control is and how you can manually control it.Health CheckingExplains how gRPC servers expose a health checking service and how client can be configured to automatically check the health of the server it is connecting to.InterceptorsExplains how interceptors can be used for implementing generic behavior that applies to many RPC methods.KeepaliveHow to use HTTP/2 PING-based keepalives in gRPC.MetadataExplains what metadata is, how it is transmitted, and what it is used for.OpenTelemetry MetricsOpenTelemetry Metrics available in gRPCPerformance Best PracticesA user guide of both general and language-specific best practices to improve performance.ReflectionExplains how reflection can be used to improve the transparency and interpretability of RPCs.Request HedgingExplains what request hedging is and how you can configure it.RetrygRPC takes the stress out of failures! Get fine-grained retry control and detailed insights with OpenCensus and OpenTelemetry support.Service ConfigHow the service config can be used by service owners to control client behavior.Status CodesExplains the status codes used in gRPC.Wait-for-ReadyExplains how to configure RPCs to wait for the server to be ready before sending the request.Last modified July 25, 2024:place guides in main menu (#1319) (3b59eaa)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueÂ© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About