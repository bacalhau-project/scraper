URL: https://docs.bacalhau.org/setting-up/workload-onboarding/python/building-and-running-custom-python-container

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookBuilding and Running Custom Python ContainerIntroductionIn this tutorial example, we will walk you through building your own Python container and running the container on Bacalhau.PrerequisitesTo get started, you need to install the Bacalhau client, see more informationhere1. Sample Recommendation DatasetWe will be using a simple recommendation script that, when given a movie ID, recommends other movies based on user ratings. Assuming you want recommendations for the movie 'Toy Story' (1995), it will suggest movies from similar categories:CopyRecommendations for Toy Story (1995):1  :  Toy Story (1995)58  :  Postino, Il (The Postman) (1994)3159  :  Fantasia 2000 (1999)359  :  I Like It Like That (1994)756  :  Carmen Miranda: Bananas Is My Business (1994)618  :  Two Much (1996)48  :  Pocahontas (1995)2695  :  Boys, The (1997)2923  :  Citizen's Band (a.k.a. Handle with Care) (1977)688  :  Operation Dumbo Drop (1995)Downloading the datasetDownload Movielens1M dataset from this linkhttps://files.grouplens.org/datasets/movielens/ml-1m.zipCopywget https://files.grouplens.org/datasets/movielens/ml-1m.zipIn this example, we’ll be using 2 files from the MovieLens 1M dataset:ratings.datandmovies.dat. After the dataset is downloaded, extract the zip and placeratings.datandmovies.datinto a folder calledinput:Copy# Extracting the downloaded zip fileunzip ml-1m.zipCopy#moving  ratings.dat and movies.dat into a folder called 'input'mkdir input; mv ml-1m/movies.dat ml-1m/ratings.dat input/The structure of the input directory should beCopyinput├── movies.dat└── ratings.datInstalling DependenciesTo create arequirements.txtfor the Python libraries we’ll be using, create:Copy# content of the requirements.txtnumpypandasTo install the dependencies, run:Copypipinstall-rrequirements.txtWriting the ScriptCreate a new file calledsimilar-movies.pyand in it paste the following scriptCopy# content of the similar-movies.py# Importsimportnumpyasnpimportpandasaspdimportargparsefromdistutils.dir_utilimportmkpathimportwarningswarnings.filterwarnings("ignore")# Read the files with pandasdata=pd.io.parsers.read_csv('input/ratings.dat',names=['user_id','movie_id','rating','time'],engine='python', delimiter='::', encoding='latin-1')movie_data=pd.io.parsers.read_csv('input/movies.dat',names=['movie_id','title','genre'],engine='python', delimiter='::', encoding='latin-1')# Create the ratings matrix of shape (m×u) with rows as movies and columns as usersratings_mat=np.ndarray(shape=((np.max(data.movie_id.values)), np.max(data.user_id.values)),dtype=np.uint8)ratings_mat[data.movie_id.values-1,data.user_id.values-1]=data.rating.values# Normalise matrix (subtract mean off)normalised_mat=ratings_mat-np.asarray([(np.mean(ratings_mat,1))]).T# Compute SVDnormalised_mat=ratings_mat-np.matrix(np.mean(ratings_mat,1)).Tcov_mat=np.cov(normalised_mat)evals,evecs=np.linalg.eig(cov_mat)# Calculate cosine similarity, sort by most similar, and return the top N.deftop_cosine_similarity(data,movie_id,top_n=10):index=movie_id-1# Movie id starts from 1movie_row=data[index,:]magnitude=np.sqrt(np.einsum('ij, ij -> i', data, data))similarity=np.dot(movie_row, data.T)/(magnitude[index]*magnitude)sort_indexes=np.argsort(-similarity)returnsort_indexes[:top_n]# Helper function to print top N similar moviesdefprint_similar_movies(movie_data,movie_id,top_indexes):print('Recommendations for{0}: \n'.format(movie_data[movie_data.movie_id==movie_id].title.values[0]))foridintop_indexes+1:print(str(id),' : ',movie_data[movie_data.movie_id==id].title.values[0])parser=argparse.ArgumentParser(description='Personal information')parser.add_argument('--k', dest='k', type=int, help='principal components to represent the movies',default=50)parser.add_argument('--id', dest='id', type=int, help='Id of the movie',default=1)parser.add_argument('--n', dest='n', type=int, help='No of recommendations',default=10)args=parser.parse_args()k=args.kmovie_id=args.id# Grab an id from movies.dattop_n=args.n# k = 50# # Grab an id from movies.dat# movie_id = 1# top_n = 10sliced=evecs[:,:k]# representative datatop_indexes=top_cosine_similarity(sliced, movie_id, top_n)print_similar_movies(movie_data, movie_id, top_indexes)What thesimilar-movies.pyscript doesRead the files with pandas. The code uses Pandas to read data from the filesratings.datandmovies.dat.Create the ratings matrix of shape (m×u) with rows as movies and columns as userNormalise matrix (subtract mean off). The ratings matrix is normalized by subtracting the mean off.Compute SVD: a singular value decomposition (SVD) of the normalized ratings matrix is performed.Calculate cosine similarity, sort by most similar, and return the top N.Select k principal components to represent the movies, amovie_idto find recommendations, and print thetop_nresults.For further reading on how the script works, go toSimple Movie Recommender Using SVD | AlyssaRunning the ScriptRunning the scriptsimilar-movies.pyusing the default values:Copypython similar-movies.pyYou can also use other flags to set your own values.2. Setting Up DockerWe will create aDockerfileand add the desired configuration to the file. These commands specify how the image will be built, and what extra requirements will be included.CopyFROMpython:3.8ADDsimilar-movies.py .ADD/input inputCOPY./requirements.txt /requirements.txtRUNpip install -r requirements.txtWe will use thepython:3.8docker image and add our scriptsimilar-movies.pyto copy the script to the docker image, similarly, we also add thedatasetdirectory and also therequirements, after that run the command to install the dependencies in the imageThe final folder structure will look like this:Copy├── Dockerfile├── input│   ├── movies.dat│   └── ratings.dat├── requirements.txt└── similar-movies.pySee more information on how to containerize your script/apphereBuild the containerWe will rundocker buildcommand to build the container:Copydocker build -t <hub-user>/<repo-name>:<tag> .Before running the command replace:hub-userwith your docker hub username, If you don’t have a docker hub accountfollow these instructions to create a docker account, and use the username of the account you createdrepo-namewith the name of the container, you can name it anything you wanttagthis is not required, but you can use thelatesttagIn our case:Copydocker build -t jsace/python-similar-movies .Push the containerNext, upload the image to the registry. This can be done by using theDocker hub username,repo nameortag.Copydocker push <hub-user>/<repo-name>:<tag>In our case:Copydocker push jsace/python-similar-movies3. Running a Bacalhau JobAfter the repo image has been pushed to Docker Hub, we can now use the container for running on Bacalhau. You can submit a Bacalhau job by running your container on Bacalhau with default or custom parameters.Running the Container with Default ParametersTo submit a Bacalhau job by running your container on Bacalhau with default parameters, run the following Bacalhau command:CopyexportJOB_ID=$(bacalhaudockerrun\--id-only\--wait\jsace/python-similar-movies\--pythonsimilar-movies.py)Structure of the commandbacalhau docker run: call to Bacalhaujsace/python-similar-movies: the name and of the docker image we are using-- python similar-movies.py: execute the Python scriptWhen a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on.Running the Container with Custom ParametersTo submit a Bacalhau job by running your container on Bacalhau with custom parameters, run the following Bacalhau command:Copybacalhau docker run \jsace/python-similar-movies \-- python similar-movies.py --k 50 --id 10 --n 10Structure of the commandbacalhau docker run: call to Bacalhaujsace/python-similar-movies: the name of the docker image we are using-- python similar-movies.py --k 50 --id 10 --n 10: execute the python script. The script will use Singular Value Decomposition (SVD) and cosine similarity to find 10 movies most similar to the one with identifier 10, using 50 principal components.4. Checking the State of your JobsJob status: You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysPublishedorCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (results) and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presultsbacalhaujobget$JOB_ID--output-dirresults5. Viewing your Job OutputTo view the file, run the following command:Copycat results/stdout # displays the contents of the fileSupportIf you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousPythonNextRunning Pandas on BacalhauLast updated2 months agoOn this pageIntroductionPrerequisites1. Sample Recommendation Dataset2. Setting Up Docker3. Running a Bacalhau Job4. Checking the State of your Jobs5. Viewing your Job OutputSupportWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.