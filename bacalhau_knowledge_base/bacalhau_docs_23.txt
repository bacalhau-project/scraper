URL: https://docs.bacalhau.org/setting-up/running-node/resource-limits

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookLimits and TimeoutsResource LimitsThese are the flags that control the capacity of the Bacalhau node, and the limits for jobs that might be run.Copy--limit-job-cpustringJobCPUcorelimitforsinglejob(e.g.500m,2,8).--limit-job-gpustringJobGPUlimitforsinglejob(e.g.1,2,or8).--limit-job-memorystringJobMemorylimitforsinglejob(e.g.500Mb,2Gb,8Gb).--limit-total-cpustringTotalCPUcorelimittorunalljobs(e.g.500m,2,8).--limit-total-gpustringTotalGPUlimittorunalljobs(e.g.1,2,or8).--limit-total-memorystringTotalMemorylimittorunalljobs(e.g.500Mb,2Gb,8Gb).The--limit-total-*flags control the total system resources you want to give to the network. If left blank, the system will attempt to detect these values automatically.The--limit-job-*flags control the maximum amount of resources a single job can consume for it to be selected for execution.Resource limits are not supported for Docker jobs running on Windows. Resource limits will be applied at the job bid stage based on reported job requirements but will be silently unenforced. Jobs will be able to access as many resources as requested at runtime.​Windows SupportRunning a Windows-based node is not officially supported, so your mileage may vary. Some features (likeresource limits) are not present in Windows-based nodes.Bacalhau currently makes the assumption that all containers are Linux-based. Users of the Docker executor will need to manually ensure that their Docker engine is running andconfigured appropriatelyto support Linux containers, e.g. using the WSL-based backend.​TimeoutsBacalhau can limit the total time a job spends executing. A job that spends too long executing will be cancelled, and no results will be published.By default, a Bacalhau node does not enforce any limit on job execution time. Both node operators and job submitters can supply a maximum execution time limit. If a job submitter asks for a longer execution time than permitted by a node operator, their job will be rejected.Applying job timeouts allows node operators to more fairly distribute the work submitted to their nodes. It also protects users from transient errors that result in their jobs waiting indefinitely.​Configuring Execution Time LimitsJobNodeJob submitters can pass the--timeoutflag to any Bacalhau job submission CLI to set a maximum job execution time. The supplied value should be a whole number of seconds with no unit.The timeout can also be added to an existing job spec by adding theTimeoutproperty to theSpec.Node operators can pass the--max-job-execution-timeoutflag tobacalhau serveto configure the maximum job time limit. The supplied value should be a numeric value followed by a time unit (one ofsfor seconds,mfor minutes orhfor hours).Node operators can also use configuration properties to configure execution limits.Compute nodes will use the properties:Config propertyMeaningNode.Compute.JobTimeouts.MinJobExecutionTimeoutThe minimum acceptable value for a job timeout. A job will only be accepted if it is submitted with a timeout of longer than this value.Node.Compute.JobTimeouts.MaxJobExecutionTimeoutThe maximum acceptable value for a job timeout. A job will only be accepted if it is submitted with a timeout of shorter than this value.Node.Compute.JobTimeouts.DefaultJobExecutionTimeoutThe job timeout that will be applied to jobs that are submitted without a timeout value.Requester nodes will use the properties:Config propertyMeaningNode.Requester.Timeouts.MinJobExecutionTimeoutIf a job is submitted with a timeout less than this value, the default job execution timeout will be used instead.Node.Requester.Timeouts.DefaultJobExecutionTimeoutThe timeout to use in the job if a timeout is missing or too small.PreviousConfiguring Transport Level SecurityNextTest Network LocallyLast updated1 month agoOn this pageResource LimitsWindows SupportTimeoutsConfiguring Execution Time LimitsWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.