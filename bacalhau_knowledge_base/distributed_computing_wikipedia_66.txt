URL: https://en.wikipedia.org/wiki/Distributed_computing#cite_note-4

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Introduction2Patterns3Parallel and distributed computing4History5Architectures6Applications7Examples8Theoretical foundationsToggle Theoretical foundations subsection8.1Models8.2An example8.3Complexity measures8.4Other problems8.5Election8.6Properties of distributed systems9See also10Notes11References12Further reading13External linksToggle the table of contentsDistributed computing51 languagesالعربيةБеларускаяБеларуская (тарашкевіца)БългарскиBosanskiCatalàČeštinaDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGaeilge한국어IdoBahasa IndonesiaItalianoעבריתქართულიҚазақшаLatviešuLietuviųMagyarМакедонскиമലയാളംBahasa MelayuМонголNederlands日本語Norsk bokmålNorsk nynorskPolskiPortuguêsRomânăРусскийSimple EnglishSlovenčinaСрпски / srpskiSuomiSvenskaதமிழ்TürkçeУкраїнськаاردوTiếng Việt粵語中文Edit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsWikimedia CommonsWikiquoteWikiversityAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaSystem with multiple networked computersNot to be confused withDecentralized computing.Distributed computingis a field ofcomputer sciencethat studiesdistributed systems, defined ascomputer systemswhose inter-communicating components are located on differentnetworked computers.[1][2]The components of a distributed system communicate and coordinate their actions bypassing messagesto one another in order to achieve a common goal. Three significant challenges of distributed systems are: maintainingconcurrencyof components, overcoming thelack of a global clock, and managing the independent failure of components.[1]When a component of one system fails, the entire system does not fail.[3]Examples of distributed systems vary fromSOA-based systemstomicroservicestomassively multiplayer online gamestopeer-to-peer applications. Distributed systems cost significantly more than monolithic architectures, primarily due to increased needs for additional hardware, servers, gateways, firewalls, new subnets, proxies, and so on.[4]Also, distributed systems are prone tofallacies of distributed computing. On the other hand, a well designed distributed system is more scalable, more durable, more changeable and more fine-tuned than amonolithic applicationdeployed on a single machine.[5]Acomputer programthat runs within a distributed system is called  adistributed program,[6]anddistributed programmingis the process of writing such programs.[7]There are many different types of implementations for the message passing mechanism, including pure HTTP,RPC-likeconnectors andmessage queues.[8]Distributed computingalso refers to the use of distributed systems to solve computational problems. Indistributed computing, a problem is divided into many tasks, each of which is solved by one or more computers,[9]which communicate with each other via message passing.[10]Introduction[edit]The worddistributedin terms such as "distributed system", "distributed programming", and "distributed algorithm" originally referred to computer networks where individual computers were physically distributed within some geographical area.[11]The terms are nowadays used in a much wider sense, even referring to autonomousprocessesthat run on the same physical computer and interact with each other by message passing.[10]While there is no single definition of a distributed system,[12]the following defining properties are commonly used as:There are several autonomous computational entities (computersornodes), each of which has its own localmemory.[13]The entities communicate with each other bymessage passing.[14]A distributed system may have a common goal, such as solving a large computational problem;[15]the user then perceives the collection of autonomous processors as a unit. Alternatively, each computer may have its own user with individual needs, and the purpose of the distributed system is to coordinate the use of shared resources or provide communication services to the users.[16]Other typical properties of distributed systems include the following:The system has totolerate failuresin individual computers.[17]The structure of the system (network topology, network latency, number of computers) is not known in advance, the system may consist of different kinds of computers and network links, and the system may change during the execution of a distributed program.[18]Each computer has only a limited, incomplete view of the system. Each computer may know only one part of the input.[19]Patterns[edit]Here are commonarchitectural patternsused for distributed computing:[20]Saga patternMicroservicesEvent driven architectureParallel and distributed computing[edit](a), (b): a distributed system.(c): a parallel system.Distributed systems are groups of networked computers which share a common goal for their work.
The terms "concurrent computing", "parallel computing", and "distributed computing" have much overlap, and no clear distinction exists between them.[21]The same system may be characterized both as "parallel" and "distributed"; the processors in a typical distributed system run concurrently in parallel.[22]Parallel computing may be seen as a particularly tightly coupled form of distributed computing,[23]and distributed computing may be seen as a loosely coupled form of parallel computing.[12]Nevertheless, it is possible to roughly classify concurrent systems as "parallel" or "distributed" using the following criteria:In parallel computing, all processors may have access to ashared memoryto exchange information between processors.[24]In distributed computing, each processor has its own private memory (distributed memory). Information is exchanged by passing messages between the processors.[25]The figure on the right illustrates the difference between distributed and parallel systems. Figure (a) is a schematic view of a typical distributed system; the system is represented as a network topology in which each node is a computer and each line connecting the nodes is a communication link. Figure (b) shows the same distributed system in more detail: each computer has its own local memory, and information can be exchanged only by passing messages from one node to another by using the available communication links. Figure (c) shows a parallel system in which each processor has a direct access to a shared memory.The situation is further complicated by the traditional uses of the terms parallel and distributedalgorithmthat do not quite match the above definitions of parallel and distributedsystems(seebelowfor more detailed discussion). Nevertheless, as a rule of thumb, high-performance parallel computation in a shared-memory multiprocessor uses parallel algorithms while the coordination of a large-scale distributed system uses distributed algorithms.[26]History[edit]The use of concurrent processes which communicate through message-passing has its roots inoperating systemarchitectures studied in the 1960s.[27]The first widespread distributed systems werelocal-area networkssuch asEthernet, which was invented in the 1970s.[28]ARPANET, one of the predecessors of theInternet, was introduced in the late 1960s, and ARPANETe-mailwas invented in the early 1970s. E-mail became the most successful application of ARPANET,[29]and it is probably the earliest example of a large-scaledistributed application. In addition to ARPANET (and its successor, the global Internet), other early worldwide computer networks includedUsenetandFidoNetfrom the 1980s, both of which were used to support distributed discussion systems.[30]The study of distributed computing became its own branch of computer science in the late 1970s and early 1980s. The first conference in the field,Symposium on Principles of Distributed Computing(PODC), dates back to 1982, and its counterpartInternational Symposium on Distributed Computing(DISC) was first held in Ottawa in 1985 as the International Workshop on Distributed Algorithms on Graphs.[31]Architectures[edit]Various hardware and software architectures are used for distributed computing. At a lower level, it is necessary to interconnect multiple CPUs with some sort of network, regardless of whether that network is printed onto a circuit board or made up of loosely coupled devices and cables. At a higher level, it is necessary to interconnectprocessesrunning on those CPUs with some sort ofcommunication system.[32]Whether these CPUs share resources or not determines a first distinction between three types of architecture:Shared memoryShared diskShared nothing.Distributed programming typically falls into one of several basic architectures:client–server,three-tier,n-tier, orpeer-to-peer; or categories:loose coupling, ortight coupling.[33]Client–server: architectures where smart clients contact the server for data then format and display it to the users. Input at the client is committed back to the server when it represents a permanent change.Three-tier: architectures that move the client intelligence to a middle tier so thatstatelessclients can be used. This simplifies application deployment. Most web applications are three-tier.n-tier: architectures that refer typically to web applications which further forward their requests to other enterprise services. This type of application is the one most responsible for the success ofapplication servers.Peer-to-peer: architectures where there are no special machines that provide a service or manage the network resources.[34]: 227Instead all responsibilities are uniformly divided among all machines, known as peers. Peers can serve both as clients and as servers.[35]Examples of this architecture includeBitTorrentand thebitcoin network.Another basic aspect of distributed computing architecture is the method of communicating and coordinating work among concurrent processes. Through various message passing protocols, processes may communicate directly with one another, typically in amain/subrelationship. Alternatively, a"database-centric" architecturecan enable distributed computing to be done without any form of directinter-process communication, by utilizing a shareddatabase.[36]Database-centric architecture in particular provides relational processing analytics in a schematic architecture allowing for live environment relay. This enables distributed computing functions both within and beyond the parameters of a networked database.[37]Applications[edit]Reasons for using distributed systems and distributed computing may include:The very nature of an application mayrequirethe use of a communication network that connects several computers: for example, data produced in one physical location and required in another location.There are many cases in which the use of a single computer would be possible in principle, but the use of a distributed system isbeneficialfor practical reasons. For example:It can allow for much larger storage and memory, faster compute, and higher bandwidth than a single machine.It can provide more reliability than a non-distributed system, as there is nosingle point of failure. Moreover, a distributed system may be easier to expand and manage than a monolithic uniprocessor system.[38]It may be more cost-efficient to obtain the desired level of performance by using aclusterof several low-end computers, in comparison with a single high-end computer.Examples[edit]Examples of distributed systems and applications of distributed computing include the following:[39]telecommunicationsnetworks:telephone networksandcellular networks,computer networkssuch as theInternet,wireless sensor networks,routing algorithms;network applications:World Wide Webandpeer-to-peer networks,massively multiplayer online gamesandvirtual realitycommunities,distributed databasesanddistributed database management systems,network file systems,distributed cache such asburst buffers,distributed information processing systems such as banking systems and airline reservation systems;real-time process control:aircraftcontrol systems,industrial control systems;parallel computation:scientific computing, includingcluster computing,grid computing,cloud computing,[40]and variousvolunteer computing projects,distributed renderingin computer graphics.peer-to-peerTheoretical foundations[edit]Main article:Distributed algorithmModels[edit]Many tasks that we would like to automate by using a computer are of question–answer type: we would like to ask a question and the computer should produce an answer. Intheoretical computer science, such tasks are calledcomputational problems. Formally, a computational problem consists ofinstancestogether with asolutionfor each instance. Instances are questions that we can ask, and solutions are desired answers to these questions.Theoretical computer science seeks to understand which computational problems can be solved by using a computer (computability theory) and how efficiently (computational complexity theory). Traditionally, it is said that a problem can be solved by using a computer if we can design analgorithmthat produces a correct solution for any given instance. Such an algorithm can be implemented as acomputer programthat runs on a general-purpose computer: the program reads a problem instance frominput, performs some computation, and produces the solution asoutput. Formalisms such asrandom-access machinesoruniversal Turing machinescan be used as abstract models of a sequential general-purpose computer executing such an algorithm.[41][42]The field of concurrent and distributed computing studies similar questions in the case of either multiple computers, or a computer that executes a network of interacting processes: which computational problems can be solved in such a network and how efficiently? However, it is not at all obvious what is meant by "solving a problem" in the case of a concurrent or distributed system: for example, what is the task of the algorithm designer, and what is the concurrent or distributed equivalent of a sequential general-purpose computer?[citation needed]The discussion below focuses on the case of multiple computers, although many of the issues are the same for concurrent processes running on a single computer.Three viewpoints are commonly used:Parallel algorithms in shared-memory modelAll processors have access to a shared memory. The algorithm designer chooses the program executed by each processor.One theoretical model is theparallel random-access machines(PRAM) that are used.[43]However, the classical PRAM model assumes synchronous access to the shared memory.Shared-memory programs can be extended to distributed systems if the underlying operating system encapsulates the communication between nodes and virtually unifies the memory across all individual systems.A model that is closer to the behavior of real-world multiprocessor machines and takes into account the use of machine instructions, such asCompare-and-swap(CAS), is that ofasynchronous shared memory. There is a wide body of work on this model, a summary of which can be found in the literature.[44][45]Parallel algorithms in message-passing modelThe algorithm designer chooses the structure of the network, as well as the program executed by each computer.Models such asBoolean circuitsandsorting networksare used.[46]A Boolean circuit can be seen as a computer network: each gate is a computer that runs an extremely simple computer program. Similarly, a sorting network can be seen as a computer network: each comparator is a computer.Distributed algorithms in message-passing modelThe algorithm designer only chooses the computer program. All computers run the same program. The system must work correctly regardless of the structure of the network.A commonly used model is agraphwith onefinite-state machineper node.In the case of distributed algorithms, computational problems are typically related to graphs. Often the graph that describes the structure of the computer networkisthe problem instance. This is illustrated in the following example.[47]An example[edit]Consider the computational problem of finding a coloring of a given graphG. Different fields might take the following approaches:Centralized algorithms[47]The graphGis encoded as a string, and the string is given as input to a computer. The computer program finds a coloring of the graph, encodes the coloring as a string, and outputs the result.Parallel algorithmsAgain, the graphGis encoded as a string. However, multiple computers can access the same string in parallel. Each computer might focus on one part of the graph and produce a coloring for that part.The main focus is on high-performance computation that exploits the processing power of multiple computers in parallel.Distributed algorithmsThe graphGis the structure of the computer network. There is one computer for each node ofGand one communication link for each edge ofG. Initially, each computer only knows about its immediate neighbors in the graphG; the computers must exchange messages with each other to discover more about the structure ofG. Each computer must produce its own color as output.The main focus is on coordinating the operation of an arbitrary distributed system.[47]While the field of parallel algorithms has a different focus than the field of distributed algorithms, there is much interaction between the two fields. For example, theCole–Vishkin algorithmfor graph coloring[48]was originally presented as a parallel algorithm, but the same technique can also be used directly as a distributed algorithm.Moreover, a parallel algorithm can be implemented either in a parallel system (using shared memory) or in a distributed system (using message passing).[49]The traditional boundary between parallel and distributed algorithms (choose a suitable network vs. run in any given network) does not lie in the same place as the boundary between parallel and distributed systems (shared memory vs. message passing).Complexity measures[edit]In parallel algorithms, yet another resource in addition to time and space is the number of computers. Indeed, often there is a trade-off between the running time and the number of computers: the problem can be solved faster if there are more computers running in parallel (seespeedup). If a decision problem can be solved inpolylogarithmic timeby using a polynomial number of processors, then the problem is said to be in the classNC.[50]The class NC can be defined equally well by using the PRAM formalism or Boolean circuits—PRAM machines can simulate Boolean circuits efficiently and vice versa.[51]In the analysis of distributed algorithms, more attention is usually paid on communication operations than computational steps. Perhaps the simplest model of distributed computing is a synchronous system where all nodes operate in a lockstep fashion. This model is commonly known as the LOCAL model. During eachcommunication round, all nodes in parallel (1) receive the latest messages from their neighbours, (2) perform arbitrary local computation, and (3) send new messages to their neighbors. In such systems, a central complexity measure is the number of synchronous communication rounds required to complete the task.[52]This complexity measure is closely related to thediameterof the network. LetDbe the diameter of the network. On the one hand, any computable problem can be solved trivially in a synchronous distributed system in approximately 2Dcommunication rounds: simply gather all information in one location (Drounds), solve the problem, and inform each node about the solution (Drounds).On the other hand, if the running time of the algorithm is much smaller thanDcommunication rounds, then the nodes in the network must produce their output without having the possibility to obtain information about distant parts of the network. In other words, the nodes must make globally consistent decisions based on information that is available in theirlocal D-neighbourhood. Many distributed algorithms are known with the running time much smaller thanDrounds, and understanding which problems can be solved by such algorithms is one of the central research questions of the field.[53]Typically an algorithm which solves a problem in polylogarithmic time in the network size is considered efficient in this model.Another commonly used measure is the total number of bits transmitted in the network (cf.communication complexity).[54]The features of this concept are typically captured with the CONGEST(B) model, which is similarly defined as the LOCAL model, but where single messages can only contain B bits.Other problems[edit]Traditional computational problems take the perspective that the user asks a question, a computer (or a distributed system) processes the question, then produces an answer and stops. However, there are also problems where the system is required not to stop, including thedining philosophers problemand other similarmutual exclusionproblems. In these problems, the distributed system is supposed to continuously coordinate the use of shared resources so that no conflicts ordeadlocksoccur.There are also fundamental challenges that are unique to distributed computing, for example those related tofault-tolerance. Examples of related problems includeconsensus problems,[55]Byzantine fault tolerance,[56]andself-stabilisation.[57]Much research is also focused on understanding theasynchronousnature of distributed systems:Synchronizerscan be used to run synchronous algorithms in asynchronous systems.[58]Logical clocksprovide a causalhappened-beforeordering of events.[59]Clock synchronizationalgorithms provide globally consistent physical time stamps.[60]Note that in distributed systems,latencyshould be measured through "99th percentile" because "median" and "average" can be misleading.[61]Election[edit]Coordinator election(orleader election) is the process of designating a singleprocessas the organizer of some task distributed among several computers (nodes). Before the task is begun, all network nodes are either unaware which node will serve as the "coordinator" (or leader) of the task, or unable to communicate with the current coordinator. After a coordinator election algorithm has been run, however, each node throughout the network recognizes a particular, unique node as the task coordinator.[62]The network nodes communicate among themselves in order to decide which of them will get into the "coordinator" state. For that, they need some method in order to break the symmetry among them. For example, if each node has unique and comparable identities, then the nodes can compare their identities, and decide that the node with the highest identity is the coordinator.[62]The definition of this problem is often attributed to LeLann, who formalized it as a method to create a new token in a tokenring networkin which the token has been lost.[63]Coordinator election algorithms are designed to be economical in terms of totalbytestransmitted, and time. The algorithm suggested by Gallager, Humblet, and Spira[64]for general undirected graphs has had a strong impact on the design of distributed algorithms in general, and won theDijkstra Prizefor an influential paper in distributed computing.Many other algorithms were suggested for different kinds of networkgraphs, such as undirected rings, unidirectional rings, complete graphs, grids, directed Euler graphs, and others. A general method that decouples the issue of the graph family from the design of the coordinator election algorithm was suggested by Korach, Kutten, and Moran.[65]In order to perform coordination, distributed systems employ the concept of coordinators. The coordinator election problem is to choose a process from among a group of processes on different processors in a distributed system to act as the central coordinator. Several central coordinator election algorithms exist.[66]Properties of distributed systems[edit]So far the focus has been ondesigninga distributed system that solves a given problem. A complementary research problem isstudyingthe properties of a given distributed system.[67][68]Thehalting problemis an analogous example from the field of centralised computation: we are given a computer program and the task is to decide whether it halts or runs forever. The halting problem isundecidablein the general case, and naturally understanding the behaviour of a computer network is at least as hard as understanding the behaviour of one computer.[69]However, there are many interesting special cases that are decidable. In particular, it is possible to reason about the behaviour of a network of finite-state machines. One example is telling whether a given network of interacting (asynchronous and non-deterministic) finite-state machines can reach a deadlock. This problem isPSPACE-complete,[70]i.e., it is decidable, but not likely that there is an efficient (centralised, parallel or distributed) algorithm that solves the problem in the case of large networks.See also[edit]Actor modelAppScaleBOINCCode mobilityDataflow programmingDecentralized computingDistributed algorithmDistributed algorithmic mechanism designDistributed cacheDistributed GISDistributed networkingDistributed operating systemEventual consistencyEdsger W. Dijkstra Prize in Distributed ComputingFederation (information technology)Flat neighborhood networkFog computingFolding@homeGrid computingInfernoInternet GISJungle computingLayered queueing networkLibrary Oriented Architecture(LOA)List of distributed computing conferencesList of volunteer computing projectsModel checkingOpenHarmonyHarmonyOSParallel distributed processingParallel programming modelPlan 9 from Bell LabsShared nothing architectureWeb GISNotes[edit]^abTanenbaum, Andrew S.; Steen, Maarten van (2002).Distributed systems: principles and paradigms. Upper Saddle River, NJ: Pearson Prentice Hall.ISBN0-13-088893-1.Archivedfrom the original on 2020-08-12. Retrieved2020-08-28.^"Distributed Programs".Texts in Computer Science. London: Springer London. 2010. pp. 373–406.doi:10.1007/978-1-84882-745-5_11.ISBN978-1-84882-744-8.ISSN1868-0941.Systems consist of a number of physically distributed components that work independently using their private storage, but also communicate from time to time by explicit message passing. Such systems are called distributed systems.^Dusseau & Dusseau 2016, p. 1–2.^Ford, Neal (March 3, 2020).Fundamentals of Software Architecture: An Engineering Approach(1st ed.). O'Reilly Media. pp. 146–147.ISBN978-1492043454.^Monolith to Microservices Evolutionary Patterns to Transform Your Monolith. O'Reilly Media.ISBN9781492047810.^"Distributed Programs".Texts in Computer Science. London: Springer London. 2010. pp. 373–406.doi:10.1007/978-1-84882-745-5_11.ISBN978-1-84882-744-8.ISSN1868-0941.Distributed programs are abstract descriptions of distributed systems. A distributed program consists of a collection of processes that work concurrently and communicate by explicit message passing. Each process can access a set of variables which are disjoint from the variables that can be changed by any other process.^Andrews (2000).Dolev (2000).Ghosh (2007), p. 10.^Magnoni, L. (2015)."Modern Messaging for Distributed Sytems (sic)".Journal of Physics: Conference Series.608(1): 012038.doi:10.1088/1742-6596/608/1/012038.ISSN1742-6596.^Godfrey (2002).^abAndrews (2000), p. 291–292.Dolev (2000), p. 5.^Lynch (1996), p. 1.^abGhosh (2007), p. 10.^Andrews (2000), pp. 8–9, 291.Dolev (2000), p. 5.Ghosh (2007), p. 3.Lynch (1996), p. xix, 1.Peleg (2000), p. xv.^Andrews (2000), p. 291.Ghosh (2007), p. 3.Peleg (2000), p. 4.^Ghosh (2007), p. 3–4.Peleg (2000), p. 1.^Ghosh (2007), p. 4.Peleg (2000), p. 2.^Ghosh (2007), p. 4, 8.Lynch (1996), p. 2–3.Peleg (2000), p. 4.^Lynch (1996), p. 2.Peleg (2000), p. 1.^Ghosh (2007), p. 7.Lynch (1996), p. xix, 2.Peleg (2000), p. 4.^Fundamentals of Software Architecture: An Engineering Approach. O'Reilly Media. 2020.ISBN978-1492043454.^Ghosh (2007), p. 10.Keidar (2008).^Lynch (1996), p. xix, 1–2.Peleg (2000), p. 1.^Peleg (2000), p. 1.^Papadimitriou (1994), Chapter 15.Keidar (2008).^See references inIntroduction.^Bentaleb, A.; Yifan, L.; Xin, J.; et al. (2016)."Parallel and Distributed Algorithms"(PDF). National University of Singapore.Archived(PDF)from the original on 2017-03-26. Retrieved20 July2018.^Andrews (2000), p. 348.^Andrews (2000), p. 32.^Peter (2004),The history of emailArchived2009-04-15 at theWayback Machine.^Banks, M. (2012).On the Way to the Web: The Secret History of the Internet and its Founders. Apress. pp. 44–5.ISBN9781430250746.Archivedfrom the original on 2023-01-20. Retrieved2018-07-20.^Tel, G. (2000).Introduction to Distributed Algorithms. Cambridge University Press. pp. 35–36.ISBN9780521794831.Archivedfrom the original on 2023-01-20. Retrieved2018-07-20.^Ohlídal, M.; Jaroš, J.; Schwarz, J.; et al. (2006). "Evolutionary Design of OAB and AAB Communication Schedules for Interconnection Networks". In Rothlauf, F.; Branke, J.; Cagnoni, S. (eds.).Applications of Evolutionary Computing. Springer Science & Business Media. pp. 267–78.ISBN9783540332374.^"Real Time And Distributed Computing Systems"(PDF).ISSN2278-0661. Archived fromthe original(PDF)on 2017-01-10. Retrieved2017-01-09.{{cite journal}}:Cite journal requires|journal=(help)^Vigna P, Casey MJ.The Age of Cryptocurrency: How Bitcoin and the Blockchain Are Challenging the Global Economic OrderSt. Martin's Press January 27, 2015ISBN9781250065636^Quang Hieu Vu; Mihai Lupu; Beng Chin Ooi (2010).Peer-to-peer computing : principles and applications. Heidelberg: Springer. p. 16.ISBN9783642035135.OCLC663093862.^Lind P, Alm M (2006), "A database-centric virtual chemistry system",J Chem Inf Model,46(3): 1034–9,doi:10.1021/ci050360b,PMID16711722.^Chiu, G (1990). "A model for optimal database allocation in distributed computing systems".Proceedings. IEEE INFOCOM'90: Ninth Annual Joint Conference of the IEEE Computer and Communications Societies.^Elmasri & Navathe (2000), Section 24.1.2.^Andrews (2000), p. 10–11.Ghosh (2007), p. 4–6.Lynch (1996), p. xix, 1.Peleg (2000), p. xv.Elmasri & Navathe (2000), Section 24.^Haussmann, J. (2019). "Cost-efficient parallel processing of irregularly structured problems in cloud computing environments".Journal of Cluster Computing.22(3): 887–909.doi:10.1007/s10586-018-2879-3.S2CID54447518.^Toomarian, N.B.; Barhen, J.; Gulati, S. (1992)."Neural Networks for Real-Time Robotic Applications". In Fijany, A.; Bejczy, A. (eds.).Parallel Computation Systems For Robotics: Algorithms And Architectures. World Scientific. p. 214.ISBN9789814506175.Archivedfrom the original on 2020-08-01. Retrieved2018-07-20.^Savage, J.E. (1998).Models of Computation: Exploring the Power of Computing. Addison Wesley. p. 209.ISBN9780201895391.^Cormen, Leiserson & Rivest (1990), Section 30.^Herlihy & Shavit (2008), Chapters 2–6.^Lynch (1996)^Cormen, Leiserson & Rivest (1990), Sections 28 and 29.^abcTULSIRAMJI GAIKWAD-PATIL College of Engineering & Technology,

Nagpur

Department of Information Technology

Introduction to Distributed Systems[1]^Cole & Vishkin (1986).Cormen, Leiserson & Rivest (1990), Section 30.5.^Andrews (2000), p. ix.^Arora & Barak (2009), Section 6.7.Papadimitriou (1994), Section 15.3.^Papadimitriou (1994), Section 15.2.^Lynch (1996), p. 17–23.^Peleg (2000), Sections 2.3 and 7.Linial (1992).Naor & Stockmeyer (1995).^Schneider, J.; Wattenhofer, R. (2011)."Trading Bit, Message, and Time Complexity of Distributed Algorithms". In Peleg, D. (ed.).Distributed Computing. Springer Science & Business Media. pp. 51–65.ISBN9783642240997.Archivedfrom the original on 2020-08-01. Retrieved2018-07-20.^Lynch (1996), Sections 5–7.Ghosh (2007), Chapter 13.^Lynch (1996), p. 99–102.Ghosh (2007), p. 192–193.^Dolev (2000).Ghosh (2007), Chapter 17.^Lynch (1996), Section 16.Peleg (2000), Section 6.^Lynch (1996), Section 18.Ghosh (2007), Sections 6.2–6.3.^Ghosh (2007), Section 6.4.^Foundations of Data Intensive Applications Large Scale Data Analytics Under the Hood. 2021.ISBN9781119713012.^abHaloi, S. (2015).Apache ZooKeeper Essentials. Packt Publishing Ltd. pp. 100–101.ISBN9781784398323.Archivedfrom the original on 2023-01-20. Retrieved2018-07-20.^LeLann, G. (1977). "Distributed systems - toward a formal approach".Information Processing.77: 155·160 – via Elsevier.^R. G. Gallager, P. A. Humblet, and P. M. Spira (January 1983)."A Distributed Algorithm for Minimum-Weight Spanning Trees"(PDF).ACM Transactions on Programming Languages and Systems.5(1): 66–77.doi:10.1145/357195.357200.S2CID2758285.Archived(PDF)from the original on 2017-09-26.{{cite journal}}:  CS1 maint: multiple names: authors list (link)^Korach, Ephraim;Kutten, Shay;Moran, Shlomo(1990)."A Modular Technique for the Design of Efficient Distributed Leader Finding Algorithms"(PDF).ACM Transactions on Programming Languages and Systems.12(1): 84–101.CiteSeerX10.1.1.139.7342.doi:10.1145/77606.77610.S2CID9175968.Archived(PDF)from the original on 2007-04-18.^Hamilton, Howard."Distributed Algorithms".Archivedfrom the original on 2012-11-24. Retrieved2013-03-03.^"Major unsolved problems in distributed systems?".cstheory.stackexchange.com.Archivedfrom the original on 20 January 2023. Retrieved16 March2018.^"How big data and distributed systems solve traditional scalability problems".theserverside.com.Archivedfrom the original on 17 March 2018. Retrieved16 March2018.^Svozil, K. (2011)."Indeterminism and Randomness Through Physics". In Hector, Z. (ed.).Randomness Through Computation: Some Answers, More Questions. World Scientific. pp. 112–3.ISBN9789814462631.Archivedfrom the original on 2020-08-01. Retrieved2018-07-20.^Papadimitriou (1994), Section 19.3.References[edit]BooksAndrews, Gregory R. (2000),Foundations of Multithreaded, Parallel, and Distributed Programming,Addison–Wesley,ISBN978-0-201-35752-3.Arora, Sanjeev; Barak, Boaz (2009),Computational Complexity – A Modern Approach,Cambridge,ISBN978-0-521-42426-4.Cormen, Thomas H.;Leiserson, Charles E.;Rivest, Ronald L.(1990),Introduction to Algorithms(1st ed.),MIT Press,ISBN978-0-262-03141-7.Dolev, Shlomi(2000),Self-Stabilization,MIT Press,ISBN978-0-262-04178-2.Elmasri, Ramez;Navathe, Shamkant B.(2000),Fundamentals of Database Systems(3rd ed.),Addison–Wesley,ISBN978-0-201-54263-9.Ghosh, Sukumar (2007),Distributed Systems – An Algorithmic Approach, Chapman & Hall/CRC,ISBN978-1-58488-564-1.Lynch, Nancy A.(1996),Distributed Algorithms,Morgan Kaufmann,ISBN978-1-55860-348-6.Herlihy, Maurice P.;Shavit, Nir N.(2008),The Art of Multiprocessor Programming,Morgan Kaufmann,ISBN978-0-12-370591-4.Papadimitriou, Christos H.(1994),Computational Complexity,Addison–Wesley,ISBN978-0-201-53082-7.Peleg, David(2000),Distributed Computing: A Locality-Sensitive Approach,SIAM,ISBN978-0-89871-464-7, archived fromthe originalon 2009-08-06, retrieved2009-07-16.ArticlesCole, Richard;Vishkin, Uzi(1986), "Deterministic coin tossing with applications to optimal parallel list ranking",Information and Control,70(1): 32–53,doi:10.1016/S0019-9958(86)80023-7.Keidar, Idit(2008),"Distributed computing column 32 – The year in review",ACM SIGACT News,39(4): 53–54,CiteSeerX10.1.1.116.1285,doi:10.1145/1466390.1466402,S2CID7607391, archived fromthe originalon 2014-01-16, retrieved2009-08-20.Linial, Nathan(1992), "Locality in distributed graph algorithms",SIAM Journal on Computing,21(1): 193–201,CiteSeerX10.1.1.471.6378,doi:10.1137/0221015.Naor, Moni;Stockmeyer, Larry(1995),"What can be computed locally?"(PDF),SIAM Journal on Computing,24(6): 1259–1277,CiteSeerX10.1.1.29.669,doi:10.1137/S0097539793254571,archived(PDF)from the original on 2013-01-08.Web sitesGodfrey, Bill (2002)."A primer on distributed computing".Archivedfrom the original on 2021-05-13. Retrieved2021-05-13.Peter, Ian (2004)."Ian Peter's History of the Internet".Archivedfrom the original on 2010-01-20. Retrieved2009-08-04.Further reading[edit]BooksAttiya, Hagitand Jennifer Welch (2004),Distributed Computing: Fundamentals, Simulations, and Advanced Topics, Wiley-InterscienceISBN0-471-45324-2.Christian Cachin; Rachid Guerraoui; Luís Rodrigues (2011),Introduction to Reliable and Secure Distributed Programming(2. ed.), Springer,Bibcode:2011itra.book.....C,ISBN978-3-642-15259-7Coulouris, George; et al. (2011),Distributed Systems: Concepts and Design (5th Edition), Addison-WesleyISBN0-132-14301-1.Faber, Jim (1998),Java Distributed Computing, O'Reilly,archivedfrom the original on 2010-08-24, retrieved2010-09-29:Java Distributed Computing by Jim Faber, 1998Archived2010-08-24 at theWayback MachineGarg, Vijay K. (2002),Elements of Distributed Computing, Wiley-IEEE PressISBN0-471-03600-5.Tel, Gerard (1994),Introduction to Distributed Algorithms, Cambridge University PressChandy, Mani; et al. (1988),Parallel Program Design, Addison-WesleyISBN0201058669Dusseau, Remzi H.; Dusseau, Andrea (2016).Operating Systems: Three Easy Pieces, Chapter 48 Distributed Systems(PDF). Archived fromthe original(PDF)on 31 August 2021. Retrieved8 October2021.ArticlesKeidar, Idit; Rajsbaum, Sergio, eds. (2000–2009),"Distributed computing column",ACM SIGACT News, archived fromthe originalon 2014-01-16, retrieved2009-08-16.Birrell, A. D.; Levin, R.; Schroeder, M. D.;Needham, R. M.(April 1982)."Grapevine: An exercise in distributed computing"(PDF).Communications of the ACM.25(4): 260–274.doi:10.1145/358468.358487.S2CID16066616.Archived(PDF)from the original on 2016-07-30.Conference PapersRodriguez, Carlos; Villagra, Marcos; Baran, Benjamin (2007). "Asynchronous team algorithms for Boolean Satisfiability".2007 2nd Bio-Inspired Models of Network, Information and Computing Systems. pp. 66–69.doi:10.1109/BIMNICS.2007.4610083.S2CID15185219.External links[edit]Wikiquote has quotations related toDistributed computing.Media related toDistributed computingat Wikimedia CommonsDistributed computingatCurlieDistributed computing journalsatCurlievteParallel computingGeneralDistributed computingParallel computingMassively parallelCloud computingHigh-performance computingMultiprocessingManycore processorGPGPUComputer networkSystolic arrayLevelsBitInstructionThreadTaskDataMemoryLoopPipelineMultithreadingTemporalSimultaneous(SMT)Simultaneous and heterogenousSpeculative(SpMT)PreemptiveCooperativeClustered multi-thread(CMT)Hardware scoutTheoryPRAM modelPEM modelAnalysis of parallel algorithmsAmdahl's lawGustafson's lawCost efficiencyKarp–Flatt metricSlowdownSpeedupElementsProcessThreadFiberInstruction windowArrayCoordinationMultiprocessingMemory coherenceCache coherenceCache invalidationBarrierSynchronizationApplication checkpointingProgrammingStream processingDataflow programmingModelsImplicit parallelismExplicit parallelismConcurrencyNon-blocking algorithmHardwareFlynn's taxonomySISDSIMDArray processing(SIMT)Pipelined processingAssociative processingMISDMIMDDataflow architecturePipelined processorSuperscalar processorVector processorMultiprocessorsymmetricasymmetricMemoryshareddistributeddistributed sharedUMANUMACOMAMassively parallelcomputerComputer clusterBeowulf clusterGrid computerHardware accelerationAPIsAteji PXBoostChapelHPXCharm++CilkCoarray FortranCUDADryadC++ AMPGlobal ArraysGPUOpenMPIOpenMPOpenCLOpenHMPPOpenACCParallel ExtensionsPVMpthreadsRaftLibROCmUPCTBBZPLProblemsAutomatic parallelizationDeadlockDeterministic algorithmEmbarrassingly parallelParallel slowdownRace conditionSoftware lockoutScalabilityStarvationCategory: Parallel computingAuthority control databasesInternationalFASTNationalSpainFranceBnF dataGermanyIsraelUnited StatesLatviaOtherIdRefRetrieved from "https://en.wikipedia.org/w/index.php?title=Distributed_computing&oldid=1241355461"Category:Distributed computingHidden categories:Webarchive template wayback linksCS1 errors: missing periodicalCS1 maint: multiple names: authors listArticles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from October 2016Commons category link from WikidataArticles with Curlie linksThis page was last edited on 20 August 2024, at 18:18(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view