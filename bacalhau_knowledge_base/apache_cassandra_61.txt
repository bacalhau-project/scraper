URL: https://cassandra.apache.org/doc/latest/cassandra/architecture/overview.html

Get StartedCassandra BasicsQuickstartEcosystemDocumentationCommunityWelcomeDiscussionsGovernanceContributeMeet the CommunityCatalyst ProgramEventsLearnCassandra 5.0Case StudiesResourcesBlogDownload NowCassandra DocumentationVersion:5.0mastertrunk5.04.14.03.11MainGlossaryHow to report bugsContact usDevelopmentGetting startedBuilding and IDE integrationTestingContributing code changesCode styleReview checklistHow to commitWorking on documentationJenkins CI environmentDependency managementRelease processCassandraFAQGetting StartedCassandra QuickstartSAI QuickstartVector Search QuickstartInstalling CassandraConfiguring CassandraInserting and queryingClient driversProduction recommendationsWhat’s newSupport for JavaArchitectureOverviewDynamoStorage EngineGuaranteesImproved Internode MessagingImproved StreamingData ModelingIntroductionConceptual data modelingRDBMS designDefining application queriesLogical data modelingPhysical data modelingEvaluating and refining data modelsDefining database schemaCassandra data modeling toolsCassandra Query Language (CQL)DefinitionsData typesData definition (DDL)Data manipulation (DML)Dynamic Data Masking (DDM)OperatorsIndexing conceptsSAI OverviewConceptsSAI QuickstartSAI FAQWorking with SAISAI operationsSecondary indexes (2i) overviewConceptsWorking with 2iRebuild 2iMaterialized viewsFunctionsJSONSecurityTriggersAppendicesChangesSASISingle file of CQL informationVector Search overviewConceptsData ModelingVector Search QuickstartWorking with Vector SearchManagingConfiguringcassandra.yamlcassandra-rackdc.propertiescassandra-env.shcassandra-topologies.propertiescommitlog-archiving.propertieslogback.xmljvm-* filesLiberating cassandra.yaml Parameters' Names from Their UnitsOperatingBackupsBloom filtersBulk loadingChange Data Capture (CDC)CompactionCompressionHardwareHintsLoggingAudit loggingAudit logging 2Full query loggingMonitoring metricsRepairRead repairSecuritySnitchesTopology changesTransient replicationVirtual tablesToolscqlsh: the CQL shellnodetoolSSTable toolscassandra-stressTroubleshootingFinding misbehaving nodesReading Cassandra logsUsing nodetoolUsing external tools to deep-diveReferenceALTER TABLECREATE INDEXCREATE CUSTOM INDEXCREATE TABLEDROP INDEXDROP TABLEPlug-insYou are viewing the documentation for a prerelease version.View LatestCassandraArchitectureOverviewEditOverviewApache Cassandra is an open-source, distributed NoSQL database.
It implements a partitioned wide-column storage model with eventually consistent semantics.Cassandra was initially designed atFacebookusing a staged event-driven architecture (SEDA).
This initial design implemented a combination of Amazon’sDynamodistributed storage and replication techniques and Google’sBigtabledata and storage engine model.
Dynamo and Bigtable were both developed to meet emerging requirements for scalable, reliable and highly available storage systems, but each had areas that could be improved.Apache Cassandra was designed as a best-in-class combination of both systems to meet emerging largescale, both in data footprint and query volume, storage requirements.
As applications began to require full global replication and always available low-latency reads and writes, a new kind of database model was required to meet these new requirements.
Relational database systems at that time struggled to meet the the requirements.Apache Cassandra was designed to meet these challenges with the following design objectives in mind:Full multi-primary database replicationGlobal availability at low latencyScaling out on commodity hardwareLinear throughput increase with each additional processorOnline load balancing and cluster growthPartitioned key-oriented queriesFlexible schemaFeaturesCassandra provides the Cassandra Query Language (CQL), an SQL-like
language, to create, modify, and delete database schema, as well as access data.
CQL allows users to organize data within a cluster of Cassandra nodes using:Keyspace: Defines how a dataset is replicated, per datacenter.
Replication is the number of copies saved per cluster.
Keyspaces contain tables.Table: Tables are composed of rows and columns.
Columns define the typed schema for a single datum in a table.
Tables are partitioned based on the columns provided in the partition key.
Cassandra tables can flexibly add new columns to tables with zero downtime.Partition: Defines the mandatory part of the primary key all rows in
Cassandra must have to identify the node in a cluster where the row is stored.
All performant queries supply the partition key in the query.Row: Contains a collection of columns identified by a unique primary
key made up of the partition key and optionally additional clustering
keys.Column: A single datum with a type which belongs to a row.CQL supports numerous advanced features over a partitioned dataset such
as:Collection types including sets, maps, and listsUser-defined types, tuples, functions and aggregatesStorage-attached indexing (SAI) for secondary indexesLocal secondary indexes (2i)User-defined types, functions and aggregatesSingle-partition lightweight transactions with atomic compare and set
semantics(Experimental) materialized viewsCassandra explicitly chooses not to implement operations that require
cross-partition coordination as they are typically slow and hard to
provide highly available global semantics.
For example, Cassandra does not support:Cross-partition transactionsDistributed joinsForeign keys or referential integrity.OperatingApache Cassandra configuration settings are configured in thecassandra.yamlfile that can be edited by hand or with the aid of configuration management tools.
Some settings can be manipulated live using an online interface, but others require a restart of the database
to take effect.Cassandra provides tools for managing a cluster.
Thenodetoolcommand interacts with Cassandra’s live control interface, allowing runtime
manipulation of many settings fromcassandra.yaml.
Theauditlogvieweris used to view the audit logs.
Thefqltoolis used to view, replay and compare full query logs.In addition, Cassandra supports out of the box atomic snapshot functionality, which presents a point in time (PIT) snapshot of Cassandra’s data for easy integration with many backup tools.
Cassandra also supports incremental backups where data can be backed up as it is written.Get started with Cassandra, fast.Quickstart GuideApache Cassandrapowers mission-critical deployments with improved performance and unparalleled levels of scale in the cloud.HomeCassandra BasicsQuickstartEcosystemDocumentationCommunityCase StudiesResourcesBlogFoundationEventsLicenseThanksSecurityPrivacySponsorshipÂ© 2009-The Apache Software Foundationunder the terms of the Apache License 2.0.  Apache, the Apache feather logo, Apache Cassandra, Cassandra, and the Cassandra logo, are either registered trademarks or trademarks of The Apache Software Foundation.