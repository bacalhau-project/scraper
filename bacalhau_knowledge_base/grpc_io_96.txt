URL: https://grpc.io/docs/guides/custom-backend-metrics/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueOverviewUse CasesMetrics ReportingImplementationLanguage SupportDocsGuidesCustom Backend MetricsCustom Backend MetricsA mechanism in the gRPC library that allows users to inject custom metrics at the gRPC server and consume at gRPC clients to make your custom load balancing algorithms.ContentsOverviewUse CasesMetrics ReportingImplementationLanguage SupportCustom Backend MetricsA mechanism in the gRPC library that allows users to inject custom metrics at the gRPC server and consume at gRPC clients to make your custom load balancing algorithms.OverviewSimple load balancing decisions can be made by taking into account local or
global knowledge of a backend’s load, for example CPU. More sophisticated
load balancing decisions are possible with application specific knowledge, e.g.
queue depth, or by combining multiple metrics.The custom backend metrics feature exposes APIs to allow users to implement
the metrics feedback in their LB policies.Use CasesThe feature is mainly for advanced use cases where a custom LB policy is used
to route traffic more intelligently to a list of backend servers to improve the
routing performance, e.g. a weighted round robin LB policy.gRPC traditionally allows users to plug in their own load balancing policies,
seeguide. For xDS users,custom load balancercan be configured to select the custom LB policy.Metrics ReportingOpen Request Cost Aggregation (ORCA) is an open standard for conveying backend
metrics information. gRPC uses ORCA service and metrics standards
and supports two metrics reporting mechanisms:Per-query metrics reporting: the backend server attaches the injected custom
metrics in the trailing metadata when the corresponding RPC finishes. This is
typically useful for short RPCs like unary calls.Out-of-band metrics reporting: the backend server periodically pushes metrics
data, e.g. cpu and memory utilization, to the client. This is useful for all
situations: unary calls, long RPCs in streaming calls, or no RPCs. However,
out-of-band metrics reporting does not send query cost metrics. The metrics
emission frequency is user-configurable, and this configuration resides in the
custom load balancing policy.The diagram shows the architecture where a user creates their own LB policy
that implements backend metrics feedback.ImplementationFor more details, please see gRPCproposal A51.Language SupportLanguageExampleJavaJava exampleGoGo exampleC++Example upcomingLast modified February 29, 2024:Use absolute paths instead of absolute URLs (#1268) (4f733b4)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About