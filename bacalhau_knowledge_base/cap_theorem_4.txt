Source: cap_theorem
URL: https://en.wikipedia.org/wiki/CAP_theorem#cite_note-Brewer2012-10

CAP theorem
In [database theory](/wiki/Database_theory), the CAP theorem, also named Brewer's theorem after computer scientist [Eric Brewer](/wiki/Eric_Brewer_(scientist)), states that any [distributed data store](/wiki/Distributed_data_store) can provide only [two of the following three](/wiki/Trilemma) guarantees:[[1]](#cite_note-Gilbert_Lynch-1)[[2]](#cite_note-2)[[3]](#cite_note-3)
[Consistency](/wiki/Consistency_model)- Every read receives the most recent write or an error.
[Availability](/wiki/Availability)- Every request received by a non-failing node in the system must result in a response. This is the definition of availability in CAP theorem as defined by Gilbert and Lynch.
[[1]](#cite_note-Gilbert_Lynch-1)Note that availability as defined in CAP theorem is different from[high availability](/wiki/High_availability)in software architecture.[[4]](#cite_note-4) [Partition tolerance](/wiki/Network_partitioning)- The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes.
When a [network partition](/wiki/Network_partition) failure happens, it must be decided whether to do one of the following:
- cancel the operation and thus decrease the availability but ensure consistency
- proceed with the operation and thus provide availability but risk inconsistency. Note this doesn't necessarily mean that system is
[highly available](/wiki/High_availability)to its users.[[5]](#cite_note-5)
![](//upload.wikimedia.org/wikipedia/commons/thumb/c/c6/CAP_Theorem_Venn_Diagram.png/220px-CAP_Theorem_Venn_Diagram.png)
![](http://upload.wikimedia.org/wikipedia/commons/thumb/c/c6/CAP_Theorem_Venn_Diagram.png/220px-CAP_Theorem_Venn_Diagram.png)
Thus, if there is a network partition, one has to choose between consistency or availability. Note that consistency as defined in the CAP theorem is quite different from the consistency guaranteed in [ACID](/wiki/ACID) [database transactions](/wiki/Database_transaction).[[6]](#cite_note-6)
Explanation
[[edit](/w/index.php?title=CAP_theorem&action=edit§ion=1)]
No distributed system is safe from network failures, thus network partitioning generally has to be tolerated.[[7]](#cite_note-7)[[8]](#cite_note-8) In the presence of a partition, one is then left with two options: consistency or [availability](/wiki/Availability). When choosing consistency over availability, the system will return an error or a time out if particular information cannot be guaranteed to be up to date due to network partitioning. When choosing availability over consistency, the system will always process the query and try to return the most recent available version of the information, even if it cannot guarantee it is up to date due to network partitioning.
In the absence of a partition, both availability and consistency can be satisfied.[[9]](#cite_note-paclec-9)
Database systems designed with traditional [ACID](/wiki/ACID) guarantees in mind such as [RDBMS](/wiki/Relational_database_management_system) choose [consistency](/wiki/Consistency_(database_systems)) over availability, whereas systems designed around the [BASE](/wiki/Eventual_consistency) philosophy, common in the [NoSQL](/wiki/NoSQL) movement for example, choose availability over consistency.[[10]](#cite_note-Brewer2012-10)
History
[[edit](/w/index.php?title=CAP_theorem&action=edit§ion=2)]
According to computer scientist [Eric Brewer](/wiki/Eric_Brewer_(scientist)) of the [University of California, Berkeley](/wiki/University_of_California,_Berkeley), the theorem first appeared in autumn 1998.[[10]](#cite_note-Brewer2012-10) It was published as the CAP principle in 1999[[11]](#cite_note-Brewer1999-11) and presented as a [conjecture](/wiki/Conjecture) by Brewer at the 2000 [Symposium on Principles of Distributed Computing](/wiki/Symposium_on_Principles_of_Distributed_Computing) (PODC).[[12]](#cite_note-Brewer2000-12) In 2002, [Seth Gilbert](/w/index.php?title=Seth_Gilbert&action=edit&redlink=1) and [Nancy Lynch](/wiki/Nancy_Lynch) of [MIT](/wiki/MIT) published a formal proof of Brewer's conjecture, rendering it a [theorem](/wiki/Theorem).[[1]](#cite_note-Gilbert_Lynch-1)
In 2012, Brewer clarified some of his positions, including why the often-used "two out of three" concept can be somewhat misleading because system designers only need to sacrifice consistency or availability in the presence of partitions; partition management and recovery techniques exist. Brewer also noted the different definition of consistency used in the CAP theorem relative to the definition used in [ACID](/wiki/ACID).[[10]](#cite_note-Brewer2012-10)[[13]](#cite_note-:0-13)
A similar theorem stating the trade-off between consistency and availability in distributed systems was published by Birman and Friedman in 1996.[[14]](#cite_note-14) Birman and Friedman's result restricted this lower bound to non-commuting operations.
The [PACELC theorem](/wiki/PACELC_theorem), introduced in 2010,[[9]](#cite_note-paclec-9) builds on CAP by stating that even in the absence of partitioning, there is another trade-off between latency and consistency. PACELC means, if partition (P) happens, the trade-off is between availability (A) and consistency (C); Else (E), the trade-off is between latency (L) and consistency (C).
See also
[[edit](/w/index.php?title=CAP_theorem&action=edit§ion=3)]
[Fallacies of distributed computing](/wiki/Fallacies_of_distributed_computing)[Lambda architecture](/wiki/Lambda_architecture)(solution)[PACELC theorem](/wiki/PACELC_theorem)[Paxos (computer science)](/wiki/Paxos_(computer_science))[Raft (computer science)](/wiki/Raft_(computer_science))[Zooko's triangle](/wiki/Zooko%27s_triangle)[Inconsistent triad](/wiki/Inconsistent_triad)[Trilemma](/wiki/Trilemma)
References
[[edit](/w/index.php?title=CAP_theorem&action=edit§ion=4)]
- ^
[a](#cite_ref-Gilbert_Lynch_1-0)[b](#cite_ref-Gilbert_Lynch_1-1)[c](#cite_ref-Gilbert_Lynch_1-2)Gilbert, Seth; Lynch, Nancy (2002). "Brewer's conjecture and the feasibility of consistent, available, partition-tolerant web services". ACM SIGACT News. 33 (2). Association for Computing Machinery (ACM): 51–59.[doi](/wiki/Doi_(identifier)):[10.1145/564585.564601](https://doi.org/10.1145%2F564585.564601).[ISSN](/wiki/ISSN_(identifier))[0163-5700](https://search.worldcat.org/issn/0163-5700).[S2CID](/wiki/S2CID_(identifier))[15892169](https://api.semanticscholar.org/CorpusID:15892169). [^](#cite_ref-2)["Brewer's CAP Theorem"](https://www.julianbrowne.com/article/brewers-cap-theorem/). julianbrowne.com. 2009-01-11.[^](#cite_ref-3)["Brewers CAP Theorem on distributed systems"](https://www.royans.net/2010/02/brewers-cap-theorem-on-distributed.html). royans.net. 2010-02-14.[^](#cite_ref-4)Fowler, Adam (2015). NoSQL For Dummies. For Dummies.[ISBN](/wiki/ISBN_(identifier))[978-8126554904](/wiki/Special:BookSources/978-8126554904).[^](#cite_ref-5)Fowler, Adam (2015). NoSQL For Dummies. For Dummies.[ISBN](/wiki/ISBN_(identifier))[978-8126554904](/wiki/Special:BookSources/978-8126554904).[^](#cite_ref-6)Liochon, Nicolas.["The confusing CAP and ACID wording"](http://blog.thislongrun.com/2015/03/the-confusing-cap-and-acid-wording.html). This long run. Retrieved 1 February 2019.[^](#cite_ref-7)Kleppmann, Martin (2015-09-18).[A Critique of the CAP Theorem](https://www.repository.cam.ac.uk/handle/1810/267054)(Report). Apollo - University of Cambridge Repository.[arXiv](/wiki/ArXiv_(identifier)):[1509.05393](https://arxiv.org/abs/1509.05393).[Bibcode](/wiki/Bibcode_(identifier)):[2015arXiv150905393K](https://ui.adsabs.harvard.edu/abs/2015arXiv150905393K).[doi](/wiki/Doi_(identifier)):[10.17863/CAM.13083](https://doi.org/10.17863%2FCAM.13083).[S2CID](/wiki/S2CID_(identifier))[1991487](https://api.semanticscholar.org/CorpusID:1991487). Retrieved 24 November 2019.[^](#cite_ref-8)Martin, Kleppmann.["Please stop calling databases CP or AP"](https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html). Martin Kleppmann's Blog. Retrieved 24 November 2019.- ^
[a](#cite_ref-paclec_9-0)[b](#cite_ref-paclec_9-1)Abadi, Daniel (2010-04-23).["DBMS Musings: Problems with CAP, and Yahoo's little known NoSQL system"](http://dbmsmusings.blogspot.com/2010/04/problems-with-cap-and-yahoos-little.html). DBMS Musings. Retrieved 2018-01-23. - ^
[a](#cite_ref-Brewer2012_10-0)[b](#cite_ref-Brewer2012_10-1)[c](#cite_ref-Brewer2012_10-2)Brewer, Eric (2012).["CAP twelve years later: How the "rules" have changed"](http://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed). Computer. 45 (2). Institute of Electrical and Electronics Engineers (IEEE): 23–29.[doi](/wiki/Doi_(identifier)):[10.1109/mc.2012.37](https://doi.org/10.1109%2Fmc.2012.37).[ISSN](/wiki/ISSN_(identifier))[0018-9162](https://search.worldcat.org/issn/0018-9162).[S2CID](/wiki/S2CID_(identifier))[890105](https://api.semanticscholar.org/CorpusID:890105). [^](#cite_ref-Brewer1999_11-0)Armando Fox; Eric Brewer (1999). Harvest, Yield and Scalable Tolerant Systems. Proc. 7th Workshop Hot Topics in Operating Systems (HotOS 99). IEEE CS. pp. 174–178.[doi](/wiki/Doi_(identifier)):[10.1109/HOTOS.1999.798396](https://doi.org/10.1109%2FHOTOS.1999.798396).[^](#cite_ref-Brewer2000_12-0)Eric Brewer.["Towards Robust Distributed Systems"](http://www.cs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf)(PDF).[^](#cite_ref-:0_13-0)Carpenter, Jeff; Hewitt, Eben (July 2016).[Cassandra: The Definitive Guide](https://www.oreilly.com/library/view/cassandra-the-definitive/9781491933657/)(2nd ed.). O'Reilly Media.[ISBN](/wiki/ISBN_(identifier))[9781491933657](/wiki/Special:BookSources/9781491933657).In February 2012, Eric Brewer provided an updated perspective on his CAP theorem ... Brewer now describes the "2 out of 3" axiom as somewhat misleading. He notes that designers only need sacrifice consistency or availability in the presence of partitions, and that advances in partition recovery techniques have made it possible for designers to achieve high levels of both consistency and availability.
[^](#cite_ref-14)Ken Birman; Roy Friedman (April 1996).["Trading Consistency for Availability in Distributed Systems"](https://ecommons.cornell.edu/handle/1813/7235).[hdl](/wiki/Hdl_(identifier)):[1813/7235](https://hdl.handle.net/1813%2F7235).
External links
[[edit](/w/index.php?title=CAP_theorem&action=edit§ion=5)]
[Spanner, TrueTime and the CAP Theorem](https://research.google.com/pubs/pub45855.html)[Perspectives on the CAP theorem](http://groups.csail.mit.edu/tds/papers/Gilbert/Brewer2.pdf): An update from Gilbert and Lynch in 2012