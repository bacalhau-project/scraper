URL: https://grpc.io/docs/guides/auth/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueOverviewSupported auth mechanismsAuthentication APICredential typesUsing client-side SSL/TLSUsing OAuth token-based authenticationUsing Google token-based authenticationExtending gRPC to support other authentication mechanismsLanguage guides and examplesLanguage guides and examples for OAuth token-based authenticationAdditional ExamplesRubyBase case - no encryption or authenticationWith server authentication SSL/TLSAuthenticate with GoogleNode.jsBase case - No encryption/authenticationWith server authentication SSL/TLSAuthenticate with GoogleAuthenticate with Google using OAuth2 token (legacy approach)With server authentication SSL/TLS and a custom header with tokenPHPBase case - No encryption/authorizationWith server authentication SSL/TLSAuthenticate with GoogleAuthenticate with Google using OAuth2 token (legacy approach)DartBase case - no encryption or authenticationWith server authentication SSL/TLSAuthenticate with GoogleAuthenticate a single RPC callDocsGuidesAuthenticationAuthenticationAn overview of gRPC authentication, including built-in auth mechanisms, and how to plug in your own authentication systems.ContentsOverviewSupported auth mechanismsAuthentication APICredential typesUsing client-side SSL/TLSUsing OAuth token-based authenticationUsing Google token-based authenticationExtending gRPC to support other authentication mechanismsLanguage guides and examplesLanguage guides and examples for OAuth token-based authenticationAdditional ExamplesRubyBase case - no encryption or authenticationWith server authentication SSL/TLSAuthenticate with GoogleNode.jsBase case - No encryption/authenticationWith server authentication SSL/TLSAuthenticate with GoogleAuthenticate with Google using OAuth2 token (legacy approach)With server authentication SSL/TLS and a custom header with tokenPHPBase case - No encryption/authorizationWith server authentication SSL/TLSAuthenticate with GoogleAuthenticate with Google using OAuth2 token (legacy approach)DartBase case - no encryption or authenticationWith server authentication SSL/TLSAuthenticate with GoogleAuthenticate a single RPC callAuthenticationAn overview of gRPC authentication, including built-in auth mechanisms, and how to plug in your own authentication systems.OverviewgRPC is designed to work with a variety of authentication mechanisms, making it
easy to safely use gRPC to talk to other systems. You can use our supported
mechanisms - SSL/TLS with or without Google token-based authentication - or you
can plug in your own authentication system by extending our provided code.gRPC also provides a simple authentication API that lets you provide all the
necessary authentication information asCredentialswhen creating a channel or
making a call.Supported auth mechanismsThe following authentication mechanisms are built-in to gRPC:SSL/TLS: gRPC has SSL/TLS integration and promotes the use of SSL/TLS
to authenticate the server, and to encrypt all the data exchanged between
the client and the server. Optional mechanisms are available for clients to
provide certificates for mutual authentication.ALTS: gRPC supportsALTSas a transport security mechanism, if the application is running onCompute EngineorGoogle Kubernetes Engine (GKE).
For details, see one of the following
language-specific pages:ALTS in C++,ALTS in Go,ALTS in Java,ALTS in Python.Token-based authentication with Google: gRPC provides a generic
mechanism (described below) to attach metadata based credentials to requests
and responses. Additional support for acquiring access tokens
(typically OAuth2 tokens) while accessing Google APIs through gRPC is
provided for certain auth flows: you can see how this works in our code
examples below. In general this mechanism must be usedas well asSSL/TLS
on the channel - Google will not allow connections without SSL/TLS, and
most gRPC language implementations will not let you send credentials on an
unencrypted channel.WarningGoogle credentials should only be used to connect to Google services. Sending
a Google issued OAuth2 token to a non-Google service could result in this
token being stolen and used to impersonate the client to Google services.Authentication APIgRPC provides a simple authentication API based around the unified concept of
Credentials objects, which can be used when creating an entire gRPC channel or
an individual call.Credential typesCredentials can be of two types:Channel credentials, which are attached to aChannel, such as SSL
credentials.Call credentials, which are attached to a call (orClientContextin
C++).You can also combine these in aCompositeChannelCredentials, allowing you to
specify, for example, SSL details for the channel along with call credentials
for each call made on the channel. ACompositeChannelCredentialsassociates aChannelCredentialsand aCallCredentialsto create a newChannelCredentials. The result will send the authentication data associated
with the composedCallCredentialswith every call made on the channel.For example, you could create aChannelCredentialsfrom anSslCredentialsand anAccessTokenCredentials. The result when applied to aChannelwould
send the appropriate access token for each call on this channel.IndividualCallCredentialscan also be composed usingCompositeCallCredentials. The resultingCallCredentialswhen used in a call
will trigger the sending of the authentication data associated with the twoCallCredentials.Using client-side SSL/TLSNow let’s look at howCredentialswork with one of our supported auth
mechanisms. This is the simplest authentication scenario, where a client just
wants to authenticate the server and encrypt all data. The example is in C++,
but the API is similar for all languages: you can see how to enable SSL/TLS in
more languages in our Examples section below.// Create a default SSL ChannelCredentials object.autochannel_creds=grpc::SslCredentials(grpc::SslCredentialsOptions());// Create a channel using the credentials created in the previous step.autochannel=grpc::CreateChannel(server_name, channel_creds);// Create a stub on the channel.std::unique_ptr<Greeter::Stub>stub(Greeter::NewStub(channel));// Make actual RPC calls on the stub.grpc::Status s=stub->sayHello(&context,*request, response);For advanced use cases such as modifying the root CA or using client certs,
the corresponding options can be set in theSslCredentialsOptionsparameter
passed to the factory method.NoteNon-POSIX-compliant systems (such as Windows) need to specify the root
certificates inSslCredentialsOptions, since the defaults are only
configured for POSIX filesystems.Using OAuth token-based authenticationOAuth 2.0 Protocol is the industry-standard protocol for authorization. It enables
websites or applications to obtain limited access to user accounts using OAuth tokens.gRPC offers a set of simple APIs to integrate OAuth 2.0 into applications, streamlining authentication.At a high level, using OAuth token-based authentication includes 3 steps:Get or generate an OAuth token on client side.You can generate Google-specific tokens following instructions below.Create credentials with the OAuth token.OAuth token is always part of per-call credentials, you can also attach the per-call credentials
to some channel credentials.The token will be sent to server, normally as part of HTTP Authorization header.Server side verifies the token.In most implementations, the validation is done using a server side interceptor.For details of how to use OAuth token in different languages, please refer to our examples below.Using Google token-based authenticationgRPC applications can use a simple API to create a credential that works for
authentication with Google in various deployment scenarios. Again, our example
is in C++ but you can find examples in other languages in our Examples section.autocreds=grpc::GoogleDefaultCredentials();// Create a channel, stub and make RPC calls (same as in the previous example)autochannel=grpc::CreateChannel(server_name, creds);std::unique_ptr<Greeter::Stub>stub(Greeter::NewStub(channel));grpc::Status s=stub->sayHello(&context,*request, response);This channel credentials object works for applications using Service Accounts as
well as for applications running inGoogle Compute Engine
(GCE). In the former case, the service
account’s private keys are loaded from the file named in the environment
variableGOOGLE_APPLICATION_CREDENTIALS. The keys are used to generate bearer
tokens that are attached to each outgoing RPC on the corresponding channel.For applications running in GCE, a default service account and corresponding
OAuth2 scopes can be configured during VM setup. At run-time, this credential
handles communication with the authentication systems to obtain OAuth2 access
tokens and attaches them to each outgoing RPC on the corresponding channel.Extending gRPC to support other authentication mechanismsThe Credentials plugin API allows developers to plug in their own type of
credentials. This consists of:TheMetadataCredentialsPluginabstract class, which contains the pure virtualGetMetadatamethod that needs to be implemented by a sub-class created by
the developer.TheMetadataCredentialsFromPluginfunction, which creates aCallCredentialsfrom theMetadataCredentialsPlugin.Here is example of a simple credentials plugin which sets an authentication
ticket in a custom header.classMyCustomAuthenticator:publicgrpc::MetadataCredentialsPlugin {public:MyCustomAuthenticator(constgrpc::string&ticket):ticket_(ticket) {}grpc::Status GetMetadata(grpc::string_ref service_url, grpc::string_ref method_name,constgrpc::AuthContext&channel_auth_context,std::multimap<grpc::string, grpc::string>*metadata)override{metadata->insert(std::make_pair("x-custom-auth-ticket", ticket_));returngrpc::Status::OK;}private:grpc::string ticket_;};autocall_creds=grpc::MetadataCredentialsFromPlugin(std::unique_ptr<grpc::MetadataCredentialsPlugin>(newMyCustomAuthenticator("super-secret-ticket")));A deeper integration can be achieved by plugging in a gRPC credentials
implementation at the core level. gRPC internals also allow switching out
SSL/TLS with other encryption mechanisms.Language guides and examplesThese authentication mechanisms will be available in all gRPC’s supported
languages. The following table links to examples demonstrating authentication
and authorization in various languages.LanguageExampleDocumentationC++N/AN/AGoGo ExampleGo DocumentationJavaJava Example TLS(Java Example ATLS)Java DocumentationPythonPython ExamplePython DocumentationLanguage guides and examples for OAuth token-based authenticationThe following table links to examples demonstrating OAuth token-based
authentication and authorization in various languages.LanguageExampleDocumentationC++N/AN/AGoGo OAuth ExampleGo OAuth DocumentationJavaJava OAuth ExampleJava OAuth DocumentationPythonPython OAuth ExamplePython OAuth DocumentationAdditional ExamplesThe following sections demonstrate how authentication and authorization features
described above appear in other languages not listed above.RubyBase case - no encryption or authenticationstub=Helloworld::Greeter::Stub.new('localhost:50051',:this_channel_is_insecure)...With server authentication SSL/TLScreds=GRPC::Core::ChannelCredentials.new(load_certs)# load_certs typically loads a CA roots filestub=Helloworld::Greeter::Stub.new('myservice.example.com', creds)Authenticate with Googlerequire'googleauth'# from http://www.rubydoc.info/gems/googleauth/0.1.0...ssl_creds=GRPC::Core::ChannelCredentials.new(load_certs)# load_certs typically loads a CA roots fileauthentication=Google::Auth.get_application_default()call_creds=GRPC::Core::CallCredentials.new(authentication.updater_proc)combined_creds=ssl_creds.compose(call_creds)stub=Helloworld::Greeter::Stub.new('greeter.googleapis.com', combined_creds)Node.jsBase case - No encryption/authenticationvarstub=newhelloworld.Greeter('localhost:50051', grpc.credentials.createInsecure());With server authentication SSL/TLSconstroot_cert=fs.readFileSync('path/to/root-cert');constssl_creds=grpc.credentials.createSsl(root_cert);conststub=newhelloworld.Greeter('myservice.example.com', ssl_creds);Authenticate with Google// Authenticating with GooglevarGoogleAuth=require('google-auth-library');// from https://www.npmjs.com/package/google-auth-library...varssl_creds=grpc.credentials.createSsl(root_certs);(newGoogleAuth()).getApplicationDefault(function(err, auth) {varcall_creds=grpc.credentials.createFromGoogleCredential(auth);varcombined_creds=grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);varstub=newhelloworld.Greeter('greeter.googleapis.com', combined_credentials);});Authenticate with Google using OAuth2 token (legacy approach)varGoogleAuth=require('google-auth-library');// from https://www.npmjs.com/package/google-auth-library...varssl_creds=grpc.Credentials.createSsl(root_certs);// load_certs typically loads a CA roots filevarscope='https://www.googleapis.com/auth/grpc-testing';(newGoogleAuth()).getApplicationDefault(function(err, auth) {if(auth.createScopeRequired()) {auth=auth.createScoped(scope);}varcall_creds=grpc.credentials.createFromGoogleCredential(auth);varcombined_creds=grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);varstub=newhelloworld.Greeter('greeter.googleapis.com', combined_credentials);});With server authentication SSL/TLS and a custom header with tokenconstrootCert=fs.readFileSync('path/to/root-cert');constchannelCreds=grpc.credentials.createSsl(rootCert);constmetaCallback=(_params, callback) => {constmeta=newgrpc.Metadata();meta.add('custom-auth-header','token');callback(null, meta);}constcallCreds=grpc.credentials.createFromMetadataGenerator(metaCallback);constcombCreds=grpc.credentials.combineChannelCredentials(channelCreds, callCreds);conststub=newhelloworld.Greeter('myservice.example.com', combCreds);PHPBase case - No encryption/authorization$client=newhelloworld\GreeterClient('localhost:50051', ['credentials'=>Grpc\ChannelCredentials::createInsecure(),]);With server authentication SSL/TLS$client=newhelloworld\GreeterClient('myservice.example.com', ['credentials'=>Grpc\ChannelCredentials::createSsl(file_get_contents('roots.pem')),]);Authenticate with GooglefunctionupdateAuthMetadataCallback($context){$auth_credentials=ApplicationDefaultCredentials::getCredentials();return$auth_credentials->updateMetadata($metadata=[],$context->service_url);}$channel_credentials=Grpc\ChannelCredentials::createComposite(Grpc\ChannelCredentials::createSsl(file_get_contents('roots.pem')),Grpc\CallCredentials::createFromPlugin('updateAuthMetadataCallback'));$opts=['credentials'=>$channel_credentials];$client=newhelloworld\GreeterClient('greeter.googleapis.com',$opts);Authenticate with Google using OAuth2 token (legacy approach)// the environment variable "GOOGLE_APPLICATION_CREDENTIALS" needs to be set$scope="https://www.googleapis.com/auth/grpc-testing";$auth=Google\Auth\ApplicationDefaultCredentials::getCredentials($scope);$opts=['credentials'=>Grpc\Credentials::createSsl(file_get_contents('roots.pem'));'update_metadata'=>$auth->getUpdateMetadataFunc(),];$client=newhelloworld\GreeterClient('greeter.googleapis.com',$opts);DartBase case - no encryption or authenticationfinalchannel=newClientChannel('localhost',port:50051,options:constChannelOptions(credentials:constChannelCredentials.insecure()));finalstub=newGreeterClient(channel);With server authentication SSL/TLS// Load a custom roots file.finaltrustedRoot=newFile('roots.pem').readAsBytesSync();finalchannelCredentials=newChannelCredentials.secure(certificates:trustedRoot);finalchannelOptions=newChannelOptions(credentials:channelCredentials);finalchannel=newClientChannel('myservice.example.com',options:channelOptions);finalclient=newGreeterClient(channel);Authenticate with Google// Uses publicly trusted roots by default.finalchannel=newClientChannel('greeter.googleapis.com');finalserviceAccountJson=newFile('service-account.json').readAsStringSync();finalcredentials=newJwtServiceAccountAuthenticator(serviceAccountJson);finalclient=newGreeterClient(channel,options:credentials.toCallOptions);Authenticate a single RPC call// Uses publicly trusted roots by default.finalchannel=newClientChannel('greeter.googleapis.com');finalclient=newGreeterClient(channel);...finalserviceAccountJson=newFile('service-account.json').readAsStringSync();finalcredentials=newJwtServiceAccountAuthenticator(serviceAccountJson);finalresponse=awaitclient.sayHello(request,options:credentials.toCallOptions);Last modified January 12, 2024:Add OAuth token-based authentication to guide (#1245) (d90b5f9)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About