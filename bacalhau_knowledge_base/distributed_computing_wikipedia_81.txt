URL: https://en.wikipedia.org/wiki/Process_(computing)

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Representation2Multitasking and process managementToggle Multitasking and process management subsection2.1Process states3Inter-process communication4History5See also6Notes7References8Further reading9External linksToggle the table of contentsProcess (computing)42 languagesالعربيةБългарскиBosanskiCatalàČeštinaDanskDeutschΕλληνικάEspañolEuskaraفارسیFrançais한국어Հայերենहिन्दीHrvatskiBahasa IndonesiaInterlinguaItalianoעבריתMagyarМонголNederlands日本語Norsk bokmålNorsk nynorskPolskiPortuguêsРусскийSimple EnglishSlovenčinaSlovenščinaСрпски / srpskiSuomiSvenskaதமிழ்ไทยTürkçeУкраїнськаاردوTiếng Việt中文Edit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsWikimedia CommonsAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaParticular execution of a computer programProgramvs. Process vs.ThreadScheduling,Preemption,Context SwitchingIncomputing, aprocessis theinstanceof acomputer programthat is being executed by one or manythreads. There are many different process models, some of which are light weight, but almost all processes (even entirevirtual machines) are rooted in anoperating system(OS) process which comprises the program code, assigned system resources, physical and logical access permissions, and data structures to initiate, control and coordinate execution activity. Depending on the OS, a process may be made up of multiple threads of execution that execute instructionsconcurrently.[1][2]While a computer program is a passive collection ofinstructionstypically stored in a file on disk, a process is the execution of those instructions after being loaded from the disk into memory. Several processes may be associated with the same program; for example, opening up several instances of the same program often results in more than one process being executed.Multitaskingis a method to allow multiple processes to shareprocessors(CPUs) and other system resources. Each CPU (core) executes a single process at a time. However, multitasking allows each processor toswitchbetween tasks that are being executed without having to wait for each task to finish (preemption). Depending on the operating system implementation, switches could be performed when tasks initiate and wait for completion ofinput/outputoperations, when a task voluntarily yields the CPU, on hardwareinterrupts, and when the operating system scheduler decides that a process has expired its fair share of CPU time (e.g, by theCompletely Fair Schedulerof theLinux kernel).A common form of multitasking is provided by CPU'stime-sharingthat is a method for interleaving the execution of users' processes and threads, and even of independent kernel tasks – although the latter feature is feasible only in preemptivekernelssuch asLinux. Preemption has an important side effect for interactive processes that are given higher priority with respect to CPU bound processes, therefore users are immediately assigned computing resources at the simple pressing of a key or when moving a mouse. Furthermore, applications like video and music reproduction are given some kind of real-time priority, preempting any other lower priority process. In time-sharing systems,context switchesare performed rapidly, which makes it seem like multiple processes are being executed simultaneously on the same processor. This seemingly-simultaneous execution of multiple processes is calledconcurrency.For security and reliability, most modernoperating systemsprevent directcommunicationbetween independent processes, providing strictly mediated and controlled inter-process communication.Representation[edit]A list of processes as displayed byhtopA process table as displayed byKDE System GuardIn general, a computer system process consists of (or is said toown) the following resources:Animageof the executablemachine codeassociated with a program.Memory (typically some region ofvirtual memory); which includes the executable code, process-specific data (input and output), acall stack(to keep track of activesubroutinesand/or other events), and aheapto hold intermediate computation data generated during run time.Operating system descriptors of resources that are allocated to the process, such asfile descriptors(Unixterminology) orhandles(Windows), and data sources and sinks.Securityattributes, such as the process owner and the process' set of permissions (allowable operations).Processorstate (context), such as the content ofregistersand physical memory addressing. Thestateis typically stored in computer registers when the process is executing, and in memory otherwise.[1]The operating system holds most of this information about active processes in data structures calledprocess control blocks.  Any subset of the resources, typically at least the processor state, may be associated with each of the process'threadsin operating systems that support threads orchildprocesses.The operating system keeps its processes separate and allocates the resources they need, so that they are less likely to interfere with each other and cause system failures (e.g.,deadlockorthrashing). The operating system may also provide mechanisms forinter-process communicationto enable processes to interact in safe and predictable ways.Multitasking and process management[edit]Main article:Process management (computing)Amultitaskingoperating systemmay just switch between processes to give the appearance of many processesexecutingsimultaneously (that is, inparallel), though in fact only one process can be executing at any one time on a singleCPU(unless the CPU has multiple cores, thenmultithreadingor other similar technologies can be used).[a]It is usual to associate a single process with a main program, and child processes with any spin-off, parallel processes, which behave likeasynchronoussubroutines. A process is said toownresources, of which animageof its program (in memory) is one such resource. However, in multiprocessing systemsmanyprocesses may run off of, or share, the samereentrantprogram at the same location in memory, but each process is said to own its ownimageof the program.Processes are often called "tasks" inembeddedoperating systems. The sense of "process" (or task) is "something that takes up time", as opposed to "memory", which is "something that takes up space".[b]The above description applies to both processes managed by an operating system, and processes as defined byprocess calculi.If a process requests something for which it must wait, it will be blocked. When the process is in theblocked state, it is eligible for swapping to disk, but this is transparent in avirtual memorysystem, where regions of a process's memory may be really on disk and not inmain memoryat any time. Even portions of active processes/tasks (executing programs) are eligible for swapping to disk, if the portions have not been used recently. Not all parts of an executing program and its data have to be in physical memory for the associated process to be active.Process states[edit]Main article:Process stateThe various process states, displayed in astate diagram, with arrows indicating possible transitions between states.An operating systemkernelthat allows multitasking needs processes to havecertain states. Names for these states are not standardised, but they have similar functionality.[1]First, the process is "created" by being loaded from asecondary storagedevice (hard disk drive,CD-ROM, etc.) intomain memory. After that theprocess schedulerassigns it the "waiting" state.While the process is "waiting", it waits for theschedulerto do a so-calledcontext switch. The context switch loads the process into the processor and changes the state to "running" while the previously "running" process is stored in a "waiting" state.If a process in the "running" state needs to wait for a resource (wait for user input or file to open, for example), it is assigned the "blocked" state. The process state is changed back to "waiting" when the process no longer needs to wait (in a blocked state).Once the process finishes execution, or is terminated by the operating system, it is no longer needed. The process is removed instantly or is moved to the "terminated" state. When removed, it just waits to be removed from main memory.[1][3]Inter-process communication[edit]Main article:Inter-process communicationWhen processes need to communicate with each other they must share parts of theiraddress spacesor use other forms of inter-process communication (IPC).
For instance in ashellpipeline, the output of the first process needs to pass to the second one, and so on. Another example is a task that has been decomposed into cooperating but partially independent processes which can run simultaneously (i.e., using concurrency, or true parallelism – the latter model is a particular case of concurrent execution and is feasible whenever multiple CPU cores are available for the processes that are ready to run).It is even possible for two or more processes to be running on different machines that may run different operating system (OS), therefore some mechanisms for communication and synchronization (calledcommunications protocolsfor distributed computing) are needed (e.g., theMessage Passing Interface{MPI}).History[edit]See also:History of operating systemsBy the early 1960s, computer control software had evolved frommonitor control software, for exampleIBSYS, toexecutive control software. Over time, computers got faster whilecomputer timewas still neither cheap nor fully utilized; such an environment mademultiprogrammingpossible and necessary. Multiprogramming means that several programs runconcurrently. At first, more than one program ran on a single processor, as a result of underlyinguniprocessorcomputer architecture, and they shared scarce and limited hardware resources; consequently, the concurrency was of aserialnature. On later systems withmultiple processors, multiple programs may run concurrently inparallel.Programs consist of sequences of instructions for processors. A single processor can run only one instruction at a time: it is impossible to run more programs at the same time. A program might need someresource, such as an input device, which has a large delay, or a program might start some slow operation, such as sending output to a printer. This would lead to processor being "idle" (unused). To keep the processor busy at all times, the execution of such a program is halted and the operating system switches the processor to run another program. To the user, it will appear that the programs run at the same time (hence the term "parallel").Shortly thereafter, the notion of a "program" was expanded to the notion of an "executing program and its context". The concept of a process was born, which also became necessary with the invention ofre-entrant code.Threadscame somewhat later. However, with the advent of concepts such astime-sharing,computer networks, and multiple-CPUshared memorycomputers, the old "multiprogramming" gave way to truemultitasking, multiprocessing and, later,multithreading.See also[edit]Background processCode caveChild processExitForkLight-weight processOrphan processParent processProcess groupWaitWorking directoryZombie processNotes[edit]^Some modern CPUs combine two or more independent processors in amulti-coreconfiguration and can execute several processes simultaneously. Another technique calledsimultaneous multithreading(used inIntel'sHyper-threadingtechnology) can simulate simultaneous execution of multiple processes or threads.^Tasks and processes refer essentially to the same entity. And, although they have somewhat different terminological histories, they have come to be used as synonyms. Today, the term process is generally preferred over task, except when referring to "multitasking", since the alternative term, "multiprocessing", is too easy to confuse with multiprocessor (which is a computer with two or more CPUs).References[edit]^abcdSilberschatz, Abraham; Cagne, Greg; Galvin, Peter Baer (2004). "Chapter 4. Processes".Operating system concepts with Java(Sixth ed.).John Wiley & Sons.ISBN0-471-48905-0.^Vahalia, Uresh (1996). "Chapter 2. The Process and the Kernel".UNIX Internals: The New Frontiers. Prentice-Hall Inc.ISBN0-13-101908-2.^Stallings, William (2005).Operating Systems: internals and design principles(5th ed.). Prentice Hall.ISBN0-13-127837-1.(particularly chapter 3, section 3.2, "process states", including figure 3.9 "process state transition with suspend states")Further reading[edit]Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau (2014). "Operating Systems: Three Easy Pieces". Arpaci-Dusseau Books. Relevant chapters:Abstraction: The ProcessThe Process APIGary D. Knott (1974)A proposal for certain process management and intercommunication primitivesACM SIGOPS Operating Systems Review. Volume 8, Issue 4 (October 1974). pp. 7 – 44External links[edit]Wikiversity has learning resources aboutProcesses and ThreadsatOperating Systems/Process and ThreadMedia related toProcess (computing)at Wikimedia CommonsOnline Resources For Process InformationComputer Process Information Database and ForumProcess Models with Process Creation & Termination MethodsArchived2021-02-06 at theWayback MachinevteParallel computingGeneralDistributed computingParallel computingMassively parallelCloud computingHigh-performance computingMultiprocessingManycore processorGPGPUComputer networkSystolic arrayLevelsBitInstructionThreadTaskDataMemoryLoopPipelineMultithreadingTemporalSimultaneous(SMT)Simultaneous and heterogenousSpeculative(SpMT)PreemptiveCooperativeClustered multi-thread(CMT)Hardware scoutTheoryPRAM modelPEM modelAnalysis of parallel algorithmsAmdahl's lawGustafson's lawCost efficiencyKarp–Flatt metricSlowdownSpeedupElementsProcessThreadFiberInstruction windowArrayCoordinationMultiprocessingMemory coherenceCache coherenceCache invalidationBarrierSynchronizationApplication checkpointingProgrammingStream processingDataflow programmingModelsImplicit parallelismExplicit parallelismConcurrencyNon-blocking algorithmHardwareFlynn's taxonomySISDSIMDArray processing(SIMT)Pipelined processingAssociative processingMISDMIMDDataflow architecturePipelined processorSuperscalar processorVector processorMultiprocessorsymmetricasymmetricMemoryshareddistributeddistributed sharedUMANUMACOMAMassively parallelcomputerComputer clusterBeowulf clusterGrid computerHardware accelerationAPIsAteji PXBoostChapelHPXCharm++CilkCoarray FortranCUDADryadC++ AMPGlobal ArraysGPUOpenMPIOpenMPOpenCLOpenHMPPOpenACCParallel ExtensionsPVMpthreadsRaftLibROCmUPCTBBZPLProblemsAutomatic parallelizationDeadlockDeterministic algorithmEmbarrassingly parallelParallel slowdownRace conditionSoftware lockoutScalabilityStarvationCategory: Parallel computingvteOperating systemsGeneralComparisonForensic engineeringHistoryListTimelineUsage shareUser features comparisonVariantsDisk operating systemDistributed operating systemEmbedded operating systemHobbyist operating systemJust enough operating systemMobile operating systemNetwork operating systemObject-oriented operating systemReal-time operating systemSupercomputer operating systemKernelArchitecturesExokernelHybridMicrokernelMonolithicMultikernelvkernelRump kernelUnikernelComponentsDevice driverLoadable kernel moduleUser space and kernel spaceProcess managementConceptsComputer multitasking(Cooperative,Preemptive)Context switchInterruptIPCProcessProcess control blockReal-timeThreadTime-sharingSchedulingalgorithmsFixed-priority preemptiveMultilevel feedback queueRound-robinShortest job nextMemory management,resourceprotectionBus errorGeneral protection faultMemory pagingMemory protectionProtection ringSegmentation faultVirtual memoryStorageaccess,file systemsBoot loaderDefragmentationDevice fileFile attributeInodeJournalPartitionVirtual file systemVirtual tape librarySupporting conceptsAPIComputer networkHALLive CDLive USBShellCLIUser interfacePXEAuthority control databases: NationalGermanyRetrieved from "https://en.wikipedia.org/w/index.php?title=Process_(computing)&oldid=1241357051"Categories:Process (computing)Concurrent computingOperating system technologyHidden categories:Articles with short descriptionShort description matches WikidataCommons category link from WikidataWebarchive template wayback linksThis page was last edited on 20 August 2024, at 18:30(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view