URL: https://grpc.io/docs/languages/go/api/

Skip to Main ContentWhy GoCase StudiesCommon problems companies solve with GoUse CasesStories about how and why companies use GoSecurity PolicyHow Go can help keep you secure by defaultLearnDocsEffective GoTips for writing clear, performant, and idiomatic Go codeGo User ManualA complete introduction to building software with GoStandard libraryReference documentation for Go's standard libraryRelease NotesLearn what's new in each Go releasePackagesCommunityRecorded TalksVideos from prior eventsMeetupsMeet other local Go developersConferencesLearn and network with Go developers from around the worldGo blogThe Go project's official blog.Go projectGet help and stay informed from GoGet connectedWhy GoWhy GoCase StudiesUse CasesSecurity PolicyLearnDocsDocsEffective GoGo User ManualStandard libraryRelease NotesPackagesCommunityCommunityRecorded TalksMeetupsConferencesGo blogGo projectGet connectedDiscover Packagesgoogle.golang.org/grpcgrpcpackagemoduleVersion:v1.66.0Opens a new window with list of versions in this module.LatestLatestThis package is not in the latest version of its module.Go to latestPublished: Aug 28, 2024License:Apache-2.0Opens a new window with license information.Imports:63Opens a new window with list of imports.Imported by:205,276Opens a new window with list of known importers.MainVersionsLicensesImportsImported ByDetailsValidgo.modfileThe Go module system was introduced in Go 1.11 and is the official dependency management
          solution for Go.Redistributable licenseRedistributable licenses place minimal restrictions on how software can be used,
          modified, and redistributed.Tagged versionModules with tagged versions give importers more predictable builds.Stable versionWhen a project reaches major version v1 it is considered stable.Learn more about best practicesRepositorygithub.com/grpc/grpc-goLinksOpen Source InsightsJump to ...READMEPrerequisitesInstallationLearn moreFAQI/O Timeout ErrorsCompiling error, undefined: grpc.SupportPackageIsVersionHow to turn on loggingThe RPC failed with error &quot;code = Unavailable desc = transport is closing&quot;DocumentationOverviewIndexConstantsVariablesFunctionsClientSupportedCompressors(ctx)Code(err)ErrorDesc(err)Errorf(c, format, a)Invoke(ctx, method, args, reply, cc, opts)Method(ctx)MethodFromServerStream(stream)NewContextWithServerTransportStream(ctx, stream)SendHeader(ctx, md)SetHeader(ctx, md)SetSendCompressor(ctx, name)SetTrailer(ctx, md)Typestype BackoffConfigtype BidiStreamingClienttype BidiStreamingServertype CallOptionCallContentSubtype(contentSubtype)CallCustomCodec(codec)FailFast(failFast)ForceCodec(codec)ForceCodecV2(codec)Header(md)MaxCallRecvMsgSize(bytes)MaxCallSendMsgSize(bytes)MaxRetryRPCBufferSize(bytes)OnFinish(onFinish)Peer(p)PerRPCCredentials(creds)StaticMethod()Trailer(md)UseCompressor(name)WaitForReady(waitForReady)type ClientConnDial(target, opts)DialContext(ctx, target, opts)NewClient(target, opts)(cc) CanonicalTarget()(cc) Close()(cc) Connect()(cc) GetMethodConfig(method)(cc) GetState()(cc) Invoke(ctx, method, args, reply, opts)(cc) NewStream(ctx, desc, method, opts)(cc) ResetConnectBackoff()(cc) Target()(cc) WaitForStateChange(ctx, sourceState)type ClientConnInterfacetype ClientStreamNewClientStream(ctx, desc, cc, method, opts)type ClientStreamingClienttype ClientStreamingServertype Codectype CompressorNewGZIPCompressor()NewGZIPCompressorWithLevel(level)type CompressorCallOptiontype ConnectParamstype ContentSubtypeCallOptiontype CustomCodecCallOptiontype DecompressorNewGZIPDecompressor()type DialOptionFailOnNonTempDialError(f)WithAuthority(a)WithBackoffConfig(b)WithBackoffMaxDelay(md)WithBlock()WithChainStreamInterceptor(interceptors)WithChainUnaryInterceptor(interceptors)WithChannelzParentID(c)WithCodec(c)WithCompressor(cp)WithConnectParams(p)WithContextDialer(f)WithCredentialsBundle(b)WithDecompressor(dc)WithDefaultCallOptions(cos)WithDefaultServiceConfig(s)WithDialer(f)WithDisableHealthCheck()WithDisableRetry()WithDisableServiceConfig()WithIdleTimeout(d)WithInitialConnWindowSize(s)WithInitialWindowSize(s)WithInsecure()WithKeepaliveParams(kp)WithMaxCallAttempts(n)WithMaxHeaderListSize(s)WithMaxMsgSize(s)WithNoProxy()WithPerRPCCredentials(creds)WithReadBufferSize(s)WithResolvers(rs)WithReturnConnectionError()WithSharedWriteBuffer(val)WithStatsHandler(h)WithStreamInterceptor(f)WithTimeout(d)WithTransportCredentials(creds)WithUnaryInterceptor(f)WithUserAgent(s)WithWriteBufferSize(s)type EmptyCallOptiontype EmptyDialOptiontype EmptyServerOptiontype FailFastCallOptiontype ForceCodecCallOptiontype ForceCodecV2CallOptiontype GenericClientStream(x) CloseAndRecv()(x) Recv()(x) Send(m)type GenericServerStream(x) Recv()(x) Send(m)(x) SendAndClose(m)type HeaderCallOptiontype MaxHeaderListSizeDialOptiontype MaxHeaderListSizeServerOptiontype MaxRecvMsgSizeCallOptiontype MaxRetryRPCBufferSizeCallOptiontype MaxSendMsgSizeCallOptiontype MethodConfigtype MethodDesctype MethodInfotype OnFinishCallOptiontype PeerCallOptiontype PerRPCCredsCallOptiontype PreparedMsg(p) Encode(s, msg)type ServerNewServer(opt)(s) GetServiceInfo()(s) GracefulStop()(s) RegisterService(sd, ss)(s) Serve(lis)(s) ServeHTTP(w, r)(s) Stop()type ServerOptionChainStreamInterceptor(interceptors)ChainUnaryInterceptor(interceptors)ConnectionTimeout(d)Creds(c)CustomCodec(codec)ForceServerCodec(codec)ForceServerCodecV2(codecV2)HeaderTableSize(s)InTapHandle(h)InitialConnWindowSize(s)InitialWindowSize(s)KeepaliveEnforcementPolicy(kep)KeepaliveParams(kp)MaxConcurrentStreams(n)MaxHeaderListSize(s)MaxMsgSize(m)MaxRecvMsgSize(m)MaxSendMsgSize(m)NumStreamWorkers(numServerWorkers)RPCCompressor(cp)RPCDecompressor(dc)ReadBufferSize(s)SharedWriteBuffer(val)StatsHandler(h)StreamInterceptor(i)UnaryInterceptor(i)UnknownServiceHandler(streamHandler)WaitForHandlers(w)WriteBufferSize(s)type ServerStreamtype ServerStreamingClienttype ServerStreamingServertype ServerTransportStreamServerTransportStreamFromContext(ctx)type ServiceConfigtype ServiceDesctype ServiceInfotype ServiceRegistrartype StaticMethodCallOptiontype Streamtype StreamClientInterceptortype StreamDesctype StreamHandlertype StreamServerInfotype StreamServerInterceptortype Streamertype TrailerCallOptiontype UnaryClientInterceptortype UnaryHandlertype UnaryInvokertype UnaryServerInfotype UnaryServerInterceptorSource FilesDirectoriesREADMEREADME¶gRPC-GoTheGoimplementation ofgRPC: A high performance, open source, general
RPC framework that puts mobile and HTTP/2 first. For more information see theGo gRPC docs, or jump directly into thequick start.PrerequisitesGo: any one of thetwo latest majorreleases.InstallationSimply add the following import to your code, and thengo [build|run|test]will automatically fetch the necessary dependencies:import "google.golang.org/grpc"Note:If you are trying to accessgrpc-gofromChina, see theFAQbelow.Learn moreGo gRPC docs, which include aquick startandAPI
referenceamong other resourcesLow-level technical docsfrom this repositoryPerformance benchmarkExamplesFAQI/O Timeout ErrorsThegolang.orgdomain may be blocked from some countries.go getusually
produces an error like the following when this happens:$ go get -u google.golang.org/grpc
package google.golang.org/grpc: unrecognized import path "google.golang.org/grpc" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)To build Go code, there are several options:Set up a VPN and access google.golang.org through that.With Go module support: it is possible to use thereplacefeature ofgo modto create aliases for golang.org packages.  In your project's directory:go mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest
go mod tidy
go mod vendor
go build -mod=vendorAgain, this will need to be done for all transitive dependencies hosted on
golang.org as well. For details, refer togolang/go issue
#28652.Compiling error, undefined: grpc.SupportPackageIsVersionPlease update to the latest version of gRPC-Go usinggo get google.golang.org/grpc.How to turn on loggingThe default logger is controlled by environment variables. Turn everything on
like this:$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99
$ export GRPC_GO_LOG_SEVERITY_LEVEL=infoThe RPC failed with error"code = Unavailable desc = transport is closing"This error means the connection the RPC is using was closed, and there are many
possible reasons, including:mis-configured transport credentials, connection failed on handshakingbytes disrupted, possibly by a proxy in betweenserver shutdownKeepalive parameters caused connection shutdown, for example if you have
configured your server to terminate connections regularly totrigger DNS
lookups.
If this is the case, you may want to increase yourMaxConnectionAgeGrace,
to allow longer RPC calls to finish.It can be tricky to debug this because the error happens on the client side but
the root cause of the connection being closed is on the server side. Turn on
logging onboth client and server, and see if there are any transport
errors.Expand ▾Collapse ▴Documentation¶Overview¶Package grpc implements an RPC system called gRPC.See grpc.io for more information about gRPC.Index¶ConstantsVariablesfunc ClientSupportedCompressors(ctx context.Context) ([]string, error)func Code(err error) codes.Codedeprecatedfunc ErrorDesc(err error) stringdeprecatedfunc Errorf(c codes.Code, format string, a ...any) errordeprecatedfunc Invoke(ctx context.Context, method string, args, reply any, cc *ClientConn, ...) errorfunc Method(ctx context.Context) (string, bool)func MethodFromServerStream(stream ServerStream) (string, bool)func NewContextWithServerTransportStream(ctx context.Context, stream ServerTransportStream) context.Contextfunc SendHeader(ctx context.Context, md metadata.MD) errorfunc SetHeader(ctx context.Context, md metadata.MD) errorfunc SetSendCompressor(ctx context.Context, name string) errorfunc SetTrailer(ctx context.Context, md metadata.MD) errortype BackoffConfigdeprecatedtype BidiStreamingClienttype BidiStreamingServertype CallOptionfunc CallContentSubtype(contentSubtype string) CallOptionfunc CallCustomCodec(codec Codec) CallOptiondeprecatedfunc FailFast(failFast bool) CallOptiondeprecatedfunc ForceCodec(codec encoding.Codec) CallOptionfunc ForceCodecV2(codec encoding.CodecV2) CallOptionfunc Header(md *metadata.MD) CallOptionfunc MaxCallRecvMsgSize(bytes int) CallOptionfunc MaxCallSendMsgSize(bytes int) CallOptionfunc MaxRetryRPCBufferSize(bytes int) CallOptionfunc OnFinish(onFinish func(err error)) CallOptionfunc Peer(p *peer.Peer) CallOptionfunc PerRPCCredentials(creds credentials.PerRPCCredentials) CallOptionfunc StaticMethod() CallOptionfunc Trailer(md *metadata.MD) CallOptionfunc UseCompressor(name string) CallOptionfunc WaitForReady(waitForReady bool) CallOptiontype ClientConnfunc Dial(target string, opts ...DialOption) (*ClientConn, error)deprecatedfunc DialContext(ctx context.Context, target string, opts ...DialOption) (conn *ClientConn, err error)deprecatedfunc NewClient(target string, opts ...DialOption) (conn *ClientConn, err error)func (cc *ClientConn) CanonicalTarget() stringfunc (cc *ClientConn) Close() errorfunc (cc *ClientConn) Connect()func (cc *ClientConn) GetMethodConfig(method string) MethodConfigfunc (cc *ClientConn) GetState() connectivity.Statefunc (cc *ClientConn) Invoke(ctx context.Context, method string, args, reply any, opts ...CallOption) errorfunc (cc *ClientConn) NewStream(ctx context.Context, desc *StreamDesc, method string, opts ...CallOption) (ClientStream, error)func (cc *ClientConn) ResetConnectBackoff()func (cc *ClientConn) Target() stringfunc (cc *ClientConn) WaitForStateChange(ctx context.Context, sourceState connectivity.State) booltype ClientConnInterfacetype ClientStreamfunc NewClientStream(ctx context.Context, desc *StreamDesc, cc *ClientConn, method string, ...) (ClientStream, error)type ClientStreamingClienttype ClientStreamingServertype Codecdeprecatedtype Compressordeprecatedfunc NewGZIPCompressor() Compressordeprecatedfunc NewGZIPCompressorWithLevel(level int) (Compressor, error)deprecatedtype CompressorCallOptiontype ConnectParamstype ContentSubtypeCallOptiontype CustomCodecCallOptiontype Decompressordeprecatedfunc NewGZIPDecompressor() Decompressordeprecatedtype DialOptionfunc FailOnNonTempDialError(f bool) DialOptiondeprecatedfunc WithAuthority(a string) DialOptionfunc WithBackoffConfig(b BackoffConfig) DialOptiondeprecatedfunc WithBackoffMaxDelay(md time.Duration) DialOptiondeprecatedfunc WithBlock() DialOptiondeprecatedfunc WithChainStreamInterceptor(interceptors ...StreamClientInterceptor) DialOptionfunc WithChainUnaryInterceptor(interceptors ...UnaryClientInterceptor) DialOptionfunc WithChannelzParentID(c channelz.Identifier) DialOptionfunc WithCodec(c Codec) DialOptiondeprecatedfunc WithCompressor(cp Compressor) DialOptiondeprecatedfunc WithConnectParams(p ConnectParams) DialOptionfunc WithContextDialer(f func(context.Context, string) (net.Conn, error)) DialOptionfunc WithCredentialsBundle(b credentials.Bundle) DialOptionfunc WithDecompressor(dc Decompressor) DialOptiondeprecatedfunc WithDefaultCallOptions(cos ...CallOption) DialOptionfunc WithDefaultServiceConfig(s string) DialOptionfunc WithDialer(f func(string, time.Duration) (net.Conn, error)) DialOptiondeprecatedfunc WithDisableHealthCheck() DialOptionfunc WithDisableRetry() DialOptionfunc WithDisableServiceConfig() DialOptionfunc WithIdleTimeout(d time.Duration) DialOptionfunc WithInitialConnWindowSize(s int32) DialOptionfunc WithInitialWindowSize(s int32) DialOptionfunc WithInsecure() DialOptiondeprecatedfunc WithKeepaliveParams(kp keepalive.ClientParameters) DialOptionfunc WithMaxCallAttempts(n int) DialOptionfunc WithMaxHeaderListSize(s uint32) DialOptionfunc WithMaxMsgSize(s int) DialOptiondeprecatedfunc WithNoProxy() DialOptionfunc WithPerRPCCredentials(creds credentials.PerRPCCredentials) DialOptionfunc WithReadBufferSize(s int) DialOptionfunc WithResolvers(rs ...resolver.Builder) DialOptionfunc WithReturnConnectionError() DialOptiondeprecatedfunc WithSharedWriteBuffer(val bool) DialOptionfunc WithStatsHandler(h stats.Handler) DialOptionfunc WithStreamInterceptor(f StreamClientInterceptor) DialOptionfunc WithTimeout(d time.Duration) DialOptiondeprecatedfunc WithTransportCredentials(creds credentials.TransportCredentials) DialOptionfunc WithUnaryInterceptor(f UnaryClientInterceptor) DialOptionfunc WithUserAgent(s string) DialOptionfunc WithWriteBufferSize(s int) DialOptiontype EmptyCallOptiontype EmptyDialOptiontype EmptyServerOptiontype FailFastCallOptiontype ForceCodecCallOptiontype ForceCodecV2CallOptiontype GenericClientStreamfunc (x *GenericClientStream[Req, Res]) CloseAndRecv() (*Res, error)func (x *GenericClientStream[Req, Res]) Recv() (*Res, error)func (x *GenericClientStream[Req, Res]) Send(m *Req) errortype GenericServerStreamfunc (x *GenericServerStream[Req, Res]) Recv() (*Req, error)func (x *GenericServerStream[Req, Res]) Send(m *Res) errorfunc (x *GenericServerStream[Req, Res]) SendAndClose(m *Res) errortype HeaderCallOptiontype MaxHeaderListSizeDialOptiontype MaxHeaderListSizeServerOptiontype MaxRecvMsgSizeCallOptiontype MaxRetryRPCBufferSizeCallOptiontype MaxSendMsgSizeCallOptiontype MethodConfigdeprecatedtype MethodDesctype MethodInfotype OnFinishCallOptiontype PeerCallOptiontype PerRPCCredsCallOptiontype PreparedMsgfunc (p *PreparedMsg) Encode(s Stream, msg any) errortype Serverfunc NewServer(opt ...ServerOption) *Serverfunc (s *Server) GetServiceInfo() map[string]ServiceInfofunc (s *Server) GracefulStop()func (s *Server) RegisterService(sd *ServiceDesc, ss any)func (s *Server) Serve(lis net.Listener) errorfunc (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request)func (s *Server) Stop()type ServerOptionfunc ChainStreamInterceptor(interceptors ...StreamServerInterceptor) ServerOptionfunc ChainUnaryInterceptor(interceptors ...UnaryServerInterceptor) ServerOptionfunc ConnectionTimeout(d time.Duration) ServerOptionfunc Creds(c credentials.TransportCredentials) ServerOptionfunc CustomCodec(codec Codec) ServerOptiondeprecatedfunc ForceServerCodec(codec encoding.Codec) ServerOptionfunc ForceServerCodecV2(codecV2 encoding.CodecV2) ServerOptionfunc HeaderTableSize(s uint32) ServerOptionfunc InTapHandle(h tap.ServerInHandle) ServerOptionfunc InitialConnWindowSize(s int32) ServerOptionfunc InitialWindowSize(s int32) ServerOptionfunc KeepaliveEnforcementPolicy(kep keepalive.EnforcementPolicy) ServerOptionfunc KeepaliveParams(kp keepalive.ServerParameters) ServerOptionfunc MaxConcurrentStreams(n uint32) ServerOptionfunc MaxHeaderListSize(s uint32) ServerOptionfunc MaxMsgSize(m int) ServerOptiondeprecatedfunc MaxRecvMsgSize(m int) ServerOptionfunc MaxSendMsgSize(m int) ServerOptionfunc NumStreamWorkers(numServerWorkers uint32) ServerOptionfunc RPCCompressor(cp Compressor) ServerOptiondeprecatedfunc RPCDecompressor(dc Decompressor) ServerOptiondeprecatedfunc ReadBufferSize(s int) ServerOptionfunc SharedWriteBuffer(val bool) ServerOptionfunc StatsHandler(h stats.Handler) ServerOptionfunc StreamInterceptor(i StreamServerInterceptor) ServerOptionfunc UnaryInterceptor(i UnaryServerInterceptor) ServerOptionfunc UnknownServiceHandler(streamHandler StreamHandler) ServerOptionfunc WaitForHandlers(w bool) ServerOptionfunc WriteBufferSize(s int) ServerOptiontype ServerStreamtype ServerStreamingClienttype ServerStreamingServertype ServerTransportStreamfunc ServerTransportStreamFromContext(ctx context.Context) ServerTransportStreamtype ServiceConfigdeprecatedtype ServiceDesctype ServiceInfotype ServiceRegistrartype StaticMethodCallOptiontype Streamdeprecatedtype StreamClientInterceptortype StreamDesctype StreamHandlertype StreamServerInfotype StreamServerInterceptortype Streamertype TrailerCallOptiontype UnaryClientInterceptortype UnaryHandlertype UnaryInvokertype UnaryServerInfotype UnaryServerInterceptorConstants¶View Sourceconst (SupportPackageIsVersion3 =trueSupportPackageIsVersion4 =trueSupportPackageIsVersion5 =trueSupportPackageIsVersion6 =trueSupportPackageIsVersion7 =trueSupportPackageIsVersion8 =trueSupportPackageIsVersion9 =true)The SupportPackageIsVersion variables are referenced from generated protocol
buffer files to ensure compatibility with the gRPC version used.  The latest
support package version is 9.Older versions are kept for compatibility.These constants should not be referenced from any other code.View Sourceconst Version = "1.66.0"Version is the current grpc version.Variables¶View Sourcevar (// ErrClientConnClosing indicates that the operation is illegal because// the ClientConn is closing.//// Deprecated: this error should not be relied upon by users; use the status// code of Canceled instead.ErrClientConnClosing =status.Error(codes.Canceled, "grpc: the client connection is closing")// PickFirstBalancerName is the name of the pick_first balancer.PickFirstBalancerName =pickfirst.Name)View Sourcevar DefaultBackoffConfig =BackoffConfig{MaxDelay: 120 *time.Second,
}DefaultBackoffConfig uses values specified for backoff inhttps://github.com/grpc/grpc/blob/master/doc/connection-backoff.md.Deprecated: use ConnectParams instead. Will be supported throughout 1.x.View Sourcevar EnableTracingboolEnableTracing controls whether to trace RPCs using the golang.org/x/net/trace package.
This should only be set before any RPCs are sent or received by this program.View Sourcevar ErrClientConnTimeout =errors.New("grpc: timed out when dialing")ErrClientConnTimeout indicates that the ClientConn cannot establish the
underlying connections within the specified timeout.Deprecated: This error is never returned by grpc and should not be
referenced by users.View Sourcevar ErrServerStopped =errors.New("grpc: the server has been stopped")ErrServerStopped indicates that the operation is now illegal because of
the server being stopped.Functions¶funcClientSupportedCompressors¶added inv1.54.0func ClientSupportedCompressors(ctxcontext.Context) ([]string,error)ExperimentalClientSupportedCompressors returns compressor names advertised by the client
via grpc-accept-encoding header.The context provided must be the context passed to the server's handler.Experimental¶Notice: This function is EXPERIMENTAL and may be changed or removed in a
later release.funcCodedeprecatedfunc Code(errerror)codes.CodeCode returns the error code for err if it was produced by the rpc system.
Otherwise, it returns codes.Unknown.Deprecated: use status.Code instead.funcErrorDescdeprecatedfunc ErrorDesc(errerror)stringErrorDesc returns the error description of err if it was produced by the rpc system.
Otherwise, it returns err.Error() or empty string when err is nil.Deprecated: use status.Convert and Message method instead.funcErrorfdeprecatedfunc Errorf(ccodes.Code, formatstring, a ...any)errorErrorf returns an error containing an error code and a description;
Errorf returns nil if c is OK.Deprecated: use status.Errorf instead.funcInvoke¶func Invoke(ctxcontext.Context, methodstring, args, replyany, cc *ClientConn, opts ...CallOption)errorInvoke sends the RPC request on the wire and returns after response is
received.  This is typically called by generated code.DEPRECATED: Use ClientConn.Invoke instead.funcMethod¶added inv1.11.2func Method(ctxcontext.Context) (string,bool)Method returns the method string for the server context.  The returned
string is in the format of "/service/method".funcMethodFromServerStream¶added inv1.8.0func MethodFromServerStream(streamServerStream) (string,bool)MethodFromServerStream returns the method string for the input stream.
The returned string is in the format of "/service/method".funcNewContextWithServerTransportStream¶added inv1.11.0func NewContextWithServerTransportStream(ctxcontext.Context, streamServerTransportStream)context.ContextExperimentalNewContextWithServerTransportStream creates a new context from ctx and
attaches stream to it.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcSendHeader¶func SendHeader(ctxcontext.Context, mdmetadata.MD)errorSendHeader sends header metadata. It may be called at most once, and may not
be called after any event that causes headers to be sent (see SetHeader for
a complete list).  The provided md and headers set by SetHeader() will be
sent.The error returned is compatible with the status package.  However, the
status code will often not match the RPC status as seen by the client
application, and therefore, should not be relied upon for this purpose.funcSetHeader¶added inv1.0.3func SetHeader(ctxcontext.Context, mdmetadata.MD)errorSetHeader sets the header metadata to be sent from the server to the client.
The context provided must be the context passed to the server's handler.Streaming RPCs should prefer the SetHeader method of the ServerStream.When called multiple times, all the provided metadata will be merged.  All
the metadata will be sent out when one of the following happens:grpc.SendHeader is called, or for streaming handlers, stream.SendHeader.The first response message is sent.  For unary handlers, this occurs when
the handler returns; for streaming handlers, this can happen when stream's
SendMsg method is called.An RPC status is sent out (error or success).  This occurs when the handler
returns.SetHeader will fail if called after any of the events above.The error returned is compatible with the status package.  However, the
status code will often not match the RPC status as seen by the client
application, and therefore, should not be relied upon for this purpose.funcSetSendCompressor¶added inv1.54.0func SetSendCompressor(ctxcontext.Context, namestring)errorExperimentalSetSendCompressor sets a compressor for outbound messages from the server.
It must not be called after any event that causes headers to be sent
(see ServerStream.SetHeader for the complete list). Provided compressor is
used when below conditions are met:compressor is registered via encoding.RegisterCompressorcompressor name must exist in the client advertised compressor names
sent in grpc-accept-encoding header. Use ClientSupportedCompressors to
get client supported compressor names.The context provided must be the context passed to the server's handler.
It must be noted that compressor name encoding.Identity disables the
outbound compression.
By default, server messages will be sent using the same compressor with
which request messages were sent.It is not safe to call SetSendCompressor concurrently with SendHeader and
SendMsg.Experimental¶Notice: This function is EXPERIMENTAL and may be changed or removed in a
later release.funcSetTrailer¶func SetTrailer(ctxcontext.Context, mdmetadata.MD)errorSetTrailer sets the trailer metadata that will be sent when an RPC returns.
When called more than once, all the provided metadata will be merged.The error returned is compatible with the status package.  However, the
status code will often not match the RPC status as seen by the client
application, and therefore, should not be relied upon for this purpose.Types¶typeBackoffConfigdeprecatedtype BackoffConfig struct {// MaxDelay is the upper bound of backoff delay.MaxDelaytime.Duration}BackoffConfig defines the parameters for the default gRPC backoff strategy.Deprecated: use ConnectParams instead. Will be supported throughout 1.x.typeBidiStreamingClient¶added inv1.64.0type BidiStreamingClient[Reqany, Resany] interface {Send(*Req)errorRecv() (*Res,error)ClientStream}BidiStreamingClient represents the client side of a bidirectional-streaming
(many requests, many responses) RPC. It is generic over both the type of the
request message stream and the type of the response message stream. It is
used in generated code.typeBidiStreamingServer¶added inv1.64.0type BidiStreamingServer[Reqany, Resany] interface {Recv() (*Req,error)Send(*Res)errorServerStream}BidiStreamingServer represents the server side of a bidirectional-streaming
(many requests, many responses) RPC. It is generic over both the type of the
request message stream and the type of the response message stream. It is
used in generated code.typeCallOption¶type CallOption interface {// contains filtered or unexported methods}CallOption configures a Call before it starts or extracts information from
a Call after it completes.funcCallContentSubtype¶added inv1.10.0func CallContentSubtype(contentSubtypestring)CallOptionCallContentSubtype returns a CallOption that will set the content-subtype
for a call. For example, if content-subtype is "json", the Content-Type over
the wire will be "application/grpc+json". The content-subtype is converted
to lowercase before being included in Content-Type. See Content-Type onhttps://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requestsfor
more details.If ForceCodec is not also used, the content-subtype will be used to look up
the Codec to use in the registry controlled by RegisterCodec. See the
documentation on RegisterCodec for details on registration. The lookup of
content-subtype is case-insensitive. If no such Codec is found, the call
will result in an error with code codes.Internal.If ForceCodec is also used, that Codec will be used for all request and
response messages, with the content-subtype set to the given contentSubtype
here for requests.funcCallCustomCodecdeprecatedadded inv1.10.0func CallCustomCodec(codecCodec)CallOptionCallCustomCodec behaves like ForceCodec, but accepts a grpc.Codec instead of
an encoding.Codec.Deprecated: use ForceCodec instead.funcFailFastdeprecatedfunc FailFast(failFastbool)CallOptionFailFast is the opposite of WaitForReady.Deprecated: use WaitForReady.funcForceCodec¶added inv1.19.0func ForceCodec(codecencoding.Codec)CallOptionExperimentalForceCodec returns a CallOption that will set codec to be used for all
request and response messages for a call. The result of calling Name() will
be used as the content-subtype after converting to lowercase, unless
CallContentSubtype is also used.See Content-Type onhttps://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requestsfor
more details. Also see the documentation on RegisterCodec and
CallContentSubtype for more details on the interaction between Codec and
content-subtype.This function is provided for advanced users; prefer to use only
CallContentSubtype to select a registered codec instead.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcForceCodecV2¶added inv1.66.0func ForceCodecV2(codecencoding.CodecV2)CallOptionExperimentalForceCodecV2 returns a CallOption that will set codec to be used for all
request and response messages for a call. The result of calling Name() will
be used as the content-subtype after converting to lowercase, unless
CallContentSubtype is also used.See Content-Type onhttps://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requestsfor
more details. Also see the documentation on RegisterCodec and
CallContentSubtype for more details on the interaction between Codec and
content-subtype.This function is provided for advanced users; prefer to use only
CallContentSubtype to select a registered codec instead.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcHeader¶func Header(md *metadata.MD)CallOptionHeader returns a CallOptions that retrieves the header metadata
for a unary RPC.funcMaxCallRecvMsgSize¶added inv1.4.0func MaxCallRecvMsgSize(bytesint)CallOptionMaxCallRecvMsgSize returns a CallOption which sets the maximum message size
in bytes the client can receive. If this is not set, gRPC uses the default
4MB.funcMaxCallSendMsgSize¶added inv1.4.0func MaxCallSendMsgSize(bytesint)CallOptionMaxCallSendMsgSize returns a CallOption which sets the maximum message size
in bytes the client can send. If this is not set, gRPC uses the default
`math.MaxInt32`.funcMaxRetryRPCBufferSize¶added inv1.14.0func MaxRetryRPCBufferSize(bytesint)CallOptionExperimentalMaxRetryRPCBufferSize returns a CallOption that limits the amount of memory
used for buffering this RPC's requests for retry purposes.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcOnFinish¶added inv1.54.0func OnFinish(onFinish func(errerror))CallOptionExperimentalOnFinish returns a CallOption that configures a callback to be called when
the call completes. The error passed to the callback is the status of the
RPC, and may be nil. The onFinish callback provided will only be called once
by gRPC. This is mainly used to be used by streaming interceptors, to be
notified when the RPC completes along with information about the status of
the RPC.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcPeer¶added inv1.2.0func Peer(p *peer.Peer)CallOptionPeer returns a CallOption that retrieves peer information for a unary RPC.
The peer field will be populated *after* the RPC completes.funcPerRPCCredentials¶added inv1.4.0func PerRPCCredentials(credscredentials.PerRPCCredentials)CallOptionPerRPCCredentials returns a CallOption that sets credentials.PerRPCCredentials
for a call.funcStaticMethod¶added inv1.62.0func StaticMethod()CallOptionStaticMethod returns a CallOption which specifies that a call is being made
to a method that is static, which means the method is known at compile time
and doesn't change at runtime. This can be used as a signal to stats plugins
that this method is safe to include as a key to a measurement.funcTrailer¶func Trailer(md *metadata.MD)CallOptionTrailer returns a CallOptions that retrieves the trailer metadata
for a unary RPC.funcUseCompressor¶added inv1.8.0func UseCompressor(namestring)CallOptionExperimentalUseCompressor returns a CallOption which sets the compressor used when
sending the request.  If WithCompressor is also set, UseCompressor has
higher priority.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcWaitForReady¶added inv1.18.0func WaitForReady(waitForReadybool)CallOptionWaitForReady configures the RPC's behavior when the client is in
TRANSIENT_FAILURE, which occurs when all addresses fail to connect.  If
waitForReady is false, the RPC will fail immediately.  Otherwise, the client
will wait until a connection becomes available or the RPC's deadline is
reached.By default, RPCs do not "wait for ready".typeClientConn¶type ClientConn struct {// contains filtered or unexported fields}ClientConn represents a virtual connection to a conceptual endpoint, to
perform RPCs.A ClientConn is free to have zero or more actual connections to the endpoint
based on configuration, load, etc. It is also free to determine which actual
endpoints to use and may change it every RPC, permitting client-side load
balancing.A ClientConn encapsulates a range of functionality including name
resolution, TCP connection establishment (with retries and backoff) and TLS
handshakes. It also handles errors on established connections by
re-resolving the name and reconnecting.funcDialdeprecatedfunc Dial(targetstring, opts ...DialOption) (*ClientConn,error)Dial calls DialContext(context.Background(), target, opts...).Deprecated: use NewClient instead.  Will be supported throughout 1.x.funcDialContextdeprecatedadded inv1.0.2func DialContext(ctxcontext.Context, targetstring, opts ...DialOption) (conn *ClientConn, errerror)DialContext calls NewClient and then exits idle mode.  If WithBlock(true) is
used, it calls Connect and WaitForStateChange until either the context
expires or the state of the ClientConn is Ready.One subtle difference between NewClient and Dial and DialContext is that the
former uses "dns" as the default name resolver, while the latter use
"passthrough" for backward compatibility.  This distinction should not matter
to most users, but could matter to legacy users that specify a custom dialer
and expect it to receive the target string directly.Deprecated: use NewClient instead.  Will be supported throughout 1.x.funcNewClient¶added inv1.63.0func NewClient(targetstring, opts ...DialOption) (conn *ClientConn, errerror)NewClient creates a new gRPC "channel" for the target URI provided.  No I/O
is performed.  Use of the ClientConn for RPCs will automatically cause it to
connect.  Connect may be used to manually create a connection, but for most
users this is unnecessary.The target name syntax is defined inhttps://github.com/grpc/grpc/blob/master/doc/naming.md.  e.g. to use dns
resolver, a "dns:///" prefix should be applied to the target.The DialOptions returned by WithBlock, WithTimeout,
WithReturnConnectionError, and FailOnNonTempDialError are ignored by this
function.func (*ClientConn)CanonicalTarget¶added inv1.63.0func (cc *ClientConn) CanonicalTarget()stringCanonicalTarget returns the canonical target string of the ClientConn.func (*ClientConn)Close¶func (cc *ClientConn) Close()errorClose tears down the ClientConn and all underlying connections.func (*ClientConn)Connect¶added inv1.41.0func (cc *ClientConn) Connect()ExperimentalConnect causes all subchannels in the ClientConn to attempt to connect if
the channel is idle.  Does not wait for the connection attempts to begin
before returning.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a later
release.func (*ClientConn)GetMethodConfig¶added inv1.4.0func (cc *ClientConn) GetMethodConfig(methodstring)MethodConfigGetMethodConfig gets the method config of the input method.
If there's an exact match for input method (i.e. /service/method), we return
the corresponding MethodConfig.
If there isn't an exact match for the input method, we look for the service's default
config under the service (i.e /service/) and then for the default for all services (empty string).If there is a default MethodConfig for the service, we return it.
Otherwise, we return an empty MethodConfig.func (*ClientConn)GetState¶added inv1.5.2func (cc *ClientConn) GetState()connectivity.StateGetState returns the connectivity.State of ClientConn.func (*ClientConn)Invoke¶added inv1.8.0func (cc *ClientConn) Invoke(ctxcontext.Context, methodstring, args, replyany, opts ...CallOption)errorInvoke sends the RPC request on the wire and returns after response is
received.  This is typically called by generated code.All errors returned by Invoke are compatible with the status package.func (*ClientConn)NewStream¶added inv1.8.0func (cc *ClientConn) NewStream(ctxcontext.Context, desc *StreamDesc, methodstring, opts ...CallOption) (ClientStream,error)NewStream creates a new Stream for the client side. This is typically
called by generated code. ctx is used for the lifetime of the stream.To ensure resources are not leaked due to the stream returned, one of the following
actions must be performed:Call Close on the ClientConn.Cancel the context provided.Call RecvMsg until a non-nil error is returned. A protobuf-generated
client-streaming RPC, for instance, might use the helper function
CloseAndRecv (note that CloseSend does not Recv, therefore is not
guaranteed to release all resources).Receive a non-nil, non-io.EOF error from Header or SendMsg.If none of the above happen, a goroutine and a context will be leaked, and grpc
will not call the optionally-configured stats handler with a stats.End message.func (*ClientConn)ResetConnectBackoff¶added inv1.15.0func (cc *ClientConn) ResetConnectBackoff()ExperimentalResetConnectBackoff wakes up all subchannels in transient failure and causes
them to attempt another connection immediately.  It also resets the backoff
times used for subsequent attempts regardless of the current state.In general, this function should not be used.  Typical service or network
outages result in a reasonable client reconnection strategy by default.
However, if a previously unavailable network becomes available, this may be
used to trigger an immediate reconnect.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.func (*ClientConn)Target¶added inv1.14.0func (cc *ClientConn) Target()stringTarget returns the target string of the ClientConn.func (*ClientConn)WaitForStateChange¶added inv1.5.2func (cc *ClientConn) WaitForStateChange(ctxcontext.Context, sourceStateconnectivity.State)boolWaitForStateChange waits until the connectivity.State of ClientConn changes from sourceState or
ctx expires. A true value is returned in former case and false in latter.typeClientConnInterface¶added inv1.27.0type ClientConnInterface interface {// Invoke performs a unary RPC and returns after the response is received// into reply.Invoke(ctxcontext.Context, methodstring, argsany, replyany, opts ...CallOption)error// NewStream begins a streaming RPC.NewStream(ctxcontext.Context, desc *StreamDesc, methodstring, opts ...CallOption) (ClientStream,error)
}ClientConnInterface defines the functions clients need to perform unary and
streaming RPCs.  It is implemented by *ClientConn, and is only intended to
be referenced by generated code.typeClientStream¶type ClientStream interface {// Header returns the header metadata received from the server if there// is any. It blocks if the metadata is not ready to read.  If the metadata// is nil and the error is also nil, then the stream was terminated without// headers, and the status can be discovered by calling RecvMsg.Header() (metadata.MD,error)// Trailer returns the trailer metadata from the server, if there is any.// It must only be called after stream.CloseAndRecv has returned, or// stream.Recv has returned a non-nil error (including io.EOF).Trailer()metadata.MD// CloseSend closes the send direction of the stream. It closes the stream// when non-nil error is met. It is also not safe to call CloseSend// concurrently with SendMsg.CloseSend()error// Context returns the context for this stream.//// It should not be called until after Header or RecvMsg has returned. Once// called, subsequent client-side retries are disabled.Context()context.Context// SendMsg is generally called by generated code. On error, SendMsg aborts// the stream. If the error was generated by the client, the status is// returned directly; otherwise, io.EOF is returned and the status of// the stream may be discovered using RecvMsg.//// SendMsg blocks until://   - There is sufficient flow control to schedule m with the transport, or//   - The stream is done, or//   - The stream breaks.//// SendMsg does not wait until the message is received by the server. An// untimely stream closure may result in lost messages. To ensure delivery,// users should ensure the RPC completed successfully using RecvMsg.//// It is safe to have a goroutine calling SendMsg and another goroutine// calling RecvMsg on the same stream at the same time, but it is not safe// to call SendMsg on the same stream in different goroutines. It is also// not safe to call CloseSend concurrently with SendMsg.//// It is not safe to modify the message after calling SendMsg. Tracing// libraries and stats handlers may use the message lazily.SendMsg(many)error// RecvMsg blocks until it receives a message into m or the stream is// done. It returns io.EOF when the stream completes successfully. On// any other error, the stream is aborted and the error contains the RPC// status.//// It is safe to have a goroutine calling SendMsg and another goroutine// calling RecvMsg on the same stream at the same time, but it is not// safe to call RecvMsg on the same stream in different goroutines.RecvMsg(many)error}ClientStream defines the client-side behavior of a streaming RPC.All errors returned from ClientStream methods are compatible with the
status package.funcNewClientStream¶func NewClientStream(ctxcontext.Context, desc *StreamDesc, cc *ClientConn, methodstring, opts ...CallOption) (ClientStream,error)NewClientStream is a wrapper for ClientConn.NewStream.typeClientStreamingClient¶added inv1.64.0type ClientStreamingClient[Reqany, Resany] interface {Send(*Req)errorCloseAndRecv() (*Res,error)ClientStream}ClientStreamingClient represents the client side of a client-streaming (many
requests, one response) RPC. It is generic over both the type of the request
message stream and the type of the unary response message. It is used in
generated code.typeClientStreamingServer¶added inv1.64.0type ClientStreamingServer[Reqany, Resany] interface {Recv() (*Req,error)SendAndClose(*Res)errorServerStream}ClientStreamingServer represents the server side of a client-streaming (many
requests, one response) RPC. It is generic over both the type of the request
message stream and the type of the unary response message. It is used in
generated code.typeCodecdeprecatedtype Codec interface {// Marshal returns the wire format of v.Marshal(vany) ([]byte,error)// Unmarshal parses the wire format into v.Unmarshal(data []byte, vany)error// String returns the name of the Codec implementation.  This is unused by// gRPC.String()string}Codec defines the interface gRPC uses to encode and decode messages.
Note that implementations of this interface must be thread safe;
a Codec's methods can be called from concurrent goroutines.Deprecated: use encoding.Codec instead.typeCompressordeprecatedtype Compressor interface {// Do compresses p into w.Do(wio.Writer, p []byte)error// Type returns the compression algorithm the Compressor uses.Type()string}Compressor defines the interface gRPC uses to compress a message.Deprecated: use package encoding.funcNewGZIPCompressordeprecatedfunc NewGZIPCompressor()CompressorNewGZIPCompressor creates a Compressor based on GZIP.Deprecated: use package encoding/gzip.funcNewGZIPCompressorWithLeveldeprecatedadded inv1.11.0func NewGZIPCompressorWithLevel(levelint) (Compressor,error)NewGZIPCompressorWithLevel is like NewGZIPCompressor but specifies the gzip compression level instead
of assuming DefaultCompression.The error returned will be nil if the level is valid.Deprecated: use package encoding/gzip.typeCompressorCallOption¶added inv1.11.0type CompressorCallOption struct {CompressorTypestring}ExperimentalCompressorCallOption is a CallOption that indicates the compressor to use.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeConnectParams¶added inv1.25.0type ConnectParams struct {// Backoff specifies the configuration options for connection backoff.Backoffbackoff.Config// MinConnectTimeout is the minimum amount of time we are willing to give a// connection to complete.MinConnectTimeouttime.Duration}ExperimentalConnectParams defines the parameters for connecting and retrying. Users are
encouraged to use this instead of the BackoffConfig type defined above. See
here for more details:https://github.com/grpc/grpc/blob/master/doc/connection-backoff.md.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeContentSubtypeCallOption¶added inv1.11.0type ContentSubtypeCallOption struct {ContentSubtypestring}ExperimentalContentSubtypeCallOption is a CallOption that indicates the content-subtype
used for marshaling messages.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeCustomCodecCallOption¶added inv1.11.0type CustomCodecCallOption struct {CodecCodec}ExperimentalCustomCodecCallOption is a CallOption that indicates the codec used for
marshaling messages.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeDecompressordeprecatedtype Decompressor interface {// Do reads the data from r and uncompress them.Do(rio.Reader) ([]byte,error)// Type returns the compression algorithm the Decompressor uses.Type()string}Decompressor defines the interface gRPC uses to decompress a message.Deprecated: use package encoding.funcNewGZIPDecompressordeprecatedfunc NewGZIPDecompressor()DecompressorNewGZIPDecompressor creates a Decompressor based on GZIP.Deprecated: use package encoding/gzip.typeDialOption¶type DialOption interface {// contains filtered or unexported methods}DialOption configures how we set up the connection.funcFailOnNonTempDialErrordeprecatedadded inv1.0.5func FailOnNonTempDialError(fbool)DialOptionFailOnNonTempDialError returns a DialOption that specifies if gRPC fails on
non-temporary dial errors. If f is true, and dialer returns a non-temporary
error, gRPC will fail the connection to the network address and won't try to
reconnect. The default value of FailOnNonTempDialError is false.FailOnNonTempDialError only affects the initial dial, and does not do
anything useful unless you are also using WithBlock().Use of this feature is not recommended.  For more information, please see:https://github.com/grpc/grpc-go/blob/master/Documentation/anti-patterns.mdDeprecated: this DialOption is not supported by NewClient.
This API may be changed or removed in a
later release.funcWithAuthority¶added inv1.2.0func WithAuthority(astring)DialOptionWithAuthority returns a DialOption that specifies the value to be used as the
:authority pseudo-header and as the server name in authentication handshake.funcWithBackoffConfigdeprecatedfunc WithBackoffConfig(bBackoffConfig)DialOptionWithBackoffConfig configures the dialer to use the provided backoff
parameters after connection failures.Deprecated: use WithConnectParams instead. Will be supported throughout 1.x.funcWithBackoffMaxDelaydeprecatedfunc WithBackoffMaxDelay(mdtime.Duration)DialOptionWithBackoffMaxDelay configures the dialer to use the provided maximum delay
when backing off after failed connection attempts.Deprecated: use WithConnectParams instead. Will be supported throughout 1.x.funcWithBlockdeprecatedfunc WithBlock()DialOptionWithBlock returns a DialOption which makes callers of Dial block until the
underlying connection is up. Without this, Dial returns immediately and
connecting the server happens in background.Use of this feature is not recommended.  For more information, please see:https://github.com/grpc/grpc-go/blob/master/Documentation/anti-patterns.mdDeprecated: this DialOption is not supported by NewClient.
Will be supported throughout 1.x.funcWithChainStreamInterceptor¶added inv1.21.0func WithChainStreamInterceptor(interceptors ...StreamClientInterceptor)DialOptionWithChainStreamInterceptor returns a DialOption that specifies the chained
interceptor for streaming RPCs. The first interceptor will be the outer most,
while the last interceptor will be the inner most wrapper around the real call.
All interceptors added by this method will be chained, and the interceptor
defined by WithStreamInterceptor will always be prepended to the chain.funcWithChainUnaryInterceptor¶added inv1.21.0func WithChainUnaryInterceptor(interceptors ...UnaryClientInterceptor)DialOptionWithChainUnaryInterceptor returns a DialOption that specifies the chained
interceptor for unary RPCs. The first interceptor will be the outer most,
while the last interceptor will be the inner most wrapper around the real call.
All interceptors added by this method will be chained, and the interceptor
defined by WithUnaryInterceptor will always be prepended to the chain.funcWithChannelzParentID¶added inv1.12.0func WithChannelzParentID(cchannelz.Identifier)DialOptionExperimentalWithChannelzParentID returns a DialOption that specifies the channelz ID of
current ClientConn's parent. This function is used in nested channel creation
(e.g. grpclb dial).Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcWithCodecdeprecatedfunc WithCodec(cCodec)DialOptionWithCodec returns a DialOption which sets a codec for message marshaling and
unmarshaling.Deprecated: use WithDefaultCallOptions(ForceCodec(_)) instead.  Will be
supported throughout 1.x.funcWithCompressordeprecatedfunc WithCompressor(cpCompressor)DialOptionWithCompressor returns a DialOption which sets a Compressor to use for
message compression. It has lower priority than the compressor set by the
UseCompressor CallOption.Deprecated: use UseCompressor instead.  Will be supported throughout 1.x.funcWithConnectParams¶added inv1.25.0func WithConnectParams(pConnectParams)DialOptionWithConnectParams configures the ClientConn to use the provided ConnectParams
for creating and maintaining connections to servers.The backoff configuration specified as part of the ConnectParams overrides
all defaults specified inhttps://github.com/grpc/grpc/blob/master/doc/connection-backoff.md. Consider
using the backoff.DefaultConfig as a base, in cases where you want to
override only a subset of the backoff configuration.funcWithContextDialer¶added inv1.19.0func WithContextDialer(f func(context.Context,string) (net.Conn,error))DialOptionWithContextDialer returns a DialOption that sets a dialer to create
connections. If FailOnNonTempDialError() is set to true, and an error is
returned by f, gRPC checks the error's Temporary() method to decide if it
should try to reconnect to the network address.Note: All supported releases of Go (as of December 2023) override the OS
defaults for TCP keepalive time and interval to 15s. To enable TCP keepalive
with OS defaults for keepalive time and interval, use a net.Dialer that sets
the KeepAlive field to a negative value, and sets the SO_KEEPALIVE socket
option to true from the Control field. For a concrete example of how to do
this, see internal.NetDialerWithTCPKeepalive().For more information, please seeissue 23459in the Go github repo.funcWithCredentialsBundle¶added inv1.16.0func WithCredentialsBundle(bcredentials.Bundle)DialOptionExperimentalWithCredentialsBundle returns a DialOption to set a credentials bundle for
the ClientConn.WithCreds. This should not be used together with
WithTransportCredentials.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcWithDecompressordeprecatedfunc WithDecompressor(dcDecompressor)DialOptionWithDecompressor returns a DialOption which sets a Decompressor to use for
incoming message decompression.  If incoming response messages are encoded
using the decompressor's Type(), it will be used.  Otherwise, the message
encoding will be used to look up the compressor registered via
encoding.RegisterCompressor, which will then be used to decompress the
message.  If no compressor is registered for the encoding, an Unimplemented
status error will be returned.Deprecated: use encoding.RegisterCompressor instead.  Will be supported
throughout 1.x.funcWithDefaultCallOptions¶added inv1.4.0func WithDefaultCallOptions(cos ...CallOption)DialOptionWithDefaultCallOptions returns a DialOption which sets the default
CallOptions for calls over the connection.funcWithDefaultServiceConfig¶added inv1.20.0func WithDefaultServiceConfig(sstring)DialOptionWithDefaultServiceConfig returns a DialOption that configures the default
service config, which will be used in cases where:1. WithDisableServiceConfig is also used, or2. The name resolver does not provide a service config or provides an
invalid service config.The parameter s is the JSON representation of the default service config.
For more information about service configs, see:https://github.com/grpc/grpc/blob/master/doc/service_config.mdFor a simple example of usage, see:
examples/features/load_balancing/client/main.gofuncWithDialerdeprecatedfunc WithDialer(f func(string,time.Duration) (net.Conn,error))DialOptionWithDialer returns a DialOption that specifies a function to use for dialing
network addresses. If FailOnNonTempDialError() is set to true, and an error
is returned by f, gRPC checks the error's Temporary() method to decide if it
should try to reconnect to the network address.Deprecated: use WithContextDialer instead.  Will be supported throughout
1.x.funcWithDisableHealthCheck¶added inv1.17.0func WithDisableHealthCheck()DialOptionExperimentalWithDisableHealthCheck disables the LB channel health checking for all
SubConns of this ClientConn.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcWithDisableRetry¶added inv1.14.0func WithDisableRetry()DialOptionWithDisableRetry returns a DialOption that disables retries, even if the
service config enables them.  This does not impact transparent retries, which
will happen automatically if no data is written to the wire or if the RPC is
unprocessed by the remote server.funcWithDisableServiceConfig¶added inv1.12.0func WithDisableServiceConfig()DialOptionWithDisableServiceConfig returns a DialOption that causes gRPC to ignore any
service config provided by the resolver and provides a hint to the resolver
to not fetch service configs.Note that this dial option only disables service config from resolver. If
default service config is provided, gRPC will use the default service config.funcWithIdleTimeout¶added inv1.56.0func WithIdleTimeout(dtime.Duration)DialOptionExperimentalWithIdleTimeout returns a DialOption that configures an idle timeout for the
channel. If the channel is idle for the configured timeout, i.e there are no
ongoing RPCs and no new RPCs are initiated, the channel will enter idle mode
and as a result the name resolver and load balancer will be shut down. The
channel will exit idle mode when the Connect() method is called or when an
RPC is initiated.A default timeout of 30 minutes will be used if this dial option is not set
at dial time and idleness can be disabled by passing a timeout of zero.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcWithInitialConnWindowSize¶added inv1.4.0func WithInitialConnWindowSize(sint32)DialOptionWithInitialConnWindowSize returns a DialOption which sets the value for
initial window size on a connection. The lower bound for window size is 64K
and any value smaller than that will be ignored.funcWithInitialWindowSize¶added inv1.4.0func WithInitialWindowSize(sint32)DialOptionWithInitialWindowSize returns a DialOption which sets the value for initial
window size on a stream. The lower bound for window size is 64K and any value
smaller than that will be ignored.funcWithInsecuredeprecatedfunc WithInsecure()DialOptionWithInsecure returns a DialOption which disables transport security for this
ClientConn. Under the hood, it uses insecure.NewCredentials().Note that using this DialOption with per-RPC credentials (through
WithCredentialsBundle or WithPerRPCCredentials) which require transport
security is incompatible and will cause grpc.Dial() to fail.Deprecated: use WithTransportCredentials and insecure.NewCredentials()
instead. Will be supported throughout 1.x.funcWithKeepaliveParams¶added inv1.2.0func WithKeepaliveParams(kpkeepalive.ClientParameters)DialOptionWithKeepaliveParams returns a DialOption that specifies keepalive parameters
for the client transport.funcWithMaxCallAttempts¶added inv1.65.0func WithMaxCallAttempts(nint)DialOptionWithMaxCallAttempts returns a DialOption that configures the maximum number
of attempts per call (including retries and hedging) using the channel.
Service owners may specify a higher value for these parameters, but higher
values will be treated as equal to the maximum value by the client
implementation. This mitigates security concerns related to the service
config being transferred to the client via DNS.A value of 5 will be used if this dial option is not set or n < 2.funcWithMaxHeaderListSize¶added inv1.14.0func WithMaxHeaderListSize(suint32)DialOptionWithMaxHeaderListSize returns a DialOption that specifies the maximum
(uncompressed) size of header list that the client is prepared to accept.funcWithMaxMsgSizedeprecatedadded inv1.2.0func WithMaxMsgSize(sint)DialOptionWithMaxMsgSize returns a DialOption which sets the maximum message size the
client can receive.Deprecated: use WithDefaultCallOptions(MaxCallRecvMsgSize(s)) instead.  Will
be supported throughout 1.x.funcWithNoProxy¶added inv1.29.0func WithNoProxy()DialOptionExperimentalWithNoProxy returns a DialOption which disables the use of proxies for this
ClientConn. This is ignored if WithDialer or WithContextDialer are used.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcWithPerRPCCredentials¶func WithPerRPCCredentials(credscredentials.PerRPCCredentials)DialOptionWithPerRPCCredentials returns a DialOption which sets credentials and places
auth state on each outbound RPC.funcWithReadBufferSize¶added inv1.7.0func WithReadBufferSize(sint)DialOptionWithReadBufferSize lets you set the size of read buffer, this determines how
much data can be read at most for each read syscall.The default value for this buffer is 32KB. Zero or negative values will
disable read buffer for a connection so data framer can access the
underlying conn directly.funcWithResolvers¶added inv1.27.0func WithResolvers(rs ...resolver.Builder)DialOptionExperimentalWithResolvers allows a list of resolver implementations to be registered
locally with the ClientConn without needing to be globally registered via
resolver.Register.  They will be matched against the scheme used for the
current Dial only, and will take precedence over the global registry.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcWithReturnConnectionErrordeprecatedadded inv1.30.0func WithReturnConnectionError()DialOptionWithReturnConnectionError returns a DialOption which makes the client connection
return a string containing both the last connection error that occurred and
the context.DeadlineExceeded error.
Implies WithBlock()Use of this feature is not recommended.  For more information, please see:https://github.com/grpc/grpc-go/blob/master/Documentation/anti-patterns.mdDeprecated: this DialOption is not supported by NewClient.
Will be supported throughout 1.x.funcWithSharedWriteBuffer¶added inv1.58.0func WithSharedWriteBuffer(valbool)DialOptionExperimentalWithSharedWriteBuffer allows reusing per-connection transport write buffer.
If this option is set to true every connection will release the buffer after
flushing the data on the wire.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcWithStatsHandler¶added inv1.2.0func WithStatsHandler(hstats.Handler)DialOptionWithStatsHandler returns a DialOption that specifies the stats handler for
all the RPCs and underlying network connections in this ClientConn.funcWithStreamInterceptor¶added inv1.0.2func WithStreamInterceptor(fStreamClientInterceptor)DialOptionWithStreamInterceptor returns a DialOption that specifies the interceptor for
streaming RPCs.funcWithTimeoutdeprecatedfunc WithTimeout(dtime.Duration)DialOptionWithTimeout returns a DialOption that configures a timeout for dialing a
ClientConn initially. This is valid if and only if WithBlock() is present.Deprecated: this DialOption is not supported by NewClient.
Will be supported throughout 1.x.funcWithTransportCredentials¶func WithTransportCredentials(credscredentials.TransportCredentials)DialOptionWithTransportCredentials returns a DialOption which configures a connection
level security credentials (e.g., TLS/SSL). This should not be used together
with WithCredentialsBundle.funcWithUnaryInterceptor¶added inv1.0.2func WithUnaryInterceptor(fUnaryClientInterceptor)DialOptionWithUnaryInterceptor returns a DialOption that specifies the interceptor for
unary RPCs.funcWithUserAgent¶func WithUserAgent(sstring)DialOptionWithUserAgent returns a DialOption that specifies a user agent string for all
the RPCs.funcWithWriteBufferSize¶added inv1.7.0func WithWriteBufferSize(sint)DialOptionWithWriteBufferSize determines how much data can be batched before doing a
write on the wire. The default value for this buffer is 32KB.Zero or negative values will disable the write buffer such that each write
will be on underlying connection. Note: A Send call may not directly
translate to a write.typeEmptyCallOption¶added inv1.4.0type EmptyCallOption struct{}EmptyCallOption does not alter the Call configuration.
It can be embedded in another structure to carry satellite data for use
by interceptors.typeEmptyDialOption¶added inv1.14.0type EmptyDialOption struct{}ExperimentalEmptyDialOption does not alter the dial configuration. It can be embedded in
another structure to build custom dial options.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeEmptyServerOption¶added inv1.21.0type EmptyServerOption struct{}ExperimentalEmptyServerOption does not alter the server configuration. It can be embedded
in another structure to build custom server options.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeFailFastCallOption¶added inv1.11.0type FailFastCallOption struct {FailFastbool}ExperimentalFailFastCallOption is a CallOption for indicating whether an RPC should fail
fast or not.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeForceCodecCallOption¶added inv1.19.0type ForceCodecCallOption struct {Codecencoding.Codec}ExperimentalForceCodecCallOption is a CallOption that indicates the codec used for
marshaling messages.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeForceCodecV2CallOption¶added inv1.66.0type ForceCodecV2CallOption struct {CodecV2encoding.CodecV2}ExperimentalForceCodecV2CallOption is a CallOption that indicates the codec used for
marshaling messages.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeGenericClientStream¶added inv1.64.0type GenericClientStream[Reqany, Resany] struct {ClientStream}GenericClientStream implements the ServerStreamingClient, ClientStreamingClient,
and BidiStreamingClient interfaces. It is used in generated code.func (*GenericClientStream[Req, Res])CloseAndRecv¶added inv1.64.0func (x *GenericClientStream[Req, Res]) CloseAndRecv() (*Res,error)CloseAndRecv closes the sending side of the stream, then receives the unary
response from the server. The type of message which it returns is determined
by the Res type parameter of the GenericClientStream receiver.func (*GenericClientStream[Req, Res])Recv¶added inv1.64.0func (x *GenericClientStream[Req, Res]) Recv() (*Res,error)Recv reads one message from the stream of responses generated by the server.
The type of the message returned is determined by the Res type parameter
of the GenericClientStream receiver.func (*GenericClientStream[Req, Res])Send¶added inv1.64.0func (x *GenericClientStream[Req, Res]) Send(m *Req)errorSend pushes one message into the stream of requests to be consumed by the
server. The type of message which can be sent is determined by the Req type
parameter of the GenericClientStream receiver.typeGenericServerStream¶added inv1.64.0type GenericServerStream[Reqany, Resany] struct {ServerStream}GenericServerStream implements the ServerStreamingServer, ClientStreamingServer,
and BidiStreamingServer interfaces. It is used in generated code.func (*GenericServerStream[Req, Res])Recv¶added inv1.64.0func (x *GenericServerStream[Req, Res]) Recv() (*Req,error)Recv reads one message from the stream of requests generated by the client.
The type of the message returned is determined by the Req type parameter
of the clientStreamServer receiver.func (*GenericServerStream[Req, Res])Send¶added inv1.64.0func (x *GenericServerStream[Req, Res]) Send(m *Res)errorSend pushes one message into the stream of responses to be consumed by the
client. The type of message which can be sent is determined by the Res
type parameter of the serverStreamServer receiver.func (*GenericServerStream[Req, Res])SendAndClose¶added inv1.64.0func (x *GenericServerStream[Req, Res]) SendAndClose(m *Res)errorSendAndClose pushes the unary response to the client. The type of message
which can be sent is determined by the Res type parameter of the
clientStreamServer receiver.typeHeaderCallOption¶added inv1.11.0type HeaderCallOption struct {HeaderAddr *metadata.MD}ExperimentalHeaderCallOption is a CallOption for collecting response header metadata.
The metadata field will be populated *after* the RPC completes.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeMaxHeaderListSizeDialOption¶added inv1.64.0type MaxHeaderListSizeDialOption struct {MaxHeaderListSizeuint32}MaxHeaderListSizeDialOption is a DialOption that specifies the maximum
(uncompressed) size of header list that the client is prepared to accept.typeMaxHeaderListSizeServerOption¶added inv1.64.0type MaxHeaderListSizeServerOption struct {MaxHeaderListSizeuint32}MaxHeaderListSizeServerOption is a ServerOption that sets the max
(uncompressed) size of header list that the server is prepared to accept.typeMaxRecvMsgSizeCallOption¶added inv1.11.0type MaxRecvMsgSizeCallOption struct {MaxRecvMsgSizeint}ExperimentalMaxRecvMsgSizeCallOption is a CallOption that indicates the maximum message
size in bytes the client can receive.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeMaxRetryRPCBufferSizeCallOption¶added inv1.14.0type MaxRetryRPCBufferSizeCallOption struct {MaxRetryRPCBufferSizeint}ExperimentalMaxRetryRPCBufferSizeCallOption is a CallOption indicating the amount of
memory to be used for caching this RPC for retry purposes.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeMaxSendMsgSizeCallOption¶added inv1.11.0type MaxSendMsgSizeCallOption struct {MaxSendMsgSizeint}ExperimentalMaxSendMsgSizeCallOption is a CallOption that indicates the maximum message
size in bytes the client can send.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeMethodConfigdeprecatedadded inv1.2.0type MethodConfig =internalserviceconfig.MethodConfigMethodConfig defines the configuration recommended by the service providers for a
particular method.Deprecated: Users should not use this struct. Service config should be received
through name resolver, as specified herehttps://github.com/grpc/grpc/blob/master/doc/service_config.mdtypeMethodDesc¶type MethodDesc struct {MethodNamestringHandler    methodHandler}MethodDesc represents an RPC service's method specification.typeMethodInfo¶type MethodInfo struct {// Name is the method name only, without the service name or package name.Namestring// IsClientStream indicates whether the RPC is a client streaming RPC.IsClientStreambool// IsServerStream indicates whether the RPC is a server streaming RPC.IsServerStreambool}MethodInfo contains the information of an RPC including its method name and type.typeOnFinishCallOption¶added inv1.54.0type OnFinishCallOption struct {OnFinish func(error)}ExperimentalOnFinishCallOption is CallOption that indicates a callback to be called when
the call completes.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typePeerCallOption¶added inv1.11.0type PeerCallOption struct {PeerAddr *peer.Peer}ExperimentalPeerCallOption is a CallOption for collecting the identity of the remote
peer. The peer field will be populated *after* the RPC completes.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typePerRPCCredsCallOption¶added inv1.11.0type PerRPCCredsCallOption struct {Credscredentials.PerRPCCredentials}ExperimentalPerRPCCredsCallOption is a CallOption that indicates the per-RPC
credentials to use for the call.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typePreparedMsg¶added inv1.21.0type PreparedMsg struct {// contains filtered or unexported fields}ExperimentalPreparedMsg is responsible for creating a Marshalled and Compressed object.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.func (*PreparedMsg)Encode¶added inv1.21.0func (p *PreparedMsg) Encode(sStream, msgany)errorEncode marshalls and compresses the message using the codec and compressor for the stream.typeServer¶type Server struct {// contains filtered or unexported fields}Server is a gRPC server to serve RPC requests.funcNewServer¶func NewServer(opt ...ServerOption) *ServerNewServer creates a gRPC server which has no service registered and has not
started to accept requests yet.func (*Server)GetServiceInfo¶func (s *Server) GetServiceInfo() map[string]ServiceInfoGetServiceInfo returns a map from service names to ServiceInfo.
Service names include the package names, in the form of <package>.<service>.func (*Server)GracefulStop¶added inv1.0.2func (s *Server) GracefulStop()GracefulStop stops the gRPC server gracefully. It stops the server from
accepting new connections and RPCs and blocks until all the pending RPCs are
finished.func (*Server)RegisterService¶func (s *Server) RegisterService(sd *ServiceDesc, ssany)RegisterService registers a service and its implementation to the gRPC
server. It is called from the IDL generated code. This must be called before
invoking Serve. If ss is non-nil (for legacy code), its type is checked to
ensure it implements sd.HandlerType.func (*Server)Serve¶func (s *Server) Serve(lisnet.Listener)errorServe accepts incoming connections on the listener lis, creating a new
ServerTransport and service goroutine for each. The service goroutines
read gRPC requests and then call the registered handlers to reply to them.
Serve returns when lis.Accept fails with fatal errors.  lis will be closed when
this method returns.
Serve will return a non-nil error unless Stop or GracefulStop is called.Note: All supported releases of Go (as of December 2023) override the OS
defaults for TCP keepalive time and interval to 15s. To enable TCP keepalive
with OS defaults for keepalive time and interval, callers need to do the
following two things:pass a net.Listener created by calling the Listen method on a
net.ListenConfig with the `KeepAlive` field set to a negative value. This
will result in the Go standard library not overriding OS defaults for TCP
keepalive interval and time. But this will also result in the Go standard
library not enabling TCP keepalives by default.override the Accept method on the passed in net.Listener and set the
SO_KEEPALIVE socket option to enable TCP keepalives, with OS defaults.func (*Server)ServeHTTP¶func (s *Server) ServeHTTP(whttp.ResponseWriter, r *http.Request)ExperimentalServeHTTP implements the Go standard library's http.Handler
interface by responding to the gRPC request r, by looking up
the requested gRPC method in the gRPC server s.The provided HTTP request must have arrived on an HTTP/2
connection. When using the Go standard library's server,
practically this means that the Request must also have arrived
over TLS.To share one port (such as 443 for https) between gRPC and an
existing http.Handler, use a root http.Handler such as:if r.ProtoMajor == 2 && strings.HasPrefix(
	r.Header.Get("Content-Type"), "application/grpc") {
	grpcServer.ServeHTTP(w, r)
} else {
	yourMux.ServeHTTP(w, r)
}Note that ServeHTTP uses Go's HTTP/2 server implementation which is totally
separate from grpc-go's HTTP/2 server. Performance and features may vary
between the two paths. ServeHTTP does not support some gRPC features
available through grpc-go's HTTP/2 server.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.func (*Server)Stop¶func (s *Server) Stop()Stop stops the gRPC server. It immediately closes all open
connections and listeners.
It cancels all active RPCs on the server side and the corresponding
pending RPCs on the client side will get notified by connection
errors.typeServerOption¶type ServerOption interface {// contains filtered or unexported methods}A ServerOption sets options such as credentials, codec and keepalive parameters, etc.funcChainStreamInterceptor¶added inv1.28.0func ChainStreamInterceptor(interceptors ...StreamServerInterceptor)ServerOptionChainStreamInterceptor returns a ServerOption that specifies the chained interceptor
for streaming RPCs. The first interceptor will be the outer most,
while the last interceptor will be the inner most wrapper around the real call.
All stream interceptors added by this method will be chained.funcChainUnaryInterceptor¶added inv1.28.0func ChainUnaryInterceptor(interceptors ...UnaryServerInterceptor)ServerOptionChainUnaryInterceptor returns a ServerOption that specifies the chained interceptor
for unary RPCs. The first interceptor will be the outer most,
while the last interceptor will be the inner most wrapper around the real call.
All unary interceptors added by this method will be chained.funcConnectionTimeout¶added inv1.7.3func ConnectionTimeout(dtime.Duration)ServerOptionExperimentalConnectionTimeout returns a ServerOption that sets the timeout for
connection establishment (up to and including HTTP/2 handshaking) for all
new connections.  If this is not set, the default is 120 seconds.  A zero or
negative value will result in an immediate timeout.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcCreds¶func Creds(ccredentials.TransportCredentials)ServerOptionCreds returns a ServerOption that sets credentials for server connections.funcCustomCodecdeprecatedfunc CustomCodec(codecCodec)ServerOptionCustomCodec returns a ServerOption that sets a codec for message marshaling and unmarshaling.This will override any lookups by content-subtype for Codecs registered with RegisterCodec.Deprecated: register codecs using encoding.RegisterCodec. The server will
automatically use registered codecs based on the incoming requests' headers.
See alsohttps://github.com/grpc/grpc-go/blob/master/Documentation/encoding.md#using-a-codec.
Will be supported throughout 1.x.funcForceServerCodec¶added inv1.38.0func ForceServerCodec(codecencoding.Codec)ServerOptionExperimentalForceServerCodec returns a ServerOption that sets a codec for message
marshaling and unmarshaling.This will override any lookups by content-subtype for Codecs registered
with RegisterCodec.See Content-Type onhttps://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requestsfor
more details. Also see the documentation on RegisterCodec and
CallContentSubtype for more details on the interaction between encoding.Codec
and content-subtype.This function is provided for advanced users; prefer to register codecs
using encoding.RegisterCodec.
The server will automatically use registered codecs based on the incoming
requests' headers. See alsohttps://github.com/grpc/grpc-go/blob/master/Documentation/encoding.md#using-a-codec.
Will be supported throughout 1.x.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcForceServerCodecV2¶added inv1.66.0func ForceServerCodecV2(codecV2encoding.CodecV2)ServerOptionExperimentalForceServerCodecV2 is the equivalent of ForceServerCodec, but for the new
CodecV2 interface.Will be supported throughout 1.x.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcHeaderTableSize¶added inv1.25.0func HeaderTableSize(suint32)ServerOptionExperimentalHeaderTableSize returns a ServerOption that sets the size of dynamic
header table for stream.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcInTapHandle¶added inv1.0.5func InTapHandle(htap.ServerInHandle)ServerOptionExperimentalInTapHandle returns a ServerOption that sets the tap handle for all the server
transport to be created. Only one can be installed.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcInitialConnWindowSize¶added inv1.4.0func InitialConnWindowSize(sint32)ServerOptionInitialConnWindowSize returns a ServerOption that sets window size for a connection.
The lower bound for window size is 64K and any value smaller than that will be ignored.funcInitialWindowSize¶added inv1.4.0func InitialWindowSize(sint32)ServerOptionInitialWindowSize returns a ServerOption that sets window size for stream.
The lower bound for window size is 64K and any value smaller than that will be ignored.funcKeepaliveEnforcementPolicy¶added inv1.3.0func KeepaliveEnforcementPolicy(kepkeepalive.EnforcementPolicy)ServerOptionKeepaliveEnforcementPolicy returns a ServerOption that sets keepalive enforcement policy for the server.funcKeepaliveParams¶added inv1.3.0func KeepaliveParams(kpkeepalive.ServerParameters)ServerOptionKeepaliveParams returns a ServerOption that sets keepalive and max-age parameters for the server.funcMaxConcurrentStreams¶func MaxConcurrentStreams(nuint32)ServerOptionMaxConcurrentStreams returns a ServerOption that will apply a limit on the number
of concurrent streams to each ServerTransport.funcMaxHeaderListSize¶added inv1.14.0func MaxHeaderListSize(suint32)ServerOptionMaxHeaderListSize returns a ServerOption that sets the max (uncompressed) size
of header list that the server is prepared to accept.funcMaxMsgSizedeprecatedadded inv1.0.2func MaxMsgSize(mint)ServerOptionMaxMsgSize returns a ServerOption to set the max message size in bytes the server can receive.
If this is not set, gRPC uses the default limit.Deprecated: use MaxRecvMsgSize instead. Will be supported throughout 1.x.funcMaxRecvMsgSize¶added inv1.4.0func MaxRecvMsgSize(mint)ServerOptionMaxRecvMsgSize returns a ServerOption to set the max message size in bytes the server can receive.
If this is not set, gRPC uses the default 4MB.funcMaxSendMsgSize¶added inv1.4.0func MaxSendMsgSize(mint)ServerOptionMaxSendMsgSize returns a ServerOption to set the max message size in bytes the server can send.
If this is not set, gRPC uses the default `math.MaxInt32`.funcNumStreamWorkers¶added inv1.30.0func NumStreamWorkers(numServerWorkersuint32)ServerOptionExperimentalNumStreamWorkers returns a ServerOption that sets the number of worker
goroutines that should be used to process incoming streams. Setting this to
zero (default) will disable workers and spawn a new goroutine for each
stream.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcRPCCompressordeprecatedfunc RPCCompressor(cpCompressor)ServerOptionRPCCompressor returns a ServerOption that sets a compressor for outbound
messages.  For backward compatibility, all outbound messages will be sent
using this compressor, regardless of incoming message compression.  By
default, server messages will be sent using the same compressor with which
request messages were sent.Deprecated: use encoding.RegisterCompressor instead. Will be supported
throughout 1.x.funcRPCDecompressordeprecatedfunc RPCDecompressor(dcDecompressor)ServerOptionRPCDecompressor returns a ServerOption that sets a decompressor for inbound
messages.  It has higher priority than decompressors registered via
encoding.RegisterCompressor.Deprecated: use encoding.RegisterCompressor instead. Will be supported
throughout 1.x.funcReadBufferSize¶added inv1.7.0func ReadBufferSize(sint)ServerOptionReadBufferSize lets you set the size of read buffer, this determines how much
data can be read at most for one read syscall. The default value for this
buffer is 32KB. Zero or negative values will disable read buffer for a
connection so data framer can access the underlying conn directly.funcSharedWriteBuffer¶added inv1.58.0func SharedWriteBuffer(valbool)ServerOptionExperimentalSharedWriteBuffer allows reusing per-connection transport write buffer.
If this option is set to true every connection will release the buffer after
flushing the data on the wire.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcStatsHandler¶added inv1.2.0func StatsHandler(hstats.Handler)ServerOptionStatsHandler returns a ServerOption that sets the stats handler for the server.funcStreamInterceptor¶func StreamInterceptor(iStreamServerInterceptor)ServerOptionStreamInterceptor returns a ServerOption that sets the StreamServerInterceptor for the
server. Only one stream interceptor can be installed.funcUnaryInterceptor¶func UnaryInterceptor(iUnaryServerInterceptor)ServerOptionUnaryInterceptor returns a ServerOption that sets the UnaryServerInterceptor for the
server. Only one unary interceptor can be installed. The construction of multiple
interceptors (e.g., chaining) can be implemented at the caller.funcUnknownServiceHandler¶added inv1.2.0func UnknownServiceHandler(streamHandlerStreamHandler)ServerOptionUnknownServiceHandler returns a ServerOption that allows for adding a custom
unknown service handler. The provided method is a bidi-streaming RPC service
handler that will be invoked instead of returning the "unimplemented" gRPC
error whenever a request is received for an unregistered service or method.
The handling function and stream interceptor (if set) have full access to
the ServerStream, including its Context.funcWaitForHandlers¶added inv1.61.0func WaitForHandlers(wbool)ServerOptionExperimentalWaitForHandlers cause Stop to wait until all outstanding method handlers have
exited before returning.  If false, Stop will return as soon as all
connections have closed, but method handlers may still be running. By
default, Stop does not wait for method handlers to return.Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.funcWriteBufferSize¶added inv1.7.0func WriteBufferSize(sint)ServerOptionWriteBufferSize determines how much data can be batched before doing a write
on the wire. The default value for this buffer is 32KB. Zero or negative
values will disable the write buffer such that each write will be on underlying
connection. Note: A Send call may not directly translate to a write.typeServerStream¶type ServerStream interface {// SetHeader sets the header metadata. It may be called multiple times.// When call multiple times, all the provided metadata will be merged.// All the metadata will be sent out when one of the following happens://  - ServerStream.SendHeader() is called;//  - The first response is sent out;//  - An RPC status is sent out (error or success).SetHeader(metadata.MD)error// SendHeader sends the header metadata.// The provided md and headers set by SetHeader() will be sent.// It fails if called multiple times.SendHeader(metadata.MD)error// SetTrailer sets the trailer metadata which will be sent with the RPC status.// When called more than once, all the provided metadata will be merged.SetTrailer(metadata.MD)// Context returns the context for this stream.Context()context.Context// SendMsg sends a message. On error, SendMsg aborts the stream and the// error is returned directly.//// SendMsg blocks until://   - There is sufficient flow control to schedule m with the transport, or//   - The stream is done, or//   - The stream breaks.//// SendMsg does not wait until the message is received by the client. An// untimely stream closure may result in lost messages.//// It is safe to have a goroutine calling SendMsg and another goroutine// calling RecvMsg on the same stream at the same time, but it is not safe// to call SendMsg on the same stream in different goroutines.//// It is not safe to modify the message after calling SendMsg. Tracing// libraries and stats handlers may use the message lazily.SendMsg(many)error// RecvMsg blocks until it receives a message into m or the stream is// done. It returns io.EOF when the client has performed a CloseSend. On// any non-EOF error, the stream is aborted and the error contains the// RPC status.//// It is safe to have a goroutine calling SendMsg and another goroutine// calling RecvMsg on the same stream at the same time, but it is not// safe to call RecvMsg on the same stream in different goroutines.RecvMsg(many)error}ServerStream defines the server-side behavior of a streaming RPC.Errors returned from ServerStream methods are compatible with the status
package.  However, the status code will often not match the RPC status as
seen by the client application, and therefore, should not be relied upon for
this purpose.typeServerStreamingClient¶added inv1.64.0type ServerStreamingClient[Resany] interface {Recv() (*Res,error)ClientStream}ServerStreamingClient represents the client side of a server-streaming (one
request, many responses) RPC. It is generic over the type of the response
message. It is used in generated code.typeServerStreamingServer¶added inv1.64.0type ServerStreamingServer[Resany] interface {Send(*Res)errorServerStream}ServerStreamingServer represents the server side of a server-streaming (one
request, many responses) RPC. It is generic over the type of the response
message. It is used in generated code.typeServerTransportStream¶added inv1.11.0type ServerTransportStream interface {Method()stringSetHeader(mdmetadata.MD)errorSendHeader(mdmetadata.MD)errorSetTrailer(mdmetadata.MD)error}ExperimentalServerTransportStream is a minimal interface that a transport stream must
implement. This can be used to mock an actual transport stream for tests of
handler code that use, for example, grpc.SetHeader (which requires some
stream to be in context).See also NewContextWithServerTransportStream.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.funcServerTransportStreamFromContext¶added inv1.12.0func ServerTransportStreamFromContext(ctxcontext.Context)ServerTransportStreamExperimentalServerTransportStreamFromContext returns the ServerTransportStream saved in
ctx. Returns nil if the given context has no stream associated with it
(which implies it is not an RPC invocation context).Experimental¶Notice: This API is EXPERIMENTAL and may be changed or removed in a
later release.typeServiceConfigdeprecatedadded inv1.2.0type ServiceConfig struct {serviceconfig.Config// Methods contains a map for the methods in this service.  If there is an// exact match for a method (i.e. /service/method) in the map, use the// corresponding MethodConfig.  If there's no exact match, look for the// default config for the service (/service/) and use the corresponding// MethodConfig if it exists.  Otherwise, the method has no MethodConfig to// use.Methods map[string]MethodConfig// contains filtered or unexported fields}ServiceConfig is provided by the service provider and contains parameters for how
clients that connect to the service should behave.Deprecated: Users should not use this struct. Service config should be received
through name resolver, as specified herehttps://github.com/grpc/grpc/blob/master/doc/service_config.mdtypeServiceDesc¶type ServiceDesc struct {ServiceNamestring// The pointer to the service interface. Used to check whether the user// provided implementation satisfies the interface requirements.HandlerTypeanyMethods     []MethodDescStreams     []StreamDescMetadataany}ServiceDesc represents an RPC service's specification.typeServiceInfo¶type ServiceInfo struct {Methods []MethodInfo// Metadata is the metadata specified in ServiceDesc when registering service.Metadataany}ServiceInfo contains unary RPC method info, streaming RPC method info and metadata for a service.typeServiceRegistrar¶added inv1.32.0type ServiceRegistrar interface {// RegisterService registers a service and its implementation to the// concrete type implementing this interface.  It may not be called// once the server has started serving.// desc describes the service and its methods and handlers. impl is the// service implementation which is passed to the method handlers.RegisterService(desc *ServiceDesc, implany)
}ServiceRegistrar wraps a single method that supports service registration. It
enables users to pass concrete types other than grpc.Server to the service
registration methods exported by the IDL generated code.typeStaticMethodCallOption¶added inv1.62.0type StaticMethodCallOption struct {EmptyCallOption}StaticMethodCallOption is a CallOption that specifies that a call comes
from a static method.typeStreamdeprecatedtype Stream interface {// Deprecated: See ClientStream and ServerStream documentation instead.Context()context.Context// Deprecated: See ClientStream and ServerStream documentation instead.SendMsg(many)error// Deprecated: See ClientStream and ServerStream documentation instead.RecvMsg(many)error}Stream defines the common interface a client or server stream has to satisfy.Deprecated: See ClientStream and ServerStream documentation instead.typeStreamClientInterceptor¶added inv1.0.2type StreamClientInterceptor func(ctxcontext.Context, desc *StreamDesc, cc *ClientConn, methodstring, streamerStreamer, opts ...CallOption) (ClientStream,error)StreamClientInterceptor intercepts the creation of a ClientStream. Stream
interceptors can be specified as a DialOption, using WithStreamInterceptor()
or WithChainStreamInterceptor(), when creating a ClientConn. When a stream
interceptor(s) is set on the ClientConn, gRPC delegates all stream creations
to the interceptor, and it is the responsibility of the interceptor to call
streamer.desc contains a description of the stream. cc is the ClientConn on which the
RPC was invoked. streamer is the handler to create a ClientStream and it is
the responsibility of the interceptor to call it. opts contain all applicable
call options, including defaults from the ClientConn as well as per-call
options.StreamClientInterceptor may return a custom ClientStream to intercept all I/O
operations. The returned error must be compatible with the status package.typeStreamDesc¶type StreamDesc struct {// StreamName and Handler are only used when registering handlers on a// server.StreamNamestring// the name of the method excluding the serviceHandlerStreamHandler// the handler called for the method// ServerStreams and ClientStreams are used for registering handlers on a// server as well as defining RPC behavior when passed to NewClientStream// and ClientConn.NewStream.  At least one must be true.ServerStreamsbool// indicates the server can perform streaming sendsClientStreamsbool// indicates the client can perform streaming sends}StreamDesc represents a streaming RPC service's method specification.  Used
on the server when registering services and on the client when initiating
new streams.typeStreamHandler¶type StreamHandler func(srvany, streamServerStream)errorStreamHandler defines the handler called by gRPC server to complete the
execution of a streaming RPC.If a StreamHandler returns an error, it should either be produced by the
status package, or be one of the context errors. Otherwise, gRPC will use
codes.Unknown as the status code and err.Error() as the status message of the
RPC.typeStreamServerInfo¶type StreamServerInfo struct {// FullMethod is the full RPC method string, i.e., /package.service/method.FullMethodstring// IsClientStream indicates whether the RPC is a client streaming RPC.IsClientStreambool// IsServerStream indicates whether the RPC is a server streaming RPC.IsServerStreambool}StreamServerInfo consists of various information about a streaming RPC on
server side. All per-rpc information may be mutated by the interceptor.typeStreamServerInterceptor¶type StreamServerInterceptor func(srvany, ssServerStream, info *StreamServerInfo, handlerStreamHandler)errorStreamServerInterceptor provides a hook to intercept the execution of a streaming RPC on the server.
info contains all the information of this RPC the interceptor can operate on. And handler is the
service method implementation. It is the responsibility of the interceptor to invoke handler to
complete the RPC.typeStreamer¶added inv1.0.2type Streamer func(ctxcontext.Context, desc *StreamDesc, cc *ClientConn, methodstring, opts ...CallOption) (ClientStream,error)Streamer is called by StreamClientInterceptor to create a ClientStream.typeTrailerCallOption¶added inv1.11.0type TrailerCallOption struct {TrailerAddr *metadata.MD}ExperimentalTrailerCallOption is a CallOption for collecting response trailer metadata.
The metadata field will be populated *after* the RPC completes.Experimental¶Notice: This type is EXPERIMENTAL and may be changed or removed in a
later release.typeUnaryClientInterceptor¶added inv1.0.2type UnaryClientInterceptor func(ctxcontext.Context, methodstring, req, replyany, cc *ClientConn, invokerUnaryInvoker, opts ...CallOption)errorUnaryClientInterceptor intercepts the execution of a unary RPC on the client.
Unary interceptors can be specified as a DialOption, using
WithUnaryInterceptor() or WithChainUnaryInterceptor(), when creating a
ClientConn. When a unary interceptor(s) is set on a ClientConn, gRPC
delegates all unary RPC invocations to the interceptor, and it is the
responsibility of the interceptor to call invoker to complete the processing
of the RPC.method is the RPC name. req and reply are the corresponding request and
response messages. cc is the ClientConn on which the RPC was invoked. invoker
is the handler to complete the RPC and it is the responsibility of the
interceptor to call it. opts contain all applicable call options, including
defaults from the ClientConn as well as per-call options.The returned error must be compatible with the status package.typeUnaryHandler¶type UnaryHandler func(ctxcontext.Context, reqany) (any,error)UnaryHandler defines the handler invoked by UnaryServerInterceptor to complete the normal
execution of a unary RPC.If a UnaryHandler returns an error, it should either be produced by the
status package, or be one of the context errors. Otherwise, gRPC will use
codes.Unknown as the status code and err.Error() as the status message of the
RPC.typeUnaryInvoker¶added inv1.0.2type UnaryInvoker func(ctxcontext.Context, methodstring, req, replyany, cc *ClientConn, opts ...CallOption)errorUnaryInvoker is called by UnaryClientInterceptor to complete RPCs.typeUnaryServerInfo¶type UnaryServerInfo struct {// Server is the service implementation the user provides. This is read-only.Serverany// FullMethod is the full RPC method string, i.e., /package.service/method.FullMethodstring}UnaryServerInfo consists of various information about a unary RPC on
server side. All per-rpc information may be mutated by the interceptor.typeUnaryServerInterceptor¶type UnaryServerInterceptor func(ctxcontext.Context, reqany, info *UnaryServerInfo, handlerUnaryHandler) (respany, errerror)UnaryServerInterceptor provides a hook to intercept the execution of a unary RPC on the server. info
contains all the information of this RPC the interceptor can operate on. And handler is the wrapper
of the service method implementation. It is the responsibility of the interceptor to invoke handler
to complete the RPC.Source Files¶View all Source filesbackoff.gobalancer_wrapper.gocall.goclientconn.gocodec.godialoptions.godoc.gointerceptor.gopicker_wrapper.gopreloader.goresolver_wrapper.gorpc_util.goserver.goservice_config.gostream.gostream_interfaces.gotrace.gotrace_withtrace.goversion.goDirectories¶Show internalExpand allPathSynopsisadminPackage admin provides a convenient method for registering a collection of administration services to a gRPC server.Package admin provides a convenient method for registering a collection of administration services to a gRPC server.testPackage test contains test only functions for package admin.Package test contains test only functions for package admin.attributesPackage attributes defines a generic key/value store used in various gRPC components.Package attributes defines a generic key/value store used in various gRPC components.authzPackage authz exposes methods to manage authorization within gRPC.Package authz exposes methods to manage authorization within gRPC.auditPackage audit contains interfaces for audit logging during authorization.Package audit contains interfaces for audit logging during authorization.audit/stdoutPackage stdout defines an stdout audit logger.Package stdout defines an stdout audit logger.backoffPackage backoff provides configuration options for backoff.Package backoff provides configuration options for backoff.balancerPackage balancer defines APIs for load balancing in gRPC.Package balancer defines APIs for load balancing in gRPC.basePackage base defines a balancer base that can be used to build balancers with different picking algorithms.Package base defines a balancer base that can be used to build balancers with different picking algorithms.endpointshardingPackage endpointsharding implements a load balancing policy that manages homogeneous child policies each owning a single endpoint.Package endpointsharding implements a load balancing policy that manages homogeneous child policies each owning a single endpoint.grpclbPackage grpclb defines a grpclb balancer.Package grpclb defines a grpclb balancer.grpclb/grpc_lb_v1grpclb/statePackage state declares grpclb types to be set by resolvers wishing to pass information to grpclb via resolver.State Attributes.Package state declares grpclb types to be set by resolvers wishing to pass information to grpclb via resolver.State Attributes.leastrequestPackage leastrequest implements a least request load balancer.Package leastrequest implements a least request load balancer.pickfirstPackage pickfirst contains the pick_first load balancing policy.Package pickfirst contains the pick_first load balancing policy.rlsPackage rls implements the RLS LB policy.Package rls implements the RLS LB policy.rls/internal/adaptivePackage adaptive provides functionality for adaptive client-side throttling.Package adaptive provides functionality for adaptive client-side throttling.rls/internal/keysPackage keys provides functionality required to build RLS request keys.Package keys provides functionality required to build RLS request keys.rls/internal/test/e2ePackage e2e contains utilities for end-to-end RouteLookupService tests.Package e2e contains utilities for end-to-end RouteLookupService tests.roundrobinPackage roundrobin defines a roundrobin balancer.Package roundrobin defines a roundrobin balancer.weightedroundrobinPackage weightedroundrobin provides an implementation of the weighted round robin LB policy, as defined in [gRFC A58].Package weightedroundrobin provides an implementation of the weighted round robin LB policy, as defined in [gRFC A58].weightedroundrobin/internalPackage internal allows for easier testing of the weightedroundrobin package.Package internal allows for easier testing of the weightedroundrobin package.weightedtargetPackage weightedtarget implements the weighted_target balancer.Package weightedtarget implements the weighted_target balancer.weightedtarget/weightedaggregatorPackage weightedaggregator implements state aggregator for weighted_target balancer.Package weightedaggregator implements state aggregator for weighted_target balancer.benchmarkPackage benchmark implements the building blocks to setup end-to-end gRPC benchmarks.Package benchmark implements the building blocks to setup end-to-end gRPC benchmarks.benchmainPackage main provides benchmark with setting flags.Package main provides benchmark with setting flags.benchresultTo format the benchmark result:To format the benchmark result:clientPackage main provides a client used for benchmarking.Package main provides a client used for benchmarking.flagsPackage flags provide convenience types and routines to accept specific types of flag values on the command line.Package flags provide convenience types and routines to accept specific types of flag values on the command line.latencyPackage latency provides wrappers for net.Conn, net.Listener, and net.Dialers, designed to interoperate to inject real-world latency into network connections.Package latency provides wrappers for net.Conn, net.Listener, and net.Dialers, designed to interoperate to inject real-world latency into network connections.serverPackage main provides a server used for benchmarking.Package main provides a server used for benchmarking.statsPackage stats tracks the statistics associated with benchmark runs.Package stats tracks the statistics associated with benchmark runs.workerBinary worker implements the benchmark worker that can turn into a benchmark client or server.Binary worker implements the benchmark worker that can turn into a benchmark client or server.binarylogPackage binarylog implementation binary logging as defined in https://github.com/grpc/proposal/blob/master/A16-binary-logging.md.Package binarylog implementation binary logging as defined in https://github.com/grpc/proposal/blob/master/A16-binary-logging.md.grpc_binarylog_v1channelzPackage channelz exports internals of the channelz implementation as required by other gRPC packages.Package channelz exports internals of the channelz implementation as required by other gRPC packages.grpc_channelz_v1internal/protoconvPackage protoconv supports converting between the internal channelz implementation and the protobuf representation of all the entities.Package protoconv supports converting between the internal channelz implementation and the protobuf representation of all the entities.servicePackage service provides an implementation for channelz service server.Package service provides an implementation for channelz service server.cmdprotoc-gen-go-grpcModulecodesPackage codes defines the canonical error codes used by gRPC.Package codes defines the canonical error codes used by gRPC.connectivityPackage connectivity defines connectivity semantics.Package connectivity defines connectivity semantics.credentialsPackage credentials implements various credentials supported by gRPC library, which encapsulate all the state needed by a client to authenticate with a server and make various assertions, e.g., about the client's identity, role, or whether it is authorized to make a particular call.Package credentials implements various credentials supported by gRPC library, which encapsulate all the state needed by a client to authenticate with a server and make various assertions, e.g., about the client's identity, role, or whether it is authorized to make a particular call.altsPackage alts implements the ALTS credential support by gRPC library, which encapsulates all the state needed by a client to authenticate with a server using ALTS and make various assertions, e.g., about the client's identity, role, or whether it is authorized to make a particular call.Package alts implements the ALTS credential support by gRPC library, which encapsulates all the state needed by a client to authenticate with a server using ALTS and make various assertions, e.g., about the client's identity, role, or whether it is authorized to make a particular call.alts/internalPackage internal contains common core functionality for ALTS.Package internal contains common core functionality for ALTS.alts/internal/authinfoPackage authinfo provide authentication information returned by handshakers.Package authinfo provide authentication information returned by handshakers.alts/internal/connPackage conn contains an implementation of a secure channel created by gRPC handshakers.Package conn contains an implementation of a secure channel created by gRPC handshakers.alts/internal/handshakerPackage handshaker provides ALTS handshaking functionality for GCP.Package handshaker provides ALTS handshaking functionality for GCP.alts/internal/handshaker/servicePackage service manages connections between the VM application and the ALTS handshaker service.Package service manages connections between the VM application and the ALTS handshaker service.alts/internal/proto/grpc_gcpalts/internal/testutilPackage testutil include useful test utilities for the handshaker.Package testutil include useful test utilities for the handshaker.googlePackage google defines credentials for google cloud services.Package google defines credentials for google cloud services.insecurePackage insecure provides an implementation of the credentials.TransportCredentials interface which disables transport security.Package insecure provides an implementation of the credentials.TransportCredentials interface which disables transport security.localPackage local implements local transport credentials.Package local implements local transport credentials.oauthPackage oauth implements gRPC credentials using OAuth.Package oauth implements gRPC credentials using OAuth.stsPackage sts implements call credentials using STS (Security Token Service) as defined in https://tools.ietf.org/html/rfc8693.Package sts implements call credentials using STS (Security Token Service) as defined in https://tools.ietf.org/html/rfc8693.tls/certproviderPackage certprovider defines APIs for Certificate Providers in gRPC.Package certprovider defines APIs for Certificate Providers in gRPC.tls/certprovider/pemfilePackage pemfile provides a file watching certificate provider plugin implementation which works for files with PEM contents.Package pemfile provides a file watching certificate provider plugin implementation which works for files with PEM contents.xdsPackage xds provides a transport credentials implementation where the security configuration is pushed by a management server using xDS APIs.Package xds provides a transport credentials implementation where the security configuration is pushed by a management server using xDS APIs.encodingPackage encoding defines the interface for the compressor and codec, and functions to register and retrieve compressors and codecs.Package encoding defines the interface for the compressor and codec, and functions to register and retrieve compressors and codecs.gzipPackage gzip implements and registers the gzip compressor during the initialization.Package gzip implements and registers the gzip compressor during the initialization.protoPackage proto defines the protobuf codec.Package proto defines the protobuf codec.examplesmodulefeatures/observabilityModuleexperimentalPackage experimental is a collection of experimental features that might have some rough edges to them.Package experimental is a collection of experimental features that might have some rough edges to them.statsPackage stats contains experimental metrics/stats API's.Package stats contains experimental metrics/stats API's.gcpobservabilityModulegrpclogPackage grpclog defines logging for grpc.Package grpclog defines logging for grpc.gloggerPackage glogger defines glog-based logging for grpc.Package glogger defines glog-based logging for grpc.internalPackage internal contains functionality internal to the grpclog package.Package internal contains functionality internal to the grpclog package.healthPackage health provides a service that exposes server's health and it must be imported to enable support for client-side health checks.Package health provides a service that exposes server's health and it must be imported to enable support for client-side health checks.grpc_health_v1internalPackage internal contains gRPC-internal code, to avoid polluting the godoc of the top-level grpc package.Package internal contains gRPC-internal code, to avoid polluting the godoc of the top-level grpc package.adminPackage admin contains internal implementation for admin service.Package admin contains internal implementation for admin service.backoffPackage backoff implement the backoff strategy for gRPC.Package backoff implement the backoff strategy for gRPC.balancer/gracefulswitchPackage gracefulswitch implements a graceful switch load balancer.Package gracefulswitch implements a graceful switch load balancer.balancer/nopPackage nop implements a balancer with all of its balancer operations as no-ops, other than returning a Transient Failure Picker on a Client Conn update.Package nop implements a balancer with all of its balancer operations as no-ops, other than returning a Transient Failure Picker on a Client Conn update.balancer/stubPackage stub implements a balancer for testing purposes.Package stub implements a balancer for testing purposes.balancergroupPackage balancergroup implements a utility struct to bind multiple balancers into one balancer.Package balancergroup implements a utility struct to bind multiple balancers into one balancer.balancerloadPackage balancerload defines APIs to parse server loads in trailers.Package balancerload defines APIs to parse server loads in trailers.binarylogPackage binarylog implementation binary logging as defined in https://github.com/grpc/proposal/blob/master/A16-binary-logging.md.Package binarylog implementation binary logging as defined in https://github.com/grpc/proposal/blob/master/A16-binary-logging.md.bufferPackage buffer provides an implementation of an unbounded buffer.Package buffer provides an implementation of an unbounded buffer.cachePackage cache implements caches to be used in gRPC.Package cache implements caches to be used in gRPC.channelzPackage channelz defines internal APIs for enabling channelz service, entry registration/deletion, and accessing channelz data.Package channelz defines internal APIs for enabling channelz service, entry registration/deletion, and accessing channelz data.credentialsPackage credentials defines APIs for parsing SPIFFE ID.Package credentials defines APIs for parsing SPIFFE ID.credentials/xdsPackage xds contains non-user facing functionality of the xds credentials.Package xds contains non-user facing functionality of the xds credentials.envconfigPackage envconfig contains grpc settings configured by environment variables.Package envconfig contains grpc settings configured by environment variables.googlecloudPackage googlecloud contains internal helpful functions for google cloud.Package googlecloud contains internal helpful functions for google cloud.grpclogPackage grpclog provides logging functionality for internal gRPC packages, outside of the functionality provided by the external `grpclog` package.Package grpclog provides logging functionality for internal gRPC packages, outside of the functionality provided by the external `grpclog` package.grpcsyncPackage grpcsync implements additional synchronization primitives built upon the sync package.Package grpcsync implements additional synchronization primitives built upon the sync package.grpctestPackage grpctest implements testing helpers.Package grpctest implements testing helpers.grpcutilPackage grpcutil provides utility functions used across the gRPC codebase.Package grpcutil provides utility functions used across the gRPC codebase.hierarchyPackage hierarchy contains functions to set and get hierarchy string from addresses.Package hierarchy contains functions to set and get hierarchy string from addresses.idlePackage idle contains a component for managing idleness (entering and exiting) based on RPC activity.Package idle contains a component for managing idleness (entering and exiting) based on RPC activity.leakcheckPackage leakcheck contains functions to check leaked goroutines and buffers.Package leakcheck contains functions to check leaked goroutines and buffers.metadataPackage metadata contains functions to set and get metadata from addresses.Package metadata contains functions to set and get metadata from addresses.prettyPackage pretty defines helper functions to pretty-print structs for logging.Package pretty defines helper functions to pretty-print structs for logging.profilingPackage profiling contains two logical components: buffer.go and profiling.go.Package profiling contains two logical components: buffer.go and profiling.go.profiling/bufferPackage buffer provides a high-performant lock free implementation of a circular buffer used by the profiling code.Package buffer provides a high-performant lock free implementation of a circular buffer used by the profiling code.proto/grpc_lookup_v1resolverPackage resolver provides internal resolver-related functionality.Package resolver provides internal resolver-related functionality.resolver/dnsPackage dns implements a dns resolver to be installed as the default resolver in grpc.Package dns implements a dns resolver to be installed as the default resolver in grpc.resolver/dns/internalPackage internal contains functionality internal to the dns resolver package.Package internal contains functionality internal to the dns resolver package.resolver/passthroughPackage passthrough implements a pass-through resolver.Package passthrough implements a pass-through resolver.resolver/unixPackage unix implements a resolver for unix targets.Package unix implements a resolver for unix targets.serviceconfigPackage serviceconfig contains utility functions to parse service config.Package serviceconfig contains utility functions to parse service config.statsPackage stats provides internal stats related functionality.Package stats provides internal stats related functionality.statusPackage status implements errors returned by gRPC.Package status implements errors returned by gRPC.stubserverPackage stubserver is a stubbable implementation of google.golang.org/grpc/interop/grpc_testing for testing purposes.Package stubserver is a stubbable implementation of google.golang.org/grpc/interop/grpc_testing for testing purposes.syscallPackage syscall provides functionalities that grpc uses to get low-level operating system stats/info.Package syscall provides functionalities that grpc uses to get low-level operating system stats/info.testutilsPackage testutils contains testing helpers.Package testutils contains testing helpers.testutils/fakegrpclbPackage fakegrpclb provides a fake implementation of the grpclb server.Package fakegrpclb provides a fake implementation of the grpclb server.testutils/pickfirstPackage pickfirst contains helper functions to check for pickfirst load balancing of RPCs in tests.Package pickfirst contains helper functions to check for pickfirst load balancing of RPCs in tests.testutils/rlsPackage rls contains utilities for RouteLookupService e2e tests.Package rls contains utilities for RouteLookupService e2e tests.testutils/roundrobinPackage roundrobin contains helper functions to check for roundrobin and weighted-roundrobin load balancing of RPCs in tests.Package roundrobin contains helper functions to check for roundrobin and weighted-roundrobin load balancing of RPCs in tests.testutils/statsPackage stats implements a TestMetricsRecorder utility.Package stats implements a TestMetricsRecorder utility.testutils/xds/e2ePackage e2e provides utilities for end2end testing of xDS functionality.Package e2e provides utilities for end2end testing of xDS functionality.testutils/xds/e2e/setupPackage setup implements setup helpers for xDS e2e tests.Package setup implements setup helpers for xDS e2e tests.testutils/xds/fakeserverPackage fakeserver provides a fake implementation of the management server.Package fakeserver provides a fake implementation of the management server.transportPackage transport defines and implements message oriented communication channel to complete various transactions (e.g., an RPC).Package transport defines and implements message oriented communication channel to complete various transactions (e.g., an RPC).transport/grpchttp2Package grpchttp2 defines HTTP/2 types and a framer API and implementation.Package grpchttp2 defines HTTP/2 types and a framer API and implementation.transport/networktypePackage networktype declares the network type to be used in the default dialer.Package networktype declares the network type to be used in the default dialer.wrrPackage wrr contains the interface and common implementations of wrr algorithms.Package wrr contains the interface and common implementations of wrr algorithms.xdsPackage xds contains methods to Get/Set handshake cluster names.Package xds contains methods to Get/Set handshake cluster names.xds/bootstrapPackage bootstrap provides the functionality to initialize certain aspects of an xDS client by reading a bootstrap file.Package bootstrap provides the functionality to initialize certain aspects of an xDS client by reading a bootstrap file.xds/bootstrap/tlscredsPackage tlscreds implements mTLS Credentials in xDS Bootstrap File.Package tlscreds implements mTLS Credentials in xDS Bootstrap File.xds/matcherPackage matcher contains types that need to be shared between code under google.golang.org/grpc/xds/...Package matcher contains types that need to be shared between code under google.golang.org/grpc/xds/...xds/rbacPackage rbac provides service-level and method-level access control for a service.Package rbac provides service-level and method-level access control for a service.interopPackage interop contains functions used by interop client/server.Package interop contains functions used by interop client/server.alts/clientThis binary can only run on Google Cloud Platform (GCP).This binary can only run on Google Cloud Platform (GCP).alts/serverThis binary can only run on Google Cloud Platform (GCP).This binary can only run on Google Cloud Platform (GCP).clientBinary client is an interop client.Binary client is an interop client.fake_grpclbThis file is for testing only.This file is for testing only.grpc_testinggrpc_testing/coregrpclb_fallbackBinary grpclb_fallback is an interop test client for grpclb fallback.Binary grpclb_fallback is an interop test client for grpclb fallback.http2Binary http2 is used to test http2 error edge cases like GOAWAYs and RST_STREAMsBinary http2 is used to test http2 error edge cases like GOAWAYs and RST_STREAMsserverBinary server is an interop server.Binary server is an interop server.stress/clientclient starts an interop client to do stress test and a metrics server to report qps.client starts an interop client to do stress test and a metrics server to report qps.stress/grpc_testingstress/metrics_clientBinary metrics_client is a client to retrieve metrics from the server.Binary metrics_client is a client to retrieve metrics from the server.xds_federationBinary client is an interop client.Binary client is an interop client.observabilityModulexdsModulekeepalivePackage keepalive defines configurable parameters for point-to-point healthcheck.Package keepalive defines configurable parameters for point-to-point healthcheck.memPackage mem provides utilities that facilitate memory reuse in byte slices that are used as buffers.Package mem provides utilities that facilitate memory reuse in byte slices that are used as buffers.metadataPackage metadata define the structure of the metadata supported by gRPC library.Package metadata define the structure of the metadata supported by gRPC library.orcaPackage orca implements Open Request Cost Aggregation, which is an open standard for request cost aggregation and reporting by backends and the corresponding aggregation of such reports by L7 load balancers (such as Envoy) on the data plane.Package orca implements Open Request Cost Aggregation, which is an open standard for request cost aggregation and reporting by backends and the corresponding aggregation of such reports by L7 load balancers (such as Envoy) on the data plane.internalPackage internal contains orca-internal code, for testing purposes and to avoid polluting the godoc of the top-level orca package.Package internal contains orca-internal code, for testing purposes and to avoid polluting the godoc of the top-level orca package.peerPackage peer defines various peer information associated with RPCs and corresponding utils.Package peer defines various peer information associated with RPCs and corresponding utils.profilingPackage profiling exposes methods to manage profiling within gRPC.Package profiling exposes methods to manage profiling within gRPC.cmdBinary cmd is a command-line tool for profiling management.Binary cmd is a command-line tool for profiling management.protoservicePackage service defines methods to register a gRPC client/service for a profiling service that is exposed in the same server.Package service defines methods to register a gRPC client/service for a profiling service that is exposed in the same server.reflectionPackage reflection implements server reflection service.Package reflection implements server reflection service.grpc_reflection_v1grpc_reflection_v1alphagrpc_testinginternalPackage internal contains code that is shared by both reflection package and the test package.Package internal contains code that is shared by both reflection package and the test package.testModuleresolverPackage resolver defines APIs for name resolution in gRPC.Package resolver defines APIs for name resolution in gRPC.dnsPackage dns implements a dns resolver to be installed as the default resolver in grpc.Package dns implements a dns resolver to be installed as the default resolver in grpc.manualPackage manual defines a resolver that can be used to manually send resolved addresses to ClientConn.Package manual defines a resolver that can be used to manually send resolved addresses to ClientConn.passthroughPackage passthrough implements a pass-through resolver.Package passthrough implements a pass-through resolver.securityadvancedtlsModuleadvancedtls/examplesModuleauthorizationModuleserviceconfigPackage serviceconfig defines types and methods for operating on gRPC service configs.Package serviceconfig defines types and methods for operating on gRPC service configs.statsPackage stats is for collecting and reporting various network and RPC stats.Package stats is for collecting and reporting various network and RPC stats.opencensusModuleopentelemetryModulestatusPackage status implements errors returned by gRPC.Package status implements errors returned by gRPC.tapPackage tap defines the function handles which are executed on the transport layer of gRPC-Go and related information.Package tap defines the function handles which are executed on the transport layer of gRPC-Go and related information.testPackage test contains tests.Package test contains tests.bufconnPackage bufconn provides a net.Conn implemented by a buffer and related dialing and listening functionality.Package bufconn provides a net.Conn implemented by a buffer and related dialing and listening functionality.codec_perftoolsModulexdsPackage xds contains an implementation of the xDS suite of protocols, to be used by gRPC client and server applications.Package xds contains an implementation of the xDS suite of protocols, to be used by gRPC client and server applications.bootstrapPackage bootstrap provides the functionality to register possible options for aspects of the xDS client through the bootstrap file.Package bootstrap provides the functionality to register possible options for aspects of the xDS client through the bootstrap file.csdsPackage csds implements features to dump the status (xDS responses) the xds_client is using.Package csds implements features to dump the status (xDS responses) the xds_client is using.googledirectpathPackage googledirectpath implements a resolver that configures xds to make cloud to prod directpath connection.Package googledirectpath implements a resolver that configures xds to make cloud to prod directpath connection.internalPackage internal contains functions/structs shared by xds balancers/resolvers.Package internal contains functions/structs shared by xds balancers/resolvers.internal/balancerPackage balancer installs all the xds balancers.Package balancer installs all the xds balancers.internal/balancer/cdsbalancerPackage cdsbalancer implements a balancer to handle CDS responses.Package cdsbalancer implements a balancer to handle CDS responses.internal/balancer/clusterimplPackage clusterimpl implements the xds_cluster_impl balancing policy.Package clusterimpl implements the xds_cluster_impl balancing policy.internal/balancer/clustermanagerPackage clustermanager implements the cluster manager LB policy for xds.Package clustermanager implements the cluster manager LB policy for xds.internal/balancer/clusterresolverPackage clusterresolver contains the implementation of the cluster_resolver_experimental LB policy which resolves endpoint addresses using a list of one or more discovery mechanisms.Package clusterresolver contains the implementation of the cluster_resolver_experimental LB policy which resolves endpoint addresses using a list of one or more discovery mechanisms.internal/balancer/loadstorePackage loadstore contains the loadStoreWrapper shared by the balancers.Package loadstore contains the loadStoreWrapper shared by the balancers.internal/balancer/outlierdetectionPackage outlierdetection provides an implementation of the outlier detection LB policy, as defined in https://github.com/grpc/proposal/blob/master/A50-xds-outlier-detection.md.Package outlierdetection provides an implementation of the outlier detection LB policy, as defined in https://github.com/grpc/proposal/blob/master/A50-xds-outlier-detection.md.internal/balancer/priorityPackage priority implements the priority balancer.Package priority implements the priority balancer.internal/balancer/ringhashPackage ringhash implements the ringhash balancer.Package ringhash implements the ringhash balancer.internal/balancer/wrrlocalityPackage wrrlocality provides an implementation of the wrr locality LB policy, as defined in [A52 - xDS Custom LB Policies].Package wrrlocality provides an implementation of the wrr locality LB policy, as defined in [A52 - xDS Custom LB Policies].internal/clusterspecifierPackage clusterspecifier contains the ClusterSpecifier interface and a registry for storing and retrieving their implementations.Package clusterspecifier contains the ClusterSpecifier interface and a registry for storing and retrieving their implementations.internal/clusterspecifier/rlsPackage rls implements the RLS cluster specifier plugin.Package rls implements the RLS cluster specifier plugin.internal/httpfilterPackage httpfilter contains the HTTPFilter interface and a registry for storing and retrieving their implementations.Package httpfilter contains the HTTPFilter interface and a registry for storing and retrieving their implementations.internal/httpfilter/faultPackage fault implements the Envoy Fault Injection HTTP filter.Package fault implements the Envoy Fault Injection HTTP filter.internal/httpfilter/rbacPackage rbac implements the Envoy RBAC HTTP filter.Package rbac implements the Envoy RBAC HTTP filter.internal/httpfilter/routerPackage router implements the Envoy Router HTTP filter.Package router implements the Envoy Router HTTP filter.internal/resolverPackage resolver implements the xds resolver, that does LDS and RDS to find the cluster to use.Package resolver implements the xds resolver, that does LDS and RDS to find the cluster to use.internal/resolver/internalPackage internal contains functionality internal to the xDS resolver.Package internal contains functionality internal to the xDS resolver.internal/serverPackage server contains internal server-side functionality used by the public facing xds package.Package server contains internal server-side functionality used by the public facing xds package.internal/test/e2ePackage e2e implements xds e2e tests using go-control-plane.Package e2e implements xds e2e tests using go-control-plane.internal/testutilsPackage testutils provides utility types, for use in xds tests.Package testutils provides utility types, for use in xds tests.internal/testutils/fakeclientPackage fakeclient provides a fake implementation of an xDS client.Package fakeclient provides a fake implementation of an xDS client.internal/xdsclientPackage xdsclient implements a full fledged gRPC client for the xDS API used by the xds resolver and balancer implementations.Package xdsclient implements a full fledged gRPC client for the xDS API used by the xds resolver and balancer implementations.internal/xdsclient/internalPackage internal contains functionality internal to the xdsclient package.Package internal contains functionality internal to the xdsclient package.internal/xdsclient/loadPackage load provides functionality to record and maintain load data.Package load provides functionality to record and maintain load data.internal/xdsclient/transportPackage transport implements the xDS transport protocol functionality required by the xdsclient.Package transport implements the xDS transport protocol functionality required by the xdsclient.internal/xdsclient/transport/internalPackage internal contains functionality internal to the transport package.Package internal contains functionality internal to the transport package.internal/xdsclient/xdslbregistryPackage xdslbregistry provides a registry of converters that convert proto from load balancing configuration, defined by the xDS API spec, to JSON load balancing configuration.Package xdslbregistry provides a registry of converters that convert proto from load balancing configuration, defined by the xDS API spec, to JSON load balancing configuration.internal/xdsclient/xdslbregistry/converterPackage converter provides converters to convert proto load balancing configuration, defined by the xDS API spec, to JSON load balancing configuration.Package converter provides converters to convert proto load balancing configuration, defined by the xDS API spec, to JSON load balancing configuration.internal/xdsclient/xdsresourcePackage xdsresource implements the xDS data model layer.Package xdsresource implements the xDS data model layer.internal/xdsclient/xdsresource/versionPackage version defines constants to distinguish between supported xDS API versions.Package version defines constants to distinguish between supported xDS API versions.Click to show internal directories.Click to hide internal directories.Why GoUse CasesCase StudiesGet StartedPlaygroundTourStack OverflowHelpPackagesStandard LibrarySub-repositoriesAbout Go PackagesAboutDownloadBlogIssue TrackerRelease NotesBrand GuidelinesCode of ConductConnectTwitterGitHubSlackr/golangMeetupGolang WeeklyCopyrightTerms of ServicePrivacy PolicyReport an IssueTheme ToggleShortcuts ModalJump toCloseKeyboard shortcuts?: This menu/: Search siteforF: Jump toyorY: Canonical URLClosego.dev uses cookies from Google to deliver and enhance the quality of its services and to
        analyze traffic.Learn more.Okay