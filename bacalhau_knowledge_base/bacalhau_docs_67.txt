URL: https://docs.bacalhau.org/examples/model-inference/easyocr-optical-character-recognition-on-bacalhau

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookEasyOCR (Optical Character Recognition) on BacalhauIntroduction​In this example tutorial, we use Bacalhau and Easy OCR to digitize paper records or for recognizing characters or extract text data from images stored on IPFS, S3 or on the web.EasyOCRis a ready-to-use OCR with 80+ supported languages and all popular writing scripts including Latin, Chinese, Arabic, Devanagari, Cyrillic etc. With easy OCR, you use the pre-trained models or use your own fine-tuned model.TL;DR​Copybacalhaudockerrun\-iipfs://bafybeibvcllzpfviggluobcfassm3vy4x2a4yanfxtmn4ir7olyzfrgq64:/root/.EasyOCR/model/zh_sim_g2.pth\-i https://raw.githubusercontent.com/JaidedAI/EasyOCR/ae773d693c3f355aac2e58f0d8142c600172f016/examples/chinese.jpg \--timeout3600\--wait-timeout-secs3600\--gpu1\--memory10Gb\--cpu3\--id-only\--wait\jsacex/easyocr\--easyocr-lch_simen-f./inputs/chinese.jpg--detail=1--gpu=TrueRunning Easy OCR Locally​​Install the required dependenciesCopypipinstall--upgradeeasyocrLoad the different example imagesCopynpxdegitJaidedAI/EasyOCR/examples-fList all the images. You'll see an output like this:Copyls-ltotal3508-rw-r--r--1rootroot59898Jun1622:36chinese.jpg-rw-r--r--1rootroot97910Jun1622:36easyocr_framework.jpeg-rw-r--r--1rootroot1740957Jun1622:36english.png-rw-r--r--1rootroot487995Jun1622:36example2.png-rw-r--r--1rootroot127454Jun1622:36example3.png-rw-r--r--1rootroot488641Jun1622:36example.png-rw-r--r--1rootroot168376Jun1622:36french.jpg-rw-r--r--1rootroot42159Jun1622:36japanese.jpg-rw-r--r--1rootroot225531Jun1622:36korean.pngdrwxr-xr-x1rootroot4096Jun1513:37sample_data-rw-r--r--1rootroot82229Jun1622:36thai.jpg-rw-r--r--1rootroot34706Jun1622:36width_ths.pngNext, we create a reader to do OCR to get coordinates which represent a rectangle containing text and the text itself:Copyimporteasyocrreader=easyocr.Reader(['th','en'])# Doing OCR. Get bounding boxes.bounds=reader.readtext('thai.jpg')boundsContainerize your Script using Docker​You can skip this step and go straight to running aBacalhau jobWe will use theDockerfilethat is already created in theEasy OCR repo. Use the command below to clone the repoCopygitclonehttps://github.com/JaidedAI/EasyOCRcdEasyOCRBuild the Container​Thedocker buildcommand builds Docker images from a Dockerfile.Copydocker build -t <hub-user>/<repo-name>:<tag> .Before running the command replace:hub-userwith your docker hub username, If you don’t have a docker hub account followthese instructionsto create docker account, and use the username of the account you createdrepo-namewith the name of the container, you can name it anything you wanttagthis is not required but you can use the latest tagPush the container​Next, upload the image to the registry. This can be done by using the Docker hub username, repo name, or tag.Copydocker push <hub-user>/<repo-name>:<tag>Running a Bacalhau Job to Generate Easy OCR output​Prerequisite​To get started, you need to install the Bacalhau client, see more informationhere.Now that we have an image in the docker hub (your own or an example image from the manual), we can use the container for running on Bacalhau.Structure of the imperative command​Let's look closely at the command below:export JOB_ID=$( ... )exports the job ID as environment variablebacalhau docker run: call to bacalhauThe--gpu 1flag is set to specify hardware requirements, a GPU is needed to run such a jobThe--id-onlyflag is set to print only job id-i ipfs://bafybeibvc......Mounts the model from IPFS-i https://raw.githubusercontent.com...Mounts the Input Image from a URLjsacex/easyocrthe name and the tag of the docker image we are using-- easyocr -l ch_sim en -f ./inputs/chinese.jpg --detail=1 --gpu=Trueexecute script with following paramters:-l ch_sim: the name of the model-f ./inputs/chinese.jpg: path to the input Image or directory--detail=1: level of detail--gpu=True: we set this flag to true since we are running inference on a GPU. If you run this on a CPU - set this flag to falseSince the model and the image aren't present in the container we will mount the image from an URL and the model from IPFS. You can find models to download fromhere. You can choose the model you want to use in this case we will be using thezh_sim_g2modelCopyexportJOB_ID=$(bacalhaudockerrun\-iipfs://bafybeibvcllzpfviggluobcfassm3vy4x2a4yanfxtmn4ir7olyzfrgq64:/root/.EasyOCR/model/zh_sim_g2.pth\-i https://raw.githubusercontent.com/JaidedAI/EasyOCR/ae773d693c3f355aac2e58f0d8142c600172f016/examples/chinese.jpg \--timeout3600\--wait-timeout-secs3600\--gpu1\--memory10Gb\--cpu3\--id-only\--wait\jsacex/easyocr\--easyocr-lch_simen-f./inputs/chinese.jpg--detail=1--gpu=True)When a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on.Declarative job description​The same job can be presented in thedeclarativeformat. In this case, the description will look like this:Copyname:EasyOCRtype:batchcount:1tasks:-name:My main taskEngine:type:dockerparams:Image:"jsacex/easyocr"Entrypoint:-/bin/bashParameters:--c-easyocr -l ch_sim  en -f ./inputs/chinese.jpg --detail=1 --gpu=TrueInputSources:-Source:Type:"urlDownload"Params:URL: "https://raw.githubusercontent.com/JaidedAI/EasyOCR/ae773d693c3f355aac2e58f0d8142c600172f016/examples/chinese.jpg"Target:"/inputs/chinese.jpg"-Source:Type:"s3"Params:Bucket:"landsat-image-processing"Key:"*"Region:"us-east-1"Target:"/root/.EasyOCR/model/zh_sim_g2.pth"Resources:GPU:"1"The job description should be saved in.yamlformat, e.g.easyocr.yaml, and then run with the command:Copybacalhaujobruneasyocr.yamlChecking the State of your Jobs​Job status​You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysCompleted, that means the job is done, and we can get the results.Job information​You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download​You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presultsbacalhaujobget$JOB_ID--output-dirresultsAfter the download has finished you should see the following contents in results directoryViewing your Job Output​Now you can find the file in theresults/outputsfolder. You can view results by running following commands:Copylsresults# list the contents of the current directoryCopycatresults/stdout# displays the contents of the current directoryPreviousModel InferenceNextRunning Inference on Dolly 2.0 Model with Hugging FaceLast updated1 month agoOn this pageIntroduction​TL;DR​Running Easy OCR Locally​​Containerize your Script using Docker​Build the Container​Push the container​Running a Bacalhau Job to Generate Easy OCR output​Prerequisite​Structure of the imperative command​Declarative job description​Checking the State of your Jobs​Job status​Job information​Job download​Viewing your Job Output​Was this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.