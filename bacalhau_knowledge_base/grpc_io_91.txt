URL: https://grpc.io/docs/platforms/web/basics/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueWhy use gRPC and gRPC-Web?Define the ServiceImplement gRPC Backend ServerConfigure the Envoy ProxyGenerate Protobuf Messages and Service Client StubWrite JS Client CodeCompile the JS LibraryDocsPlatformsWebBasics tutorialBasics tutorialA basic tutorial introduction to gRPC-web.ContentsWhy use gRPC and gRPC-Web?Define the ServiceImplement gRPC Backend ServerConfigure the Envoy ProxyGenerate Protobuf Messages and Service Client StubWrite JS Client CodeCompile the JS LibraryBasics tutorialA basic tutorial introduction to gRPC-web.This tutorial provides a basic introduction on how to use
gRPC-Web from browsers.By walking through this example you’ll learn how to:Define a service in a .proto file.Generate client code using the protocol buffer compiler.Use the gRPC-Web API to write a simple client for your service.It assumes a passing familiarity withprotocol
buffers.Why use gRPC and gRPC-Web?With gRPC you can define your service once in a .proto file and implement
clients and servers in any of gRPC’s supported languages, which in turn can be
run in environments ranging from servers inside a large data center to your own
tablet - all the complexity of communication between different languages and
environments is handled for you by gRPC. You also get all the advantages of
working with protocol buffers, including efficient serialization, a simple IDL,
and easy interface updating. gRPC-Web lets you access gRPC services built in this
manner from browsers using an idiomatic API.Define the ServiceThe first step when creating a gRPC service is to define the service methods
and their request and response message types using protocol buffers. In this
example, we define ourEchoServicein a file calledecho.proto.
For more information about protocol buffers and proto3 syntax, please see theprotobuf documentation.messageEchoRequest{stringmessage=1;}messageEchoResponse{stringmessage=1;}serviceEchoService {rpcEcho(EchoRequest)returns(EchoResponse);}Implement gRPC Backend ServerNext, we implement our EchoService interface using Node in the backend gRPCEchoServer. This will handle requests from clients. See the filenode-server/server.jsfor details.You can implement the server in any language supported by gRPC. Please see
themain pagefor more details.functiondoEcho(call, callback) {callback(null, {message:call.request.message});}Configure the Envoy ProxyIn this example, we will use theEnvoyproxy to forward the gRPC browser request to the backend server. You can see
the complete config file inenvoy.yamlTo forward the gRPC requests to the backend server, we need a block like
this:admin:address:socket_address:{address: 0.0.0.0, port_value:9901}static_resources:listeners:-name:listener_0address:socket_address:{address: 0.0.0.0, port_value:8080}filter_chains:-filters:-name:envoy.http_connection_managertyped_config:"@type":type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManagercodec_type:autostat_prefix:ingress_httproute_config:name:local_routevirtual_hosts:-name:local_servicedomains:["*"]routes:-match:{prefix:"/"}route:{cluster:echo_service }http_filters:-name:envoy.grpc_webtyped_config:"@type":type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb-name:envoy.filters.http.routertyped_config:"@type":type.googleapis.com/envoy.extensions.filters.http.router.v3.Routerclusters:-name:echo_serviceconnect_timeout:0.25stype:LOGICAL_DNStyped_extension_protocol_options:envoy.extensions.upstreams.http.v3.HttpProtocolOptions:"@type":type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptionsexplicit_http_config:http2_protocol_options:{}lb_policy:ROUND_ROBINload_assignment:cluster_name:echo_serviceendpoints:-lb_endpoints:-endpoint:address:socket_address:address:node-serverport_value:9090You may also need to add some CORS setup to make sure the browser can request
cross-origin content.In this simple example, the browser makes gRPC requests to port:8080. Envoy
forwards the request to the backend gRPC server listening on port:9090.Generate Protobuf Messages and Service Client StubTo generate the protobuf message classes from ourecho.proto, run the
following command:$ protoc -I=$DIRecho.proto\--js_out=import_style=commonjs:$OUT_DIRTheimport_styleoption passed to the--js_outflag makes sure the
generated files will have CommonJS stylerequire()statements.To generate the gRPC-Web service client stub, first you need the gRPC-Web
protoc plugin. To compile the pluginprotoc-gen-grpc-web, you need to run
this from the repo’s root directory:$cdgrpc-web$ sudo make install-pluginTo generate the service client stub file, run this command:$ protoc -I=$DIRecho.proto\--grpc-web_out=import_style=commonjs,mode=grpcwebtext:$OUT_DIRIn the--grpc-web_outparam above:modecan begrpcwebtext(default) orgrpcwebimport_stylecan beclosure(default) orcommonjsOur command generates the client stub, by default, to the fileecho_grpc_web_pb.js.Write JS Client CodeNow you are ready to write some JS client code. Put this in aclient.jsfile.const{EchoRequest, EchoResponse}=require('./echo_pb.js');const{EchoServiceClient}=require('./echo_grpc_web_pb.js');varechoService=newEchoServiceClient('http://localhost:8080');varrequest=newEchoRequest();request.setMessage('Hello World!');echoService.echo(request, {},function(err, response) {// ...});You will need apackage.jsonfile{"name":"grpc-web-commonjs-example","dependencies": {"google-protobuf":"^3.6.1","grpc-web":"^0.4.0"},"devDependencies": {"browserify":"^16.2.2","webpack":"^4.16.5","webpack-cli":"^3.1.0"}}Compile the JS LibraryFinally, putting all these together, we can compile all the relevant JS files
into one single JS library that can be used in the browser.$ npm install$ npx webpack client.jsNow embeddist/main.jsinto your project and see it in action!Last modified December 11, 2023:update deprecated http2_protocol_options envoy field (#1228) (4476217)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About