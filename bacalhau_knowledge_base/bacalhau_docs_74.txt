Source: bacalhau_docs
URL: https://docs.bacalhau.org/examples/data-engineering/oceanography-data-conversion

Oceanography - Data Conversion
Introduction
The Surface Ocean CO₂ Atlas (SOCAT) contains measurements of the [fugacity](https://en.wikipedia.org/wiki/Fugacity) of CO₂ in seawater around the globe. But to calculate how much carbon the ocean is taking up from the atmosphere, these measurements need to be converted to the partial pressure of CO₂. We will convert the units by combining measurements of the surface temperature and fugacity. Python libraries (xarray, pandas, numpy) and the pyseaflux package facilitate this process.
In this example tutorial, our focus will be on running the oceanography dataset with Bacalhau, where we will investigate the data and convert the workload. This will enable the execution on the Bacalhau network, allowing us to leverage its distributed storage and compute resources.
Prerequisites
To get started, you need to install the Bacalhau client, see more information [here](/getting-started/installation)
Running Locally
Downloading the dataset
For the purposes of this example we will use the [SOCATv2022](https://www.socat.info/index.php/version-2022/) dataset in the "Gridded" format from the [SOCAT website](https://www.socat.info/) and long-term global sea surface temperature data from [NOAA](https://downloads.psl.noaa.gov/Datasets/noaa.oisst.v2/sst.mnmean.nc) - information about that dataset can be found [here](https://psl.noaa.gov/data/gridded/data.noaa.oisst.v2.highres.html).
Installing dependencies
Next let's write the requirements.txt
. This file will also be used by the Dockerfile to install the dependencies.
Reading and Viewing Data
We can see that the dataset contains latitude-longitude coordinates, the date, and a series of seawater measurements. Below is a plot of the average sea surface temperature (SST) between 2010 and 2020, where data have been collected by buoys and vessels.
Data Conversion
To convert the data from fugacity of CO2 (fCO2) to partial pressure of CO2 (pCO2) we will combine the measurements of the surface temperature and fugacity. The conversion is performed by the [pyseaflux](https://seaflux.readthedocs.io/en/latest/api.html?highlight=fCO2_to_pCO2#pyseaflux.fco2_pco2_conversion.fCO2_to_pCO2) package.
Writing the Script
Let's create a new file called main.py
and paste the following script in it:
This code loads and processes SST and SOCAT data, combines them, computes pCO2, and saves the results for further use.
Upload the Data to IPFS
The simplest way to upload the data to IPFS is to use a third-party service to "pin" data to the IPFS network, to ensure that the data exists and is available. To do this you need an account with a pinning service like [NFT.storage](https://nft.storage/) or [Pinata](https://pinata.cloud/). Once registered you can use their UI or API or SDKs to upload files.
This resulted in the IPFS CID of bafybeidunikexxu5qtuwc7eosjpuw6a75lxo7j5ezf3zurv52vbrmqwf6y
.
Setting up Docker Container
We will create a Dockerfile
and add the desired configuration to the file. These commands specify how the image will be built, and what extra requirements will be included.
Build the container
We will run docker build
command to build the container:
Before running the command replace:
hub-user
with your docker hub username, If you don’t have a docker hub account [follow these instructions to create a Docker account](https://docs.docker.com/docker-id/), and use the username of the account you created
repo-name
with the name of the container, you can name it anything you want
tag
this is not required but you can use the latest tag
Push the container
Now you can push this repository to the registry designated by its name or tag.
For more information about working with custom containers, see the [custom containers example](/setting-up/workload-onboarding/container/index-1).
Running a Bacalhau Job
Now that we have the data in IPFS and the Docker image pushed, next is to run a job using the bacalhau docker run
command
Structure of the command
Let's look closely at the command above:
bacalhau docker run
: call to Bacalhau--input ipfs://bafybeidunikexxu5qtuwc7eosjpuw6a75lxo7j5ezf3zurv52vbrmqwf6y
: CIDs to use on the job. Mounts them at '/inputs' in the execution.ghcr.io/bacalhau-project/examples/socat:0.0.11
: the name and the tag of the image we are usingpython main.py
: execute the script
When a job is submitted, Bacalhau prints out the related job_id
. We store that in an environment variable so that we can reuse it later on.
Declarative job description
The same job can be presented in the [declarative](/references/jobs/job) format. In this case, the description will look like this:
The job description should be saved in .yaml
format, e.g. oceanyaml
, and then run with the command:
Checking the State of your Jobs[](http://localhost:3000/examples/data-engineering/oceanography-conversion/#checking-the-state-of-your-jobs)
[](http://localhost:3000/examples/data-engineering/oceanography-conversion/#checking-the-state-of-your-jobs)
Job status: You can check the status of the job using bacalhau job list
.
When it says Published
or Completed
, that means the job is done, and we can get the results.
Job information: You can find out more information about your job by using bacalhau job describe
.
Job download: You can download your job results directly by using bacalhau job get
. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (results
) and downloaded our job output to be stored in that directory.
Viewing your Job Output[](http://localhost:3000/examples/data-engineering/oceanography-conversion/#viewing-your-job-output)
[](http://localhost:3000/examples/data-engineering/oceanography-conversion/#viewing-your-job-output)
To view the file, run the following command:
Support[](http://localhost:3000/examples/data-engineering/oceanography-conversion/#support)
[](http://localhost:3000/examples/data-engineering/oceanography-conversion/#support)
If you have questions or need support or guidance, please reach out to the [Bacalhau team via Slack](https://bacalhauproject.slack.com/ssb/redirect) (#general channel).
Last updated