URL: https://en.wikipedia.org/wiki/Architectural_patterns

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Definition2Architectural style3Analysis4Examples5See also6References7BibliographyToggle the table of contentsArchitectural pattern14 languagesالعربيةБългарскиCatalàDeutschEspañolFrançais한국어MagyarNorsk bokmålPolskiPortuguêsTürkçeУкраїнська中文Edit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsAppearancemove to sidebarhideFrom Wikipedia, the free encyclopedia(Redirected fromArchitectural patterns)Term in software engineering for a reusable solution to a common problemFor the use of the word "pattern" in the field of architecture, seePattern (architecture).Anarchitectural patternis a general, reusable resolution to a commonly occurring problem insoftware architecturewithin a given context.[1]The architectural patterns address various issues insoftware engineering, such ascomputer hardwareperformance limitations,high availabilityand minimization of abusiness risk. Some architectural patterns have been implemented withinsoftware frameworks. There are two main categories of architectural patterns:monolithicanddistributed.[2]The use of the word "pattern" in the software industry was influenced by similar concepts as expressed in traditionalarchitecture, such asChristopher Alexander'sA Pattern Language(1977) which discussed the practice in terms of establishing apattern lexicon, prompting the practitioners of computer science to contemplate their own design lexicon.Usage of thismetaphorwithin the software engineering profession became commonplace after the publication ofDesign Patterns(1994) byErich Gamma,Richard Helm,Ralph Johnson, andJohn Vlissides—now commonly known as the "Gang of Four"—coincident with the early years of the publicInternet, marking the onset of complex software systems "eating the world"[3]and the corresponding need to codify the rapidly sprawling world of software development at the deepest possible level, while remaining flexible and adaptive.Architectural patterns are similar tosoftware design patternsbut have a broader scope.Definition[edit]Even though an architectural pattern conveys an image of a system, it is not an architecture. An architectural pattern is a concept that solves and delineates some essential cohesive elements of a software architecture. Countless different architectures may implement the same pattern and share the related characteristics. Patterns are often defined as "strictly described and commonly available".[4][5]Architectural style[edit]Following traditional building architecture, asoftware architectural styleis a specific method of construction, characterized by the features that make it notable.An architectural style defines: a family of systems in terms of a pattern of structural organization; a vocabulary of components and connectors, with constraints on how they can be combined.[6]An architectural style is a named collection of architectural design decisions that (1) are applicable in a given development context, (2) constrain architectural design decisions that are specific to a particular system within that context, and (3) elicit beneficial qualities in each resulting system.[1]Some treat architectural patterns and architectural styles as the same,[7]some treat styles as specializations of patterns. What they have in common is both patterns and styles are idioms for architects to use, they "provide a common language"[7]or "vocabulary"[6]with which to describe classes of systems.The main difference is that a pattern can be seen as a solution to a problem, while a style is more general and does not require a problem to solve for its appearance.Analysis[edit]Software is managed by its problem space into which solutions may be applied.  The table below shows how software is considered across various problem spaces, defined by a sub-domain and addressed with correspondingsoftware design patternsandsolution patterns.  Sub-domains can be incorporated into the analysis of other sub-domains, for example, solving an Artificial Intelligence problem is first approached as a Data Architecture problem.Sub-domain areaArchitecture patternSoftware design patternsSolution patternsRelated patternsData integration/SOAETL (data extraction transformation and loading)Change data captureNear real-time ETLBatch ETLData discoveryError handlingJob schedulingData validationSlowly changing dimensions loadEAIMaster data hubOperational data store(ODS)Data martData warehouseMFTEAI/ESBPublish/subscribeRequest/replyMessage exchange patternsOne-waySynchronous request/responseBasic callbackClaim checkSOAData architectureTransaction data stores(TDS/OLTP)Master data storeOperational data storeBig dataData martData warehouseCustom applications databasesPackaged application databasesClustered File SystemNoSQL DatabaseETLEAISOAMapReduceAnalytics andbusiness intelligenceTransactional reportingOperational analyticsBusiness analyticsPredictive analyticsPrescriptive analyticsStreaming analyticsData science and advanced analyticsNLPTransactional reporting data accessOperational reporting data accessAnalytical reporting data accessAnalytical dashboard data accessOperational dashboard data accessData miningReal-time dashboardsIn-memory analyticsStatistical analysisPredictive analyticsETLEAITDSOperational data storeData martMaster data managementMaster data hubMaster data replicationMaster data servicesMaster data synchronizationChange data captureEAISTD[clarification needed]Data modelingDimensional data modelingE-R data modelingModeling standardsNaming conventionsArtificial intelligenceDecision managementSpeech recognitionText analytics and NLPNatural language generationClassic machine learningDeep learningRobotic process automationImage and video analysisExamples[edit]Some examples of architectural patterns:Cell based architectureBlackboard systemBroker patternEvent-driven architectureSaga pattern[2]Monolithic pattern[2]Distributed pattern[2]Modular monolith[2]Implicit invocationLayersHexagonal architectureMicroservicesAction–domain–responder,Model–view–controllerPresentation–abstraction–controlModel–view–presenterModel–view–viewmodelModel–view–adapterEntity component systemEntity-control-boundaryMultitier architecture(often three-tier orn-tier)Object-oriented programmingNaked objectsOperational data store(ODS)Peer-to-peerPipe and filter architectureService-oriented architectureSpace-based architectureDistributed hash tablePublish–subscribe patternMessage brokerHierarchical model–view–controllerSee also[edit]List of software architecture styles and patternsProcess Driven Messaging ServiceEnterprise architectureCommon layers in an information system logical architectureReferences[edit]^abTaylor, R.N.; Medvidović, N.; Dashofy, E.M. (2009).Software architecture: Foundations, Theory and Practice. Wiley.ISBN9780470167748.^abcdeFundamentals of Software Architecture: An Engineering Approach. O'Reilly Media. 2020.ISBN978-1492043454.^Andreessen, Marc(20 August 2011)."Why Software Is Eating The World".The Wall Street Journal. Retrieved25 April2020.^Chang, Chih-Hung; Lu, Chih-Wei; Lin, Chih-Hao; Yang, Ming-Feng; Tsai, Ching-Fu (June 2008)."An Experience of Applying Pattern-based Software Framework to Improve the Quality of Software Development: 4. The Design and Implementation of OS2F".Journal of Software Engineering Studies, Vol. 2, No. 6. the Third Taiwan Conference on Software Engineering (TCSE07). pp. 185–194. Archived fromthe originalon 2011-09-22. Retrieved2012-05-16.Furthermore, patterns are often defined as something "strictly described and commonly available". For example, layered architecture is a call-and-return style, when it defines an overall style to interact.^"Architectural Patterns: Definition". AAHN INFOTECH (INDIA) PVT. LTD. Archived fromthe originalon 2012-06-23. Retrieved2012-05-16.Even though an architectural pattern conveys an image of a system, it is not an architecture as such. An architectural pattern is rather a concept that solves and delineates some essential cohesive elements of a software architecture. Countless different architectures may implement the same pattern and thereby share the related characteristics. Furthermore, patterns are often defined as something "strictly described and commonly available".^abShaw, M.; Garlan, D. (1996).Software architecture : perspectives on an emerging discipline. Prentice Hall.ISBN9780131829572.^ab"Ch. 3: Architectural Patterns and Styles".Microsoft Application Architecture Guide(2nd ed.). Microsoft Press. October 2009.ISBN9780735627109.Bibliography[edit]Avgeriou, Paris; Zdun, Uwe (2005)."Architectural patterns revisited:a pattern language"(PDF).10th European Conference on Pattern Languages of Programs (EuroPlop 2005), Irsee, Germany, July. UVK Verlagsgesellschaft. pp. 1–39.CiteSeerX10.1.1.141.7444.ISBN9783879408054.Buschmann F.; Meunier R.; Rohnert H.; Sommerlad P.; Stal M. (1996).Pattern-Oriented Software Architecture: A System of Patterns. Wiley.ISBN9781118725269.Bass L.; Clements P.; Kazman R. (2003).Software Architecture in Practice. Addison-Wesley.ISBN9780321154958.vteSoftware design patternsGang of FourpatternsCreationalAbstract factoryBuilderFactory methodPrototypeSingletonStructuralAdapterBridgeCompositeDecoratorFacadeFlyweightProxyBehavioralChain of responsibilityCommandInterpreterIteratorMediatorMementoObserverStateStrategyTemplate methodVisitorConcurrencypatternsActive objectBalkingBinding propertiesDouble-checked lockingEvent-based asynchronousGuarded suspensionJoinLockMonitorProactorReactorRead–write lockSchedulerScheduled-task patternSemaphoreThread poolThread-local storageArchitecturalpatternsFront controllerInterceptorMVCMVPMVVMADRECSn-tierSpecificationPublish–subscribeNaked objectsService locatorActive recordIdentity mapData access objectData transfer objectInversion of controlModel 2BrokerOtherpatternsBlackboardBusiness delegateComposite entityDependency injectionIntercepting filterLazy loadingMock objectNull objectObject poolServantTwinType tunnelMethod chainingDelegationBooksDesign PatternsEnterprise Integration PatternsPeopleChristopher AlexanderErich GammaRalph JohnsonJohn VlissidesGrady BoochKent BeckWard CunninghamMartin FowlerRobert MartinJim CoplienDouglas SchmidtLinda RisingCommunitiesThe Hillside GroupPortland Pattern RepositorySee alsoAnti-patternArchitectural patternRetrieved from "https://en.wikipedia.org/w/index.php?title=Architectural_pattern&oldid=1228689332"Categories:Architectural pattern (computer science)Software design patternsHidden categories:Articles with short descriptionShort description is different from WikidataWikipedia articles needing clarification from January 2023This page was last edited on 12 June 2024, at 16:41(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view