Source: grpc_io
URL: https://grpc.io/docs/languages/csharp/api/

Namespace Grpc.Core
Classes
[AsyncClientStreamingCall<TRequest, TResponse>](Grpc.Core.AsyncClientStreamingCall-2.html)
Return type for client streaming calls.
[AsyncDuplexStreamingCall<TRequest, TResponse>](Grpc.Core.AsyncDuplexStreamingCall-2.html)
Return type for bidirectional streaming calls.
[AsyncServerStreamingCall<TResponse>](Grpc.Core.AsyncServerStreamingCall-1.html)
Return type for server streaming calls.
[AsyncStreamReaderExtensions](Grpc.Core.AsyncStreamReaderExtensions.html)
Extension methods for [IAsyncStreamReader<T>](Grpc.Core.IAsyncStreamReader-1.html).
[AsyncUnaryCall<TResponse>](Grpc.Core.AsyncUnaryCall-1.html)
Return type for single request - single response call.
[AuthContext](Grpc.Core.AuthContext.html)
Authentication context for a call. AuthContext is the only reliable source of truth when it comes to authenticating calls. Using any other call/context properties for authentication purposes is wrong and inherently unsafe. Note: experimental API that can change or be removed without any prior notice.
[AuthInterceptorContext](Grpc.Core.AuthInterceptorContext.html)
Context for an RPC being intercepted by [AsyncAuthInterceptor](Grpc.Core.AsyncAuthInterceptor.html).
[AuthProperty](Grpc.Core.AuthProperty.html)
A property of an [AuthContext](Grpc.Core.AuthContext.html).
Note: experimental API that can change or be removed without any prior notice.
[BindServiceMethodAttribute](Grpc.Core.BindServiceMethodAttribute.html)
Specifies the location of the service bind method for a gRPC service. The bind method is typically generated code and is used to register a service's methods with the server on startup.
The bind method signature takes a [ServiceBinderBase](Grpc.Core.ServiceBinderBase.html) and an optional
instance of the service base class, e.g. static void BindService(ServiceBinderBase, GreeterService)
.
[CallCredentials](Grpc.Core.CallCredentials.html)
Client-side call credentials. Provide authorization with per-call granularity.
[CallCredentialsConfiguratorBase](Grpc.Core.CallCredentialsConfiguratorBase.html)
Base class for objects that can consume configuration from CallCredentials
objects.
Note: experimental API that can change or be removed without any prior notice.
[CallInvoker](Grpc.Core.CallInvoker.html)
Abstraction of client-side RPC invocation.
[Calls](Grpc.Core.Calls.html)
Helper methods for generated clients to make RPC calls. Most users will use this class only indirectly and will be making calls using client object generated from protocol buffer definition files.
[Channel](Grpc.Core.Channel.html)
Represents a gRPC channel. Channels are an abstraction of long-lived connections to remote servers. More client objects can reuse the same channel. Creating a channel is an expensive operation compared to invoking a remote call so in general you should reuse a single channel for as many calls as possible.
[ChannelBase](Grpc.Core.ChannelBase.html)
Base class for gRPC channel. Channels are an abstraction of long-lived connections to remote servers.
[ChannelCredentials](Grpc.Core.ChannelCredentials.html)
Client-side channel credentials. Used for creation of a secure channel.
[ChannelCredentialsConfiguratorBase](Grpc.Core.ChannelCredentialsConfiguratorBase.html)
Base class for objects that can consume configuration from CallCredentials
objects.
Note: experimental API that can change or be removed without any prior notice.
[ChannelOption](Grpc.Core.ChannelOption.html)
Channel option specified when creating a channel.
Corresponds to grpc_channel_args from grpc/grpc.h.
Commonly used channel option names are defined in ChannelOptions
,
but any of the GRPC_ARG_* channel options names defined in grpc_types.h can be used.
[ChannelOptions](Grpc.Core.ChannelOptions.html)
Defines names of most commonly used channel options. Other supported options names can be found in grpc_types.h (GRPC_ARG_* definitions)
[ClientBase](Grpc.Core.ClientBase.html)
Base class for client-side stubs.
[ClientBase.ClientBaseConfiguration](Grpc.Core.ClientBase.ClientBaseConfiguration.html)
Represents configuration of ClientBase. The class itself is visible to subclasses, but contents are marked as internal to make the instances opaque. The verbose name of this class was chosen to make name clash in generated code less likely.
[ClientBase<T>](Grpc.Core.ClientBase-1.html)
Generic base class for client-side stubs.
[ContextPropagationOptions](Grpc.Core.ContextPropagationOptions.html)
Options for [ContextPropagationToken](Grpc.Core.ContextPropagationToken.html).
[ContextPropagationToken](Grpc.Core.ContextPropagationToken.html)
Token for propagating context of server side handlers to child calls. In situations when a backend is making calls to another backend, it makes sense to propagate properties like deadline and cancellation token of the server call to the child call. Underlying gRPC implementation may provide other "opaque" contexts (like tracing context) that are not explicitly accesible via the public C# API, but this token still allows propagating them.
[DefaultCallInvoker](Grpc.Core.DefaultCallInvoker.html)
Invokes client RPCs using [Calls](Grpc.Core.Calls.html).
[DeserializationContext](Grpc.Core.DeserializationContext.html)
Provides access to the payload being deserialized when deserializing messages.
[GrpcEnvironment](Grpc.Core.GrpcEnvironment.html)
Encapsulates initialization and shutdown of gRPC library.
[KeyCertificatePair](Grpc.Core.KeyCertificatePair.html)
Key certificate pair (in PEM encoding).
[Marshaller<T>](Grpc.Core.Marshaller-1.html)
Encapsulates the logic for serializing and deserializing messages.
[Marshallers](Grpc.Core.Marshallers.html)
Utilities for creating marshallers.
[Metadata](Grpc.Core.Metadata.html)
A collection of metadata entries that can be exchanged during a call. gRPC supports these types of metadata:
- Request headersare sent by the client at the beginning of a remote call before any request messages are sent.
- Response headersare sent by the server at the beginning of a remote call handler before any response messages are sent.
- Response trailersare sent by the server at the end of a remote call along with resulting call status.
[Metadata.Entry](Grpc.Core.Metadata.Entry.html)
Metadata entry
[Method<TRequest, TResponse>](Grpc.Core.Method-2.html)
A description of a remote method.
[RpcException](Grpc.Core.RpcException.html)
Thrown when remote procedure call fails. Every RpcException
is associated with a resulting [Status](Grpc.Core.RpcException.html#Grpc_Core_RpcException_Status) of the call.
[SerializationContext](Grpc.Core.SerializationContext.html)
Provides storage for payload when serializing a message.
[Server](Grpc.Core.Server.html)
gRPC server. A single server can serve an arbitrary number of services and can listen on more than one port.
[Server.ServerPortCollection](Grpc.Core.Server.ServerPortCollection.html)
Collection of server ports.
[Server.ServiceDefinitionCollection](Grpc.Core.Server.ServiceDefinitionCollection.html)
Collection of service definitions.
[ServerCallContext](Grpc.Core.ServerCallContext.html)
Context for a server-side call.
[ServerCredentials](Grpc.Core.ServerCredentials.html)
Server side credentials.
[ServerPort](Grpc.Core.ServerPort.html)
A port exposed by a server.
[ServerServiceDefinition](Grpc.Core.ServerServiceDefinition.html)
Stores mapping of methods to server call handlers.
Normally, the ServerServiceDefinition
objects will be created by the BindService
factory method
that is part of the autogenerated code for a protocol buffers service definition.
[ServerServiceDefinition.Builder](Grpc.Core.ServerServiceDefinition.Builder.html)
Builder class for [ServerServiceDefinition](Grpc.Core.ServerServiceDefinition.html).
[ServiceBinderBase](Grpc.Core.ServiceBinderBase.html)
Allows binding server-side method implementations in alternative serving stacks.
Instances of this class are usually populated by the BindService
method
that is part of the autogenerated code for a protocol buffers service definition.
[SslCredentials](Grpc.Core.SslCredentials.html)
Client-side SSL credentials.
[SslServerCredentials](Grpc.Core.SslServerCredentials.html)
Server-side SSL credentials.
[VerifyPeerContext](Grpc.Core.VerifyPeerContext.html)
Verification context for VerifyPeerCallback. Note: experimental API that can change or be removed without any prior notice.
[VersionInfo](Grpc.Core.VersionInfo.html)
Provides info about current version of gRPC.
See [https://codingforsmarties.wordpress.com/2016/01/21/how-to-version-assemblies-destined-for-nuget/](https://codingforsmarties.wordpress.com/2016/01/21/how-to-version-assemblies-destined-for-nuget/)
for rationale about assembly versioning.
[WriteOptions](Grpc.Core.WriteOptions.html)
Options for write operations.
Structs
[CallInvocationDetails<TRequest, TResponse>](Grpc.Core.CallInvocationDetails-2.html)
Details about a client-side call to be invoked.
[CallOptions](Grpc.Core.CallOptions.html)
Options for calls made by client.
[Status](Grpc.Core.Status.html)
Represents RPC result, which consists of [StatusCode](Grpc.Core.Status.html#Grpc_Core_Status_StatusCode) and an optional detail string.
Interfaces
[IAsyncStreamReader<T>](Grpc.Core.IAsyncStreamReader-1.html)
A stream of messages to be read.
Messages can be awaited await reader.MoveNext()
, that returns true
if there is a message available and false
if there are no more messages
(i.e. the stream has been closed).
On the client side, the last invocation of MoveNext()
either returns false
if the call has finished successfully or throws RpcException
if call finished
with an error. Once the call finishes, subsequent invocations of MoveNext()
will
continue yielding the same result (returning false
or throwing an exception).
On the server side, MoveNext()
does not throw exceptions.
In case of a failure, the request stream will appear to be finished
(MoveNext
will return false
) and the CancellationToken
associated with the call will be cancelled to signal the failure.
MoveNext()
operations can be cancelled via a cancellation token. Cancelling
an individual read operation has the same effect as cancelling the entire call
(which will also result in the read operation returning prematurely), but the per-read cancellation
tokens passed to MoveNext() only result in cancelling the call if the read operation haven't finished
yet.
[IAsyncStreamWriter<T>](Grpc.Core.IAsyncStreamWriter-1.html)
A writable stream of messages.
[IClientStreamWriter<T>](Grpc.Core.IClientStreamWriter-1.html)
Client-side writable stream of messages with Close capability.
[IMethod](Grpc.Core.IMethod.html)
A non-generic representation of a remote method.
[IServerStreamWriter<T>](Grpc.Core.IServerStreamWriter-1.html)
A writable stream of messages that is used in server-side handlers.
Enums
[ChannelOption.OptionType](Grpc.Core.ChannelOption.OptionType.html)
Type of ChannelOption
.
[ChannelState](Grpc.Core.ChannelState.html)
Connectivity state of a channel. Based on grpc_connectivity_state from grpc/grpc.h
[CompressionLevel](Grpc.Core.CompressionLevel.html)
Compression level based on grpc_compression_level from grpc/compression.h
[MethodType](Grpc.Core.MethodType.html)
Method types supported by gRPC.
[SslClientCertificateRequestType](Grpc.Core.SslClientCertificateRequestType.html)
Modes of requesting client's SSL certificate by the server.
Corresponds to grpc_ssl_client_certificate_request_type
.
[StatusCode](Grpc.Core.StatusCode.html)
Result of a remote procedure call. Based on grpc_status_code from grpc/status.h
[WriteFlags](Grpc.Core.WriteFlags.html)
Flags for write operations.
Delegates
[AsyncAuthInterceptor](Grpc.Core.AsyncAuthInterceptor.html)
Asynchronous authentication interceptor for [CallCredentials](Grpc.Core.CallCredentials.html).
[ClientStreamingServerMethod<TRequest, TResponse>](Grpc.Core.ClientStreamingServerMethod-2.html)
Server-side handler for client streaming call.
[DuplexStreamingServerMethod<TRequest, TResponse>](Grpc.Core.DuplexStreamingServerMethod-2.html)
Server-side handler for bidi streaming call.
[ServerStreamingServerMethod<TRequest, TResponse>](Grpc.Core.ServerStreamingServerMethod-2.html)
Server-side handler for server streaming call.
[UnaryServerMethod<TRequest, TResponse>](Grpc.Core.UnaryServerMethod-2.html)
Server-side handler for unary call.
[VerifyPeerCallback](Grpc.Core.VerifyPeerCallback.html)
Callback invoked with the expected targetHost and the peer's certificate. If false is returned by this callback then it is treated as a verification failure and the attempted connection will fail. Invocation of the callback is blocking, so any implementation should be light-weight. Note that the callback can potentially be invoked multiple times, concurrently from different threads (e.g. when multiple connections are being created for the same credentials).