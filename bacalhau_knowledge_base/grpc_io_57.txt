URL: https://grpc.io/docs/languages/node/basics/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueWhy use gRPC?Example code and setupDefining the serviceLoading service descriptors from proto filesCreating the serverImplementing RouteGuideStarting the serverCreating the clientCreating a stubCalling service methodsSimple RPCStreaming RPCsTry it out!DocsLanguagesNodeBasics tutorialBasics tutorialA basic tutorial introduction to gRPC in Node.ContentsWhy use gRPC?Example code and setupDefining the serviceLoading service descriptors from proto filesCreating the serverImplementing RouteGuideStarting the serverCreating the clientCreating a stubCalling service methodsSimple RPCStreaming RPCsTry it out!Basics tutorialA basic tutorial introduction to gRPC in Node.This tutorial provides a basic Node.js programmer’s introduction
to working with gRPC.By walking through this example you’ll learn how to:Define a service in a.protofile.Use the Node.js gRPC API to write a simple client and server for your service.It assumes that you have read theIntroduction to gRPCand are familiar
withprotocol
buffers. Note
that the example in this tutorial uses theproto3version of the protocol
buffers language. You can find out more in theproto3 language guide.Why use gRPC?Our example is a simple route mapping application that lets clients get
information about features on their route, create a summary of their route, and
exchange route information such as traffic updates with the server and other
clients.With gRPC we can define our service once in a.protofile and generate clients
and servers in any of gRPC’s supported languages, which in turn can be run in
environments ranging from servers inside a large data center to your own tablet —
all the complexity of communication between different languages and environments is
handled for you by gRPC. We also get all the advantages of working with protocol
buffers, including efficient serialization, a simple IDL, and easy interface
updating.Example code and setupThe example code for our tutorial is ingrpc/grpc-node/examples/routeguide/dynamic_codegen.
As you’ll see if you look at the repository, there’s also a very similar-looking
example ingrpc/grpc-node/examples/routeguide/static_codegen.
We have two versions of our route guide example because there are two ways to
generate the code needed to work with protocol buffers in Node.js - one approach
usesProtobuf.jsto dynamically generate the code at runtime, the other uses
code statically generated using the protocol buffer compilerprotoc. The
examples behave identically, and either server can be used with either client.
As suggested by the directory name, we’ll be using the version with dynamically
generated code in this document, but feel free to look at the static code
example too.To download the example, clone thegrpcrepository by running the following
command:$ git clone -b @grpc/grpc-js@1.9.0 --depth1--shallow-submodules https://github.com/grpc/grpc-node$cdgrpcThen change your current directory toexamples:$cdexamplesYou also should have the relevant tools installed to generate the server and
client interface code - if you don’t already, follow the setup instructions inQuick start.Defining the serviceOur first step (as you’ll know from theIntroduction to gRPC) is to
define the gRPCserviceand the methodrequestandresponsetypes usingprotocol
buffers. You can
see the complete .proto file inexamples/protos/route_guide.proto.To define a service, you specify a namedservicein your.protofile:serviceRouteGuide {...}Then you definerpcmethods inside your service definition, specifying their
request and response types. gRPC lets you define four kinds of service methods,
all of which are used in theRouteGuideservice:Asimple RPCwhere the client sends a request to the server using the stub
and waits for a response to come back, just like a normal function call.// Obtains the feature at a given position.rpcGetFeature(Point)returns(Feature) {}Aserver-side streaming RPCwhere the client sends a request to the server
and gets a stream to read a sequence of messages back. The client reads from
the returned stream until there are no more messages. As you can see in our
example, you specify a server-side streaming method by placing thestreamkeyword before theresponsetype.// Obtains the Features available within the given Rectangle.  Results are// streamed rather than returned at once (e.g. in a response message with a// repeated field), as the rectangle may cover a large area and contain a// huge number of features.rpcListFeatures(Rectangle)returns(stream Feature) {}Aclient-side streaming RPCwhere the client writes a sequence of messages
and sends them to the server, again using a provided stream. Once the client
has finished writing the messages, it waits for the server to read them all
and return its response. You specify a client-side streaming method by placing
thestreamkeyword before therequesttype.// Accepts a stream of Points on a route being traversed, returning a// RouteSummary when traversal is completed.rpcRecordRoute(stream Point)returns(RouteSummary) {}Abidirectional streaming RPCwhere both sides send a sequence of messages
using a read-write stream. The two streams operate independently, so clients
and servers can read and write in whatever order they like: for example, the
server could wait to receive all the client messages before writing its
responses, or it could alternately read a message then write a message, or
some other combination of reads and writes. The order of messages in each
stream is preserved. You specify this type of method by placing thestreamkeyword before both the request and the response.// Accepts a stream of RouteNotes sent while a route is being traversed,// while receiving other RouteNotes (e.g. from other users).rpcRouteChat(stream RouteNote)returns(stream RouteNote) {}Our.protofile also contains protocol buffer message type definitions for all
the request and response types used in our service methods - for example, here’s
thePointmessage type:// Points are represented as latitude-longitude pairs in the E7 representation// (degrees multiplied by 10**7 and rounded to the nearest integer).// Latitudes should be in the range +/- 90 degrees and longitude should be in// the range +/- 180 degrees (inclusive).messagePoint{int32latitude=1;int32longitude=2;}Loading service descriptors from proto filesThe Node.js library dynamically generates service descriptors and client stub
definitions from.protofiles loaded at runtime.To load a.protofile, simplyrequirethe gRPC proto loader library and use itsloadSync()method, then pass the output to the gRPC library’sloadPackageDefinitionmethod:varPROTO_PATH=__dirname+'/../../protos/route_guide.proto';vargrpc=require('@grpc/grpc-js');varprotoLoader=require('@grpc/proto-loader');// Suggested options for similarity to existing grpc.load behaviorvarpackageDefinition=protoLoader.loadSync(PROTO_PATH,{keepCase:true,longs:String,enums:String,defaults:true,oneofs:true});varprotoDescriptor=grpc.loadPackageDefinition(packageDefinition);// The protoDescriptor object has the full package hierarchyvarrouteguide=protoDescriptor.routeguide;Once you’ve done this, the stub constructor is in therouteguidenamespace
(protoDescriptor.routeguide.RouteGuide) and the service descriptor (which is
used to create a server) is a property of the stub
(protoDescriptor.routeguide.RouteGuide.service);Creating the serverFirst let’s look at how we create aRouteGuideserver. If you’re only
interested in creating gRPC clients, you can skip this section and go straight
toCreating the client(though you might find it interesting
anyway!).There are two parts to making ourRouteGuideservice do its job:Implementing the service interface generated from our service definition:
doing the actual “work” of our service.Running a gRPC server to listen for requests from clients and return the
service responses.You can find our exampleRouteGuideserver inexamples/routeguide/dynamic_codegen/route_guide_server.js.
Let’s take a closer look at how it works.Implementing RouteGuideAs you can see, our server has aServerconstructor generated from theRouteGuide.servicedescriptor objectvarServer=newgrpc.Server();In this case we’re implementing theasynchronousversion ofRouteGuide,
which provides our default gRPC server behavior.The functions inroute_guide_server.jsimplement all our service methods.
Let’s look at the simplest type first,getFeature, which just gets aPointfrom the client and returns the corresponding feature information from its
database in aFeature.functioncheckFeature(point) {varfeature;// Check if there is already a feature object for the given pointfor(vari=0; i<feature_list.length; i++) {feature=feature_list[i];if(feature.location.latitude===point.latitude&&feature.location.longitude===point.longitude) {returnfeature;}}varname='';feature={name:name,location:point};returnfeature;}functiongetFeature(call, callback) {callback(null, checkFeature(call.request));}The method is passed a call object for the RPC, which has thePointparameter
as a property, and a callback to which we can pass our returnedFeature. In
the method body we populate aFeaturecorresponding to the given point and
pass it to the callback, with a null first parameter to indicate that there is
no error.Now let’s look at something a bit more complicated - a streaming RPC.listFeaturesis a server-side streaming RPC, so we need to send back multipleFeatures to our client.functionlistFeatures(call) {varlo=call.request.lo;varhi=call.request.hi;varleft=_.min([lo.longitude, hi.longitude]);varright=_.max([lo.longitude, hi.longitude]);vartop=_.max([lo.latitude, hi.latitude]);varbottom=_.min([lo.latitude, hi.latitude]);// For each feature, check if it is in the given bounding box_.each(feature_list,function(feature) {if(feature.name==='') {return;}if(feature.location.longitude>=left&&feature.location.longitude<=right&&feature.location.latitude>=bottom&&feature.location.latitude<=top) {call.write(feature);}});call.end();}As you can see, instead of getting the call object and callback in our method
parameters, this time we get acallobject that implements theWritableinterface. In the method, we create as manyFeatureobjects as we need to
return, writing them to thecallusing itswrite()method. Finally, we callcall.end()to indicate that we have sent all messages.If you look at the client-side streaming methodRecordRouteyou’ll see it’s
quite similar to the unary call, except this time thecallparameter
implements theReaderinterface. Thecall’s'data'event fires every time
there is new data, and the'end'event fires when all data has been read. Like
the unary case, we respond by calling the callbackcall.on('data',function(point) {// Process user data});call.on('end',function() {callback(null, result);});Finally, let’s look at our bidirectional streaming RPCRouteChat().functionrouteChat(call) {call.on('data',function(note) {varkey=pointKey(note.location);/* For each note sent, respond with all previous notes that correspond to* the same point */if(route_notes.hasOwnProperty(key)) {_.each(route_notes[key],function(note) {call.write(note);});}else{route_notes[key]=[];}// Then add the new note to the listroute_notes[key].push(JSON.parse(JSON.stringify(note)));});call.on('end',function() {call.end();});}This time we get acallimplementingDuplexthat can be used to readandwrite messages. The syntax for reading and writing here is exactly the same as
for our client-streaming and server-streaming methods. Although each side will
always get the other’s messages in the order they were written, both the client
and server can read and write in any order — the streams operate completely
independently.Starting the serverOnce we’ve implemented all our methods, we also need to start up a gRPC server
so that clients can actually use our service. The following snippet shows how we
do this for ourRouteGuideservice:functiongetServer() {varserver=newgrpc.Server();server.addService(routeguide.RouteGuide.service, {getFeature:getFeature,listFeatures:listFeatures,recordRoute:recordRoute,routeChat:routeChat});returnserver;}varrouteServer=getServer();routeServer.bindAsync('0.0.0.0:50051', grpc.ServerCredentials.createInsecure(), () => {routeServer.start();});As you can see, we build and start our server with the following steps:Create aServerconstructor from theRouteGuideservice descriptor.Implement the service methods.Create an instance of the server by calling theServerconstructor with
the method implementations.Specify the address and port we want to use to listen for client requests
using the instance’sbind()method.Callstart()on the instance to start the RPC server.Creating the clientIn this section, we’ll look at creating a Node.js client for ourRouteGuideservice. You can see our complete example client code inexamples/routeguide/dynamic_codegen/route_guide_client.js.Creating a stubTo call service methods, we first need to create astub. To do this, we just
need to call the RouteGuide stub constructor, specifying the server address and
port.newrouteguide.RouteGuide('localhost:50051', grpc.credentials.createInsecure());Calling service methodsNow let’s look at how we call our service methods. Note that all of these
methods are asynchronous: they use either events or callbacks to retrieve
results.Simple RPCCalling the simple RPCGetFeatureis nearly as straightforward as calling a
local asynchronous method.varpoint={latitude:409146138, longitude:-746188906};stub.getFeature(point,function(err, feature) {if(err) {// process error}else{// process feature}});As you can see, we create and populate a request object. Finally, we call the
method on the stub, passing it the request and callback. If there is no error,
then we can read the response information from the server from our response
object.console.log('Found feature called "'+feature.name+'" at '+feature.location.latitude/COORD_FACTOR+', '+feature.location.longitude/COORD_FACTOR);Streaming RPCsNow let’s look at our streaming methods. If you’ve already readCreating the
serversome of this may look very familiar - streaming RPCs are
implemented in a similar way on both sides. Here’s where we call the server-side
streaming methodListFeatures, which returns a stream of geographicalFeatures:varcall=client.listFeatures(rectangle);call.on('data',function(feature) {console.log('Found feature called "'+feature.name+'" at '+feature.location.latitude/COORD_FACTOR+', '+feature.location.longitude/COORD_FACTOR);});call.on('end',function() {// The server has finished sending});call.on('error',function(e) {// An error has occurred and the stream has been closed.});call.on('status',function(status) {// process status});Instead of passing the method a request and callback, we pass it a request and
get aReadablestream object back. The client can use theReadable’s'data'event to read the server’s responses. This event fires with eachFeaturemessage object until there are no more messages. Errors in the'data'callback will not cause the stream to be closed. The'error'event
indicates that an error has occurred and the stream has been closed. The'end'event indicates that the server has finished sending and no errors
occurred. Only one of'error'or'end'will be emitted. Finally, the'status'event fires when the server sends the status.The client-side streaming methodRecordRouteis similar, except there we pass
the method a callback and get back aWritable.varcall=client.recordRoute(function(error, stats) {if(error) {callback(error);}console.log('Finished trip with', stats.point_count,'points');console.log('Passed', stats.feature_count,'features');console.log('Travelled', stats.distance,'meters');console.log('It took', stats.elapsed_time,'seconds');});functionpointSender(lat, lng) {returnfunction(callback) {console.log('Visiting point '+lat/COORD_FACTOR+', '+lng/COORD_FACTOR);call.write({latitude:lat,longitude:lng});_.delay(callback, _.random(500,1500));};}varpoint_senders=[];for(vari=0; i<num_points; i++) {varrand_point=feature_list[_.random(0, feature_list.length-1)];point_senders[i]=pointSender(rand_point.location.latitude,rand_point.location.longitude);}async.series(point_senders,function() {call.end();});Once we’ve finished writing our client’s requests to the stream usingwrite(),
we need to callend()on the stream to let gRPC know that we’ve finished
writing. If the status isOK, thestatsobject will be populated with the
server’s response.Finally, let’s look at our bidirectional streaming RPCrouteChat(). In this
case, we just pass a context to the method and get back aDuplexstream
object, which we can use to both write and read messages.varcall=client.routeChat();The syntax for reading and writing here is exactly the same as for our
client-streaming and server-streaming methods. Although each side will always
get the other’s messages in the order they were written, both the client and
server can read and write in any order — the streams operate completely
independently.Try it out!Build the client and server:$ npm installRun the server:$ node ./routeguide/dynamic_codegen/route_guide_server.js --db_path=./routeguide/dynamic_codegen/route_guide_db.jsonFrom a different terminal, run the client:$ node ./routeguide/dynamic_codegen/route_guide_client.js --db_path=./routeguide/dynamic_codegen/route_guide_db.jsonLast modified September 13, 2023:fixing url (#1193) (ba9c6d8)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About