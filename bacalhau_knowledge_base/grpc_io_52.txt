URL: https://grpc.io/docs/languages/kotlin/quickstart/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issuePrerequisitesGet the example codeRun the exampleUpdate the gRPC serviceUpdate the appUpdate the serverUpdate the clientRun the updated appWhat’s nextDocsLanguagesKotlinQuick startQuick startThis guide gets you started with gRPC in Kotlin with a simple working example.ContentsPrerequisitesGet the example codeRun the exampleUpdate the gRPC serviceUpdate the appUpdate the serverUpdate the clientRun the updated appWhat’s nextQuick startThis guide gets you started with gRPC in Kotlin with a simple working example.PrerequisitesKotlinversion 1.3 or higherJDKversion 7 or higherGet the example codeThe example code is part of thegrpc-kotlinrepo.Download the repo as a zip fileand unzip it, or clone
the repo:$ git clone --depth1https://github.com/grpc/grpc-kotlinChange to the examples directory:$cdgrpc-kotlin/examplesRun the exampleFrom theexamplesdirectory:Compile the client and server$ ./gradlew installDistRun the server:$ ./server/build/install/server/bin/hello-world-serverServer started, listening on50051From another terminal, run the client:$ ./client/build/install/client/bin/hello-world-clientReceived: Hello worldCongratulations! You’ve just run a client-server app with gRPC.Update the gRPC serviceIn this section, you’ll update the app with an extra server method. The app’s
gRPC service, namedGreeter, is defined usingprotocol buffers. To learn
more about how to define a service in a.protofile, seeBasics tutorial.
For now, all you need to know is that both the server and the client stub have aSayHello()RPC method that takes aHelloRequestparameter from the client
and returns aHelloReplyfrom the server, and that the method is defined like
this:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Openhelloworld/hello_world.protofrom theprotos/src/main/proto/io/grpc/examplesfolder, and add a
newSayHelloAgain()method, with the same request and response types:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}// Sends another greetingrpcSayHelloAgain (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Remember to save the file!Update the appWhen you build the example, the build process regeneratesHelloWorldProtoGrpcKt.kt,
which contains the generated gRPC client and server classes. This also
regenerates classes for populating, serializing, and retrieving our request and
response types.However, you still need to implement and call the new method in the
hand-written parts of the example app.Update the serverOpenhelloworld/HelloWorldServer.ktfrom theserver/src/main/kotlin/io/grpc/examplesfolder. Implement the new
method like this:privateclassHelloWorldService: GreeterGrpcKt.GreeterCoroutineImplBase() {overridesuspendfunsayHello(request: HelloRequest) = helloReply {message ="Hello${request.name}"}overridesuspendfunsayHelloAgain(request: HelloRequest) = helloReply {message ="Hello again${request.name}"}}Update the clientOpenhelloworld/HelloWorldClient.ktfrom theclient/src/main/kotlin/io/grpc/examplesfolder. Call the new
method like this:classHelloWorldClient(privatevalchannel: ManagedChannel) : Closeable {privatevalstub: GreeterCoroutineStub = GreeterCoroutineStub(channel)suspendfungreet(name: String) {valrequest = helloRequest {this.name = name }valresponse = stub.sayHello(request)println("Received:${response.message}")valagainResponse = stub.sayHelloAgain(request)println("Received:${againResponse.message}")}overridefunclose() {channel.shutdown().awaitTermination(5, TimeUnit.SECONDS)}}Run the updated appRun the client and server like you did before. Execute the following commands
from theexamplesdirectory:Compile the client and server:$ ./gradlew installDistRun the server:$ ./server/build/install/server/bin/hello-world-serverServer started, listening on50051From another terminal, run the client. This time, add a name as a
command-line argument:$ ./client/build/install/client/bin/hello-world-client AliceReceived: Hello AliceReceived: Hello again AliceWhat’s nextLearn how gRPC works inIntroduction to gRPCandCore concepts.Work through theBasics tutorial.Explore theAPI reference.Last modified October 5, 2023:Fix typo in Kotlin quickstart (#1205) (cad984c)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About