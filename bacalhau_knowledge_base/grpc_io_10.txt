URL: https://grpc.io/docs/languages/go/quickstart/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issuePrerequisitesGet the example codeRun the exampleUpdate the gRPC serviceRegenerate gRPC codeUpdate and run the applicationUpdate the serverUpdate the clientRun!What’s nextDocsLanguagesGoQuick startQuick startThis guide gets you started with gRPC in Go with a simple working example.ContentsPrerequisitesGet the example codeRun the exampleUpdate the gRPC serviceRegenerate gRPC codeUpdate and run the applicationUpdate the serverUpdate the clientRun!What’s nextQuick startThis guide gets you started with gRPC in Go with a simple working example.PrerequisitesGo, any one of thetwo latest majorreleases of Go.For installation instructions, see Go’sGetting Startedguide.Protocol buffercompiler,protoc,version 3.For installation instructions, seeProtocol Buffer Compiler
Installation.Go pluginsfor the protocol compiler:Install the protocol compiler plugins for Go using the following commands:$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latestUpdate yourPATHso that theprotoccompiler can find the plugins:$exportPATH="$PATH:$(go env GOPATH)/bin"Get the example codeThe example code is part of thegrpc-gorepo.Download the repo as a zip fileand unzip it, or clone
the repo:$ git clone -b v1.66.0 --depth1https://github.com/grpc/grpc-goChange to the quick start example directory:$cdgrpc-go/examples/helloworldRun the exampleFrom theexamples/helloworlddirectory:Compile and execute the server code:$ go run greeter_server/main.goFrom a different terminal, compile and execute the client code to see the
client output:$ go run greeter_client/main.goGreeting: Hello worldCongratulations! You’ve just run a client-server application with gRPC.Update the gRPC serviceIn this section you’ll update the application with an extra server method. The
gRPC service is defined usingprotocol buffers. To learn more about how to
define a service in a.protofile seeBasics tutorial.
For now, all you need to know is that both the
server and the client stub have aSayHello()RPC method that takes aHelloRequestparameter from the client and returns aHelloReplyfrom the
server, and that the method is defined like this:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Openhelloworld/helloworld.protoand add a newSayHelloAgain()method, with
the same request and response types:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}// Sends another greetingrpcSayHelloAgain (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Remember to save the file!Regenerate gRPC codeBefore you can use the new service method, you need to recompile the updated.protofile.While still in theexamples/helloworlddirectory, run the following command:$ protoc --go_out=. --go_opt=paths=source_relative\--go-grpc_out=. --go-grpc_opt=paths=source_relative\helloworld/helloworld.protoThis will regenerate thehelloworld/helloworld.pb.goandhelloworld/helloworld_grpc.pb.gofiles, which contain:Code for populating, serializing, and retrievingHelloRequestandHelloReplymessage types.Generated client and server code.Update and run the applicationYou have regenerated server and client code, but you still need to implement
and call the new method in the human-written parts of the example application.Update the serverOpengreeter_server/main.goand add the following function to it:func(s*server)SayHelloAgain(ctx context.Context, in*pb.HelloRequest) (*pb.HelloReply,error) {return&pb.HelloReply{Message:"Hello again "+in.GetName()},nil}Update the clientOpengreeter_client/main.goto add the following code to the end of themain()function body:r, err = c.SayHelloAgain(ctx,&pb.HelloRequest{Name:*name})iferr!=nil{log.Fatalf("could not greet: %v", err)}log.Printf("Greeting: %s", r.GetMessage())Remember to save your changes.Run!Run the client and server like you did before. Execute the following commands
from theexamples/helloworlddirectory:Run the server:$ go run greeter_server/main.goFrom another terminal, run the client. This time, add a name as a
command-line argument:$ go run greeter_client/main.go --name=AliceYou’ll see the following output:Greeting: Hello AliceGreeting: Hello again AliceWhat’s nextLearn how gRPC works inIntroduction to gRPCandCore concepts.Work through theBasics tutorial.Explore theAPI reference.Last modified August 13, 2024:Add missing version specifications for go install (#1343) (445745e)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About