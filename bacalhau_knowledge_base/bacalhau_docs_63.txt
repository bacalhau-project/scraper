URL: https://docs.bacalhau.org/examples/data-engineering/simple-image-processing

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookSimple Image ProcessingIntroductionIn this example tutorial, we will show you how to use Bacalhau to process images on a Landsat dataset.Bacalhau has the unique capability of operating at a massive scale in a distributed environment. This is made possible because data is naturally sharded across the IPFS network amongst many providers. We can take advantage of this to process images in parallel.Prerequisite​To get started, you need to install the Bacalhau client, see more informationhereRunning a Bacalhau Job​To submit a workload to Bacalhau, we will use thebacalhau docker runcommand. This command allows to pass input data volume with a-i ipfs://CID:pathargument just like Docker, except the left-hand side of the argument is acontent identifier (CID). This results in Bacalhau mounting adata volumeinside the container. By default, Bacalhau mounts the input volume at the path/inputsinside the container.Bacalhau also mounts a data volume to store output data. Thebacalhau docker runcommand creates an output data volume mounted at/outputs. This is a convenient location to store the results of your job.CopyexportJOB_ID=$(bacalhaudockerrun\--wait\--wait-timeout-secs100\--id-only\-isrc=s3://landsat-image-processing/*,dst=/input_images,opt=region=us-east-1\--publisheripfs\--entrypointmogrify\dpokidov/imagemagick:7.1.0-47-ubuntu\---resize100x100-quality100-path/outputs'/input_images/*.jpg')Structure of the command​Let's look closely at the command above:bacalhau docker run: call to Bacalhau-i src=s3://landsat-image-processing/*,dst=/input_images,opt=region=us-east-1: Specifies the input data, which is stored in the S3 storage.--entrypoint mogrify: Overrides the default ENTRYPOINT of the image, indicating that the mogrify utility from the ImageMagick package will be used instead of the default entry.dpokidov/imagemagick:7.1.0-47-ubuntu: The name and the tag of the docker image we are using-- -resize 100x100 -quality 100 -path /outputs '/input_images/*.jpg': These arguments are passed to mogrify and specify operations on the images: resizing to 100x100 pixels, setting quality to 100, and saving the results to the/outputsfolder.When a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on.Declarative job description​The same job can be presented in thedeclarativeformat. In this case, the description will look like this:Copyname:Simple Image Processingtype:batchcount:1tasks:-name:My main taskEngine:type:dockerparams:Image:dpokidov/imagemagick:7.1.0-47-ubuntuEntrypoint:-/bin/bashParameters:--c-magick mogrify -resize 100x100 -quality 100 -path /outputs '/input_images/*.jpg'Publisher:Type:ipfsResultPaths:-Name:outputsPath:/outputsInputSources:-Target:"/input_images"Source:Type:"s3"Params:Bucket:"landsat-image-processing"Key:"*"Region:"us-east-1"The job description should be saved in.yamlformat, e.g.image.yaml, and then run with the command:Copybacalhaujobrunimage.yamlChecking the State of your Jobs​Job status: You can check the status of the job usingbacalhau job list:Copybacalhaujoblist--id-filter${JOB_ID}When it saysCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe:Copybacalhaujobdescribe${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdirresultsbacalhaujobget${JOB_ID}--output-dirresultsDisplay the image​To view the images, open theresults/outputs/folder:Support​If you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousConvert CSV To Parquet Or AvroNextOceanography - Data ConversionLast updated1 month agoOn this pageIntroductionPrerequisite​Running a Bacalhau Job​Declarative job description​Checking the State of your Jobs​Display the image​Support​Was this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.