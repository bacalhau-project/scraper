URL: https://en.wikipedia.org/wiki/Microservices

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Introduction2History3Service granularity4Benefits5Criticism and concernsToggle Criticism and concerns subsection5.1Complexities6Best practices7TechnologiesToggle Technologies subsection7.1Service mesh7.2A comparison of platforms8See also9References10Further readingToggle the table of contentsMicroservices21 languagesবাংলাČeštinaDeutschEestiEspañolEuskaraفارسیFrançais한국어Nederlands日本語Norsk bokmålPolskiPortuguêsРусскийSimple EnglishСрпски / srpskiSuomiУкраїнськаTiếng Việt中文Edit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaCollection of loosely coupled services used to build computer applicationsSome of this article'slisted sourcesmay not bereliable.Please help improve this article by looking for better, more reliable sources. Unreliable citations may be challenged and removed.(October 2018)(Learn how and when to remove this message)This section'stone or style may not reflect theencyclopedic toneused on Wikipedia.Relevant discussion may be found on thetalk page. See Wikipedia'sguide to writing better articlesfor suggestions.(June 2024)(Learn how and when to remove this message)Insoftware engineering, amicroservicearchitecture is anarchitectural patternthat arranges an application as a collection ofloosely coupled,fine-grainedservices, communicating throughlightweight protocols. One of its goals is to enable teams to develop anddeploytheir services independently. This is achieved by reducing severaldependenciesin the codebase, allowing developers to evolve their services with limited restrictions, and hiding additional complexity from users.[1]Consequently, organizations can develop software with rapid growth and scalability, as well as use off-the-shelf services more easily. Communication requirements are reduced. These benefits come with the cost of maintaining decoupling, so a microservice architecture may be suitable only if the application is too complex to manage as amonolith.[2]Interfaces need to be designed carefully and treated as publicAPI. One technique used is having multiple interfaces on the same service or multiple versions of the same service to avoid disrupting existing users of the code.A microservice is analogous tobounded contextindomain-driven design.[3]Introduction[edit]There is no single definition for microservices. A consensus has evolved over time in the industry. Some of the defining characteristics that are frequently cited include:Services in a microservice architecture are oftenprocessesthat communicate over anetworkto fulfill a goal using technology-agnosticprotocolssuch asHTTP.[4][5][6]Services are organized around business capabilities.[7]Services can be implemented using differentprogramming languages,databases, hardware and software environments, depending on what fits best.[8]Services are small in size, messaging-enabled, bounded by contexts, autonomously developed, independently deployable,[9][8]decentralized andbuiltandreleased with automated processes.[9]A microservice is not a layer within a monolithic application (for example, the web controller or the backend-for-frontend).[10]Rather, it is a self-contained piece of business functionality with clear interfaces, and may, through its own internal components, implement a layered architecture. From a strategic perspective, microservice architecture essentially follows theUnix philosophyof "Do one thing and do it well".[11]Martin Fowlerdescribes a microservices-based architecture as having the following properties:[4]Lends itself to acontinuous deliverysoftware development process.[12]A change to a small part of the application only requires rebuilding and redeploying only one or a small number of services.[13]Adheres to principles such asfine-grainedinterfaces(to independently deployable services), business-driven development (e.g.domain-driven design).[14]It is common for microservices architectures to be adopted forcloud-native applications,serverless computing, and applications using lightweightcontainerdeployment. According to Fowler, because of the large number (when compared to monolithic application implementations) of services, decentralized continuous delivery andDevOpswith holistic service monitoring are necessary to effectively develop, maintain, and operate such applications.[15]A consequence of (and rationale for) following this approach is that the individual microservices can be individually scaled. In the monolithic approach, an application supporting three functions would have to be scaled in its entirety even if only one of these functions had a resource constraint.[16]With microservices, only the microservice supporting the function with resource constraints needs to be scaled out, thus providing resource and cost optimization benefits.[17]History[edit]There are numerous claims as to the origin of the term microservices. As early as 2005, Peter Rodgers introduced the term "Micro-Web-Services" during a presentation at the Web Services Edge conference. Against conventional thinking and at the height of theSOAPservice-oriented architecture(SOA) hype curve he argued for "REST-services" and on slide #4 of the conference presentation, he discusses "Software componentsare Micro-Web-Services".[18]He goes on to say "Micro-Services are composed usingUnix-like pipelines(theWebmeets Unix = trueloose-coupling). Services can call services (+multiple language run-times). Complex service assemblies are abstracted behind simpleURIinterfaces. Any service, at any granularity, can be exposed." He described how a well-designed microservices platform "applies the underlying architectural principles of theWeband REST services together with Unix-like scheduling and pipelines to provide radical flexibility and improved simplicity in service-oriented architectures.[18]Rodgers' work originated in 1999 with the Dexter research project atHewlett Packard Labs, whose aim was to make code less brittle and to make large-scale, complex software systemsrobustto change.[19]Ultimately this path of research led to the development ofresource-oriented computing(ROC), a generalized computation abstraction in which REST is a special subset.In 2005Alistair Cockburnwrote abouthexagonal architecturewhich is a software design pattern that is used along with the microservices. This pattern makes the design of the microservice possible since it isolates in layers the business logic from the auxiliary services needed in order to deploy and run the microservice completely independent from others.In 2007, Juval Löwy in his writing[20]and speaking[21][22]called for building systems in which every class was a service. Löwy realized this required the use of a technology that can support such granular use of services, and he extendedWindows Communication Foundation (WCF)to do just that,[23][24]taking every class and treating it as a service while maintaining the conventional programming model of classes.In May 2011, a workshop of software architects held near Venice used the term 'microservice' to describe a common architectural style that many participants had been recently exploring.[25]By May 2012, the same group had decided that 'microservices' was the most appropriate name. James Lewis presented some of those ideas as acase studyin March 2012 at 33rd Degree in Kraków in Microservices - Java, the Unix Way,[26]as did Fred George[27]about the same time. Adrian Cockcroft, former director for the Cloud Systems at Netflix,[28]described this approach as "fine-grained SOA", pioneered the style at web-scale, as did many of the others mentioned in this article - Joe Walnes, Dan North, Evan Bottcher, and Graham Tackley.[29]Microservices is a specialization of an implementation approach for service-oriented architectures used to build flexible, independently deployablesoftware systems.[7]The microservices approach is the first realisation of SOA that followed the introduction ofDevOpsand is becoming more popular for buildingcontinuously deployedsystems.[30]In February 2020, the Cloud Microservices Market Research Report predicted that the global microservice architecture market size will increase at aCAGRof 21.37% from 2019 to 2026 and reach $3.1 billion by 2026.[31]Service granularity[edit]A key step in defining a microservice architecture is figuring out how big an individual microservice has to be. There is no consensus or litmus test for this, as the right answer depends on the business and organizational context.[32]For instance,Amazonuses a service-oriented architecture where service often maps 1:1 with a team of 3 to 10 engineers.[33]To find the right level of service granularity,architectshave tocontinuously iteratetheir component designs withprogrammers. Architects need to take into account user requirements, responsibilities, and architectural characteristics (akanon-functional requirements).[3]In the context of software architecture, services dedicated to a single task, such as calling a specific backend system or performing a particular calculation, are known as atomic services. Services that call atomic services to consolidate an output are referred to as composite services.It is considered bad practice to make the service too small, as then the runtime overhead and the operational complexity can overwhelm the benefits of the approach. When services become too fine-grained, alternative approaches should be considered, such as packaging the function as a library or integrating it into other microservices.[7]Ifdomain-driven designis being employed in modeling the domain for which the system is being built, then a microservice could be as small as an aggregate or as large as a bounded Context.[34]In the granularity of microservices discussion, there is a spectrum. On one end are the Anaemic Services, which do not have a large number of responsibilities, and on the other end are the Modular Monolith, which are large modules of a system.Benefits[edit]The benefit of decomposing an application into different smaller services are numerous:Modularity: This makes the application easier to understand, develop, test, and become more resilient to architecture erosion.[8]This benefit is often argued in comparison to the complexity of monolithic architectures.[35]Scalability: Since microservices are implemented and deployed independently of each other, i.e. they run within independent processes, they can be monitored and scaled independently.[36]Integrationof heterogeneous andlegacy systems: microservices are considered a viable means for modernizing existing monolithic software application.[37][38]There are experience reports of several companies who have successfully replaced parts of their existing software with microservices or are in the process of doing so.[39]The process forsoftware modernizationof legacy applications is done using an incremental approach.[40]Distributed development: it parallelizesdevelopmentby enabling small autonomous teams to develop,deployand scale their respective services independently.[41]It also allows the architecture of an individual service to emerge through continuousrefactoring.[42]Microservice-based architectures facilitatecontinuous integration,continuous deliveryand deployment.[43]Criticism and concerns[edit]The microservices approach is subject to criticism for a number of issues:Services form information barriers.[44]Inter-service calls over a network have a higher cost in terms of network latency and message processing time than in-processcallswithin amonolithicservice process.[4]Testinganddeploymentare more complicated.[45][46]Moving responsibilities between services is more difficult.[8]It may involve communication between different teams, rewriting the functionality in another language or fitting it into a different infrastructure.[4]However, microservices can be deployed independently from the rest of the application, while teams working on monoliths need to synchronize to deploy together.[40]Viewing the size of services as the primary structuring mechanism can lead to too many services when the alternative of internal modularization may lead to a simpler design.[47]This requires understanding the overall architecture of the applications and interdependencies between components.[48]Two-phased commitsare regarded as an anti-pattern in microservices-based architectures, resulting in a tighter coupling of all the participants within the transaction. However, the lack of this technology causes awkward dances which have to be implemented by all the transaction participants in order to maintain data consistency.[49]Development and support of many services are more challenging if they are built with different tools and technologies - this is especially a problem if engineers move between projects frequently.[50]The protocol typically used with microservices (HTTP) was designed for public-facing services, and as such is unsuitable for working internal microservices that often must be impeccably reliable.[51]While not specific to microservices, the decomposition methodology often uses functional decomposition, which does not handle changes in the requirements while still adding the complexity of services.[51]The very concept of microservice is misleading since there are only services. There is no sound definition of when a service starts or stops being a microservice.[51]Data aggregation. In order to have a full view of a working system, it is required to extract data sets from the microservices repositories and aggregate them into a single schema. For example, to be able to create operational reports that are not possible using a single microservice repository.Complexities[edit]The architecture introduces additional complexity and new problems to deal with, such aslatency,message formatdesign,[52]backup/availability/consistency (BAC),[53]load balancingandfault tolerance.[46]All of these problems have to be addressed at scale. The complexity of amonolithic applicationdoes not disappear if it is re-implemented as a set of microservices. Some of the complexity gets translated into operational complexity.[54]Other places where the complexity manifests itself are increased network traffic and resulting in slower performance. Also, an application made up of any number of microservices has a larger number of interface points to access its respectiveecosystem, which increases the architectural complexity.[55]Various organizing principles (such ashypermedia as the engine of application state(HATEOAS), interface and data model documentation captured viaSwagger, etc.) have been applied to reduce the impact of such additional complexity.Best practices[edit]According O'Reilly, each microservice should have its own architectural characteristics (a.k.anon functional requirements), and architects should not to define uniform characteristics for the entiredistributed system.[3]Latencyis often measured through "99th percentile" because median and average latencies can be misleading as they can missoutliers.[56][page needed][57]Technologies[edit]Computer microservices can be implemented in different programming languages and might use different infrastructures. Therefore, the most important technology choices are the way microservices communicate with each other (synchronous, asynchronous, UI integration) and the protocols used for the communication (RESTful HTTP, messaging,GraphQL...). In a traditional system, most technology choices like the programming language impact the whole system. Therefore, the approach to choosing technologies is quite different.[58]TheEclipse Foundationhas published a specification for developing microservices, Eclipse MicroProfile.[59][60]Service mesh[edit]See also:Service meshIn a service mesh, each service instance is paired with an instance of a reverse proxy server, called a service proxy, sidecar proxy, or sidecar. The service instance and sidecar proxy share a container, and the containers are managed by a container orchestration tool such asKubernetes,Nomad,Docker Swarm, orDC/OS. The service proxies are responsible for communication with other service instances and can support capabilities such as service (instance) discovery, load balancing, authentication and authorization, secure communications, and others.In a service mesh, the service instances and their sidecar proxies are said to make up the data plane, which includes not only data management but also request processing and response. The service mesh also includes a control plane for managing the interaction between services, mediated by their sidecar proxies.[citation needed]A comparison of platforms[edit]Implementing a microservice architecture is very difficult. There are many concerns (see table below) that any microservice architecture needs to address.Netflixdeveloped a microservice framework to support their internal applications, and then open-sourced[61]many portions of that framework. Many of these tools have been popularized via theSpring Framework– they have been re-implemented as Spring-based tools under the umbrella of the Spring Cloud[62]project. The table below shows a comparison of an implementing feature from theKubernetesecosystem with an equivalent from the Spring Cloud world.[63]One noteworthy aspect of the Spring Cloud ecosystem is that they are all Java-based technologies, whereas Kubernetes is a polyglot runtime platform.Microservices concernSpring Cloud & Netflix OSSKubernetesConfiguration management:[64]configuration for a microservice application needs to be externalized from the code and be retrievable via a simple service call.Spring Config Server, Netflix Archaius both support a Git-repository—based location for configuration. Archaius supports data typing of configuration.Kubernetes ConfigMaps exposes the configuration stored in etcd via services. Kubernetes Secrets supports the service-based secure deployment and usage of sensitive configuration information (such as passwords, certificates, etc.).Service discovery: maintain a list of service instances that are available for work within a microservice domain.Spring Cloud Eureka allows clients to register to it, maintains a heartbeat with registered clients, and maps service names to hostnames for clients that lookup services by service name.Kubernetes Services provide deployment-time registration of instances of services that are internally available within the cluster. Ingress is a mechanism whereby a service can be exposed to clients outside the cluster.Load balancing: The key to scaling a distributed system is being able to run more than one instance of a component. Load has to be then distributed across those instances via a load balancer.Spring Cloud Ribbon provides the ability for service clients to load balance across instances of the service.Kubernetes Service provides the ability for the service to be load-balanced across service instances. This is not the equivalent of what Ribbon provides.API gateway: The granularity of APIs provided by microservices is often different than what a service client needs. API Gateways implement facades and provide additional services like proxying, and protocol translation, and other management functions.Spring Cloud Zuul provides configuration-based API facadesKubernetes Service and Ingress resources, Istio, Ambassador are solutions that provide both north–south (traffic into and out of data center) as well as east–west (traffic across data centers or clouds or regions) API gateway functions. Zuul can also be implemented along with Kubernetes, providing configuration at individual service level.Security concerns: Many security concerns are pushed to the API gateway implementation. With distributed microservice applications, it makes sense to not reinvent the security wheel and allow for policy definition and implementation in components that are shared by all services.Spring Cloud Security addresses many security concerns through Spring Cloud ZuulThe Kubernetes ecosystem provides service meshes like Istio, which are capable of providing security through their API gateway mechanisms.Centralized logging: It is important to have a centralized log gathering and analysis infrastructure to manage a plethora of services – many of which are operating in a distributed fashion.ELK Stack (Elasticsearch,Logstash,Kibana)EFK Stack (Elasticsearch,Fluentd,Kibana)Centralized metrics: A centralized area where the health and performance of the individual services and overall system can be monitored is essential to proper operations.Spring Spectator & AtlasHeapster, Prometheus, &GrafanaDistributed tracing: Per-process logging and metric monitoring have their place, but neither can reconstruct the complex paths that transactions take as they propagate across a distributed system. Distributed tracing is an essential tool for a microservices platform.Spring Cloud SleuthHawkular,JaegerResilience and fault tolerance: Distributed systems must be capable of auto-routing around failures, and be capable of routing requests to the service instance that will provide an optimum response.Spring Hystrix, Turbine, & RibbonHealth check,service meshes(example: Istio)[65]Autoscaling and self-healing: Distributed systems respond to higher load by scaling horizontally: the platform must detect and auto-respond to such conditions. Furthermore, the system needs to detect failures and attempt auto-restarts without operator input.-Health check, self-healing, and auto-scalingPackaging, deployment, and scheduling: Large-scale systems require robust package management, and deployment systems to manage rolling or blue-green deployments, and rollbacks if necessary. A scheduler helps determine which particular execution node a new set of services can be deployed to based on current conditions.Spring Boot, Apache Maven. The Spring Cloud system does not have a true scheduler.Docker, Rkt, Kubernetes Scheduler & Deployment, Helm[66]Job management: scheduled computations disconnected from any individual user requests.Spring BatchKubernetes Jobs and Scheduled JobsSingleton application: limit a specific service to run as the only instance of that service within the entire system.Spring Cloud ClusterKubernetes PodsSee also[edit]Conway's lawCross-cutting concernData mesh, a domain-oriented data architectureDevOpsFallacies of distributed computingGraphQLgRPCInterface description language(IDL)Representational state transfer(REST)Service-oriented architecture(SOA)MicrofrontendUnix philosophySelf-contained system (software)Serverless computingWeb-oriented architecture(WOA)References[edit]^"Microservice architectures: more than the sum of their parts?".IONOS Digitalguide. 2 March 2020. Retrieved2022-03-29.^Fowler, Martin (2002).Patterns of Enterprise Application Architecture. Addison-Wesley Professional.ISBN978-0321127426.^abcFundamentals of Software Architecture: An Engineering Approach. O'Reilly Media. 2020.ISBN978-1492043454.^abcdMartin Fowler."Microservices".Archivedfrom the original on 14 February 2018.^Newman, Sam (2015-02-20).Building Microservices. O'Reilly Media.ISBN978-1491950357.^Wolff, Eberhard (2016-10-12).Microservices: Flexible Software Architectures. Addison-Wesley.ISBN978-0134602417.^abcPautasso, Cesare (2017). "Microservices in Practice, Part 1: Reality Check and Service Design".IEEE Software.34(1): 91–98.doi:10.1109/MS.2017.24.S2CID5635705.^abcdChen, Lianping (2018).Microservices: Architecting for Continuous Delivery and DevOps.The IEEE International Conference on Software Architecture (ICSA 2018). IEEE.^abNadareishvili, I., Mitra, R., McLarty, M., Amundsen, M., Microservice Architecture: Aligning Principles, Practices, and Culture, O'Reilly 2016^"Backends For Frontends Pattern".Microsoft Azure Cloud Design Patterns. Microsoft.^Lucas Krause.Microservices: Patterns and Applications.ASINB00VJ3NP4A.^Ford, N; Richards, M; Sadalage, P; Dehghani, Z."Software Architecture: The Hard Parts".Thoughtworks. Retrieved2023-01-20.^"CI/CD for microservices architectures", Azure Architecture Center,Microsoft. Retrieved 9 January 2018.^Josuttis, N. (2007). SOA in Practice. Sebastopol, CA, US: O'Reilly.ISBN978-0-596-52955-0.^Martin Fowler(28 August 2014)."Microservice Prerequisites".Archivedfrom the original on Oct 3, 2023.^Richardson, Chris (November 2018).Microservice Patterns. Manning Publications. 1.4.1Scale cubeand microservices.ISBN9781617294549.^Mendonca, Nabor C.; Jamshidi, Pooyan; Garlan, David; Pahl, Claus (2019-10-16). "Developing Self-Adaptive Microservice Systems: Challenges and Directions".IEEE Software.38(2): 70–79.arXiv:1910.07660.doi:10.1109/MS.2019.2955937.S2CID204744007.^abRodgers, Peter (Feb 15, 2005)."Service-Oriented Development on NetKernel- Patterns, Processes & Products to Reduce System Complexity".CloudComputingExpo. SYS-CON Media. Archived fromthe originalon 20 May 2018. Retrieved19 August2015.^Russell, Perry; Rodgers, Peter; Sellman, Royston (2004)."Architecture and Design of an XML Application Platform".HP Technical Reports. p. 62. Retrieved20 August2015.^Löwy, Juval (2007).Programming WCF Services, 1st ed. O’Reilly Media. pp. 543–553.ISBN978-0-596-52699-3.^Juval Löwy"Every Class a WCF Service". (Channel9, ARCast.TV, October 2007).^Juval Löwy"Every Class As a Service" (Microsoft TechEd Conference, May 2009), SOA206. Archived from theoriginalon 2010.^Löwy, Juval (2007).Programming WCF Services, 1st ed. O’Reilly Media. pp. 48–51.ISBN978-0-596-52699-3.^Löwy, Juval (2010).Programming WCF Services, 3rd ed. O’Reilly Media. pp. 74–75.ISBN978-0-596-80548-7.^Dragoni, Nicola; Giallorenzo, Saverio; Lafuente, Alberto Lluch; Mazzara, Manuel; Montesi, Fabrizio; Mustafin, Ruslan; Safina, Larisa (2017). "Microservices: Yesterday, Today, and Tomorrow".Present and Ulterior Software Engineering. pp. 195–216.arXiv:1606.04036.doi:10.1007/978-3-319-67425-4_12.ISBN978-3-319-67424-7.S2CID14612986.^James Lewis."Micro services - Java, the Unix Way".^Fred George (2013-03-20)."MicroService Architecture: A Personal Journey of Discovery".^Farrow, Rik (2012)."Netflix heads into the clouds"(PDF).^James Lewis and Martin Fowler."Microservices".^"Continuous Deployment: Strategies".javacodegeeks.com. 10 December 2014. Retrieved28 December2016.^Research, Verified Market."Cloud Microservices Market 2020 Trends, Market Share, Industry Size, Opportunities, Analysis and Forecast by 2026 – Instant Tech Market News". Retrieved2020-02-18.^O. Zimmermann, Domain-Specific Service Decomposition with Microservice API Patterns, Microservices 2019,https://www.conf-micro.services/2019/slides//keynotes/Zimmerman.pdf^"Amazon SOA mandate". 13 October 2011.^Vaughn, Vernon (2016).Domain-Driven Design Distilled. Addison-Wesley Professional.ISBN978-0-13-443442-1.^Yousif, Mazin (2016). "Microservices".IEEE Cloud Computing.3(5): 4–5.doi:10.1109/MCC.2016.101.^Dragoni, Nicola; Lanese, Ivan; Larsen, Stephan Thordal; Mazzara, Manuel; Mustafin, Ruslan; Safina, Larisa (2017)."Microservices: How to Make Your Application Scale"(PDF).Perspectives of System Informatics. Lecture Notes in Computer Science. Vol. 10742. pp. 95–104.arXiv:1702.07149.Bibcode:2017arXiv170207149D.doi:10.1007/978-3-319-74313-4_8.ISBN978-3-319-74312-7.S2CID1643730.^Newman, Sam (2015).Building Microservices. O'Reilly.ISBN978-1491950357.^Wolff, Eberhard (2016).Microservices: Flexible Software Architecture. Addison Wesley.ISBN978-0134602417.^Knoche, Holger; Hasselbring, Wilhelm (2019)."Drivers and Barriers for Microservice Adoption – A Survey among Professionals in Germany".Enterprise Modelling and Information Systems Architectures.14: 1:1–35–1:1–35.doi:10.18417/emisa.14.1.^abTaibi, Davide; Lenarduzzi, Valentina; Pahl, Claus; Janes, Andrea (2017)."Microservices in agile software development: a workshop-based study into issues, advantages, and disadvantages".Proceedings of the XP2017 Scientific Workshops.doi:10.1145/3120459.3120483.S2CID28134110.^Richardson, Chris."Microservice architecture pattern".microservices.io. Retrieved2017-03-19.^Chen, Lianping; Ali Babar, Muhammad (2014). "Towards an Evidence-Based Understanding of Emergence of Architecture through Continuous Refactoring in Agile Software Development".Proceedings Working IEEE/IFIP Conference on Software Architecture 2014 WICSA 2014.The 11th Working IEEE/IFIP Conference on Software Architecture(WICSA 2014). IEEE.doi:10.1109/WICSA.2014.45.^Balalaie, Armin; Heydarnoori, Abbas; Jamshidi, Pooyan (May 2016)."Microservices Architecture Enables DevOps: Migration to a Cloud-Native Architecture"(PDF).IEEE Software.33(3): 42–52.doi:10.1109/ms.2016.64.hdl:10044/1/40557.ISSN0740-7459.S2CID18802650.^Stenberg, Jan (11 August 2014)."Experiences from Failing with Microservices".^Calandra, Mariano (7 April 2021)."Why unit testing is not enough when it comes to microservices".^ab"Developing Microservices for PaaS with Spring and Cloud Foundry".^Tilkov, Stefan (17 November 2014)."How small should your microservice be?".Innoq. Retrieved4 January2017.^Lanza, Michele; Ducasse, Stéphane (2002)."Understanding Software Evolution using a Combination of Software Visualization and Software Metrics"(PDF).In Proceedings of LMO 2002 (Langages et Modèles à Objets): 135–149. Archived fromthe original(PDF)on Feb 27, 2021.^Richardson, Chris (November 2018). "Chapter 4. Managing transactions with sagas".Microservice Patterns. Manning Publications.ISBN978-1-61729454-9.^Devoxx (Aug 30, 2017)."10 Tips for failing badly at Microservices by David Schmitz".YouTube. Archived fromthe originalon Apr 22, 2021.^abcLöwy, Juval (2019).Righting Software 1st ed. Addison-Wesley Professional. pp. 73–75.ISBN978-0136524038.^Pautasso, Cesare (2017). "Microservices in Practice, Part 2: Service Integration and Sustainability".IEEE Software.34(2): 97–104.doi:10.1109/MS.2017.56.S2CID30256045.^Pautasso, Cesare (2018). "Consistent Disaster Recovery for Microservices: the BAC Theorem".IEEE Cloud Computing.5(1): 49–59.doi:10.1109/MCC.2018.011791714.S2CID4560021.^Fowler, Martin."Microservice Trade-Offs".^"BRASS Building Resource Adaptive Software Systems". U.S. Government. DARPA. April 7, 2015."Access to system components and the interfaces between clients and their applications, however, are mediated via a number of often unrelated mechanisms, including informally documentedapplication programming interfaces(APIs), idiosyncratic foreign function interfaces, complex ill-understood model definitions, orad hocdata formats. These mechanisms usually provide only partial and incomplete understanding of the semantics of the components themselves. In the presence of such complexity, it is not surprising that applications typically bake-in many assumptions about the expected behavior of the ecosystem they interact with".^Vitillo, Roberto (2021).Understanding Distributed Systems: What every developer should know about large distributed applications. Roberto Vitillo.ISBN978-1838430207.^Bhargav, Nikhil (2024-03-18)."What's the P99 Latency?".baeldung.com. Retrieved2024-06-08.The mean and median often mask outliers^Wolff, Eberhard (2018-04-15).Microservices - A Practical Guide. CreateSpace Independent Publishing Platform.ISBN978-1717075901.^Swart, Stephanie (14 December 2016)."Eclipse MicroProfile".projects.eclipse.org.^"MicroProfile".MicroProfile. Retrieved2021-04-11.^Netflix OSS, Git Hub^Cloud, Spring^"Spring Cloud for Microservices Compared to Kubernetes",Developers, Red hat, 2016-12-09^Somashekar, Gagan; Gandhi, Anshul (2021-04-26)."Towards Optimal Configuration of Microservices".Proceedings of the 1st Workshop on Machine Learning and Systems. EuroMLSys '21. Online, United Kingdom: Association for Computing Machinery. pp. 7–14.doi:10.1145/3437984.3458828.^Managing microservices with the Istio service mesh, Kubernetes, May 2017^The Kubernetes Package Manager, HelmFurther reading[edit]Special theme issue on microservices, IEEE Software 35(3), May/June 2018,https://ieeexplore.ieee.org/xpl/tocresult.jsp?isnumber=8354413I. Nadareishvili et al.,Microservices Architecture – Aligning Principles, Practices and Culture, O'Reilly, 2016,ISBN978-1-491-95979-4S. Newman, Building Microservices – Designing Fine-Grained Systems, O'Reilly, 2015ISBN978-1491950357Wijesuriya, Viraj Brian (2016-08-29)Microservice Architecture, Lecture Notes- University of Colombo School of Computing, Sri LankaChristudas Binildas (June 27, 2019). Practical Microservices Architectural Patterns: Event-Based Java Microservices with Spring Boot and Spring Cloud. Apress.ISBN978-1484245002.vteWeb interfacesServer-sideProtocolsHTTPv2v3EncryptionWebDAVCGISCGIFCGIAJPWSRPWebSocketServer APIsC NSAPIC ASAPIC ISAPICOM ASPJakarta ServletcontainerCLI OWINASP.NET HandlerPython WSGIPython ASGIRuby RackJavaScript JSGIPerl PSGIPortletcontainerApache modulesmod_includemod_jkmod_lispmod_monomod_parrotmod_perlmod_phpmod_proxymod_pythonmod_wsgimod_rubyPhusion PassengerTopicsWeb servicevs.Web resourceWOAvs.ROAOpen APIWebhookApplication servercomparisonScriptingClient-sideBrowser APIsC NPAPILiveConnectXPConnectC NPRuntimeC PPAPINaClActiveXBHOXBAPWeb APIsWHATWGAudioCanvasCORSDOMSSEVideoWebSocketsWeb messagingWeb storageWeb workerXMLHttpRequestW3CDOM eventsEMEFileGeolocationIndexedDBMSESVGWebAssemblyWebAuthnWebGPUWebRTCWebXRKhronosWebCLWebGLOthersGearsGraphQLWeb SQL Database(formerly W3C)WebUSBTopicsAjaxandRemote scriptingvs.DHTMLBrowser extensionMashupWeb IDLScriptingTopicsMicroservicesWeb pageStaticDynamicWeb standardsRESTWeb API securityWeb applicationRichSingle-pageProgressiveWeb frameworkRetrieved from "https://en.wikipedia.org/w/index.php?title=Microservices&oldid=1241445833"Categories:Architectural pattern (computer science)Service-oriented (business computing)Hidden categories:Articles with short descriptionShort description is different from WikidataArticles lacking reliable references from October 2018All articles lacking reliable referencesWikipedia articles with style issues from June 2024All articles with style issuesWikipedia articles needing page number citations from June 2024All articles with unsourced statementsArticles with unsourced statements from July 2022This page was last edited on 21 August 2024, at 06:27(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view