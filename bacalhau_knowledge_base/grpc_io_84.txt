URL: https://grpc.io/docs/platforms/android/java/basics/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueWhy use gRPC?Example code and setupDefining the serviceGenerating client codeCreating the clientCreating a stubCalling service methodsSimple RPCServer-side streaming RPCClient-side streaming RPCBidirectional streaming RPCTry it out!DocsPlatformsAndroidJavaBasics tutorialBasics tutorialA basic tutorial introduction to gRPC in Android Java.ContentsWhy use gRPC?Example code and setupDefining the serviceGenerating client codeCreating the clientCreating a stubCalling service methodsSimple RPCServer-side streaming RPCClient-side streaming RPCBidirectional streaming RPCTry it out!Basics tutorialA basic tutorial introduction to gRPC in Android Java.This tutorial provides a basic Android Java programmer’s introduction to working with gRPC.By walking through this example you’ll learn how to:Define a service in a .proto file.Generate client code using the protocol buffer compiler.Use the Java gRPC API to write a simple mobile client for your service.It assumes that you have read theIntroduction to gRPCand are familiar withprotocol buffers.
This guide also does not cover anything on the server side. You can check theJava pagesfor more information.Why use gRPC?Our example is a simple route mapping application that lets clients get
information about features on their route, create a summary of their route, and
exchange route information such as traffic updates with the server and other
clients.With gRPC we can define our service once in a.protofile and generate clients
and servers in any of gRPC’s supported languages, which in turn can be run in
environments ranging from servers inside a large data center to your own tablet —
all the complexity of communication between different languages and environments is
handled for you by gRPC. We also get all the advantages of working with protocol
buffers, including efficient serialization, a simple IDL, and easy interface
updating.Example code and setupThe example code for our tutorial is ingrpc-java’s examples/android. To download the example, clone thegrpc-javarepository by running the following command:$ git clone -b v1.66.0 https://github.com/grpc/grpc-java.gitThen change your current directory togrpc-java/examples/android:$cdgrpc-java/examples/androidYou also should have the relevant tools installed to generate the client
interface code - if you don’t already, follow the setup instructions in thegrpc-java README.Defining the serviceOur first step (as you’ll know from theIntroduction to gRPC) is to define the gRPCserviceand the methodrequestandresponsetypes usingprotocol buffers. You can see the complete .proto file inrouteguide/app/src/main/proto/route_guide.proto.As we’re generating Java code in this example, we’ve specified ajava_packagefile option in our .proto:optionjava_package="io.grpc.examples";This specifies the package we want to use for our generated Java classes. If no explicitjava_packageoption is given in the .proto file, then by default the proto package (specified using the “package” keyword) will be used. However, proto packages generally do not make good Java packages since proto packages are not expected to start with reverse domain names. If we generate code in another language from this .proto, thejava_packageoption has no effect.To define a service, we specify a namedservicein the .proto file:serviceRouteGuide {...}Then we definerpcmethods inside our service definition, specifying their request and response types. gRPC lets you define four kinds of service method, all of which are used in theRouteGuideservice:Asimple RPCwhere the client sends a request to the server using the stub
and waits for a response to come back, just like a normal function call.// Obtains the feature at a given position.rpcGetFeature(Point)returns(Feature) {}Aserver-side streaming RPCwhere the client sends a request to the server
and gets a stream to read a sequence of messages back. The client reads from
the returned stream until there are no more messages. As you can see in our
example, you specify a server-side streaming method by placing thestreamkeyword before theresponsetype.// Obtains the Features available within the given Rectangle.  Results are// streamed rather than returned at once (e.g. in a response message with a// repeated field), as the rectangle may cover a large area and contain a// huge number of features.rpcListFeatures(Rectangle)returns(stream Feature) {}Aclient-side streaming RPCwhere the client writes a sequence of messages
and sends them to the server, again using a provided stream. Once the client
has finished writing the messages, it waits for the server to read them all
and return its response. You specify a client-side streaming method by placing
thestreamkeyword before therequesttype.// Accepts a stream of Points on a route being traversed, returning a// RouteSummary when traversal is completed.rpcRecordRoute(stream Point)returns(RouteSummary) {}Abidirectional streaming RPCwhere both sides send a sequence of messages
using a read-write stream. The two streams operate independently, so clients
and servers can read and write in whatever order they like: for example, the
server could wait to receive all the client messages before writing its
responses, or it could alternately read a message then write a message, or
some other combination of reads and writes. The order of messages in each
stream is preserved. You specify this type of method by placing thestreamkeyword before both the request and the response.// Accepts a stream of RouteNotes sent while a route is being traversed,// while receiving other RouteNotes (e.g. from other users).rpcRouteChat(stream RouteNote)returns(stream RouteNote) {}Our.protofile also contains protocol buffer message type definitions for all
the request and response types used in our service methods - for example, here’s
thePointmessage type:// Points are represented as latitude-longitude pairs in the E7 representation// (degrees multiplied by 10**7 and rounded to the nearest integer).// Latitudes should be in the range +/- 90 degrees and longitude should be in// the range +/- 180 degrees (inclusive).messagePoint{int32latitude=1;int32longitude=2;}Generating client codeNext we need to generate the gRPC client interfaces from our .proto
service definition. We do this using the protocol buffer compilerprotocwith
a special gRPC Java plugin. You need to use theproto3compiler (which supports
both proto2 and proto3 syntax) in order to generate gRPC services.The build system for this example is also part of the Java-gRPC build. Refer to
thegrpc-java READMEandbuild.gradlefor how to generate code from your
own.protofiles. Note that for Android, we will use protobuf lite which is
optimized for mobile usecase.The following classes are generated from our service definition:Feature.java,Point.java,Rectangle.java, and others which contain
all the protocol buffer code to populate, serialize, and retrieve our request
and response message types.RouteGuideGrpc.javawhich contains (along with some other useful code):a base class forRouteGuideservers to implement,RouteGuideGrpc.RouteGuideImplBase, with all the methods defined in theRouteGuideservice.stubclasses that clients can use to talk to aRouteGuideserver.Creating the clientIn this section, we’ll look at creating a Java client for ourRouteGuideservice. You can see our complete example client code inrouteguide/app/src/main/java/io/grpc/routeguideexample/RouteGuideActivity.java.Creating a stubTo call service methods, we first need to create astub, or rather, two stubs:ablocking/synchronousstub: this means that the RPC call waits for the server to respond, and will either return a response or raise an exception.anon-blocking/asynchronousstub that makes non-blocking calls to the server, where the response is returned asynchronously. You can make certain types of streaming call only using the asynchronous stub.First we need to create a gRPCchannelfor our stub, specifying the server address and port we want to connect to:
We use aManagedChannelBuilderto create the channel.mChannel=ManagedChannelBuilder.forAddress(host,port).usePlaintext(true).build();Now we can use the channel to create our stubs using thenewStubandnewBlockingStubmethods provided in theRouteGuideGrpcclass we generated from our .proto.blockingStub=RouteGuideGrpc.newBlockingStub(mChannel);asyncStub=RouteGuideGrpc.newStub(mChannel);Calling service methodsNow let’s look at how we call our service methods.Simple RPCCalling the simple RPCGetFeatureon the blocking stub is as straightforward as calling a local method.Point request=Point.newBuilder().setLatitude(lat).setLongitude(lon).build();Feature feature=blockingStub.getFeature(request);We create and populate a request protocol buffer object (in our casePoint), pass it to thegetFeature()method on our blocking stub, and get back aFeature.Server-side streaming RPCNext, let’s look at a server-side streaming call toListFeatures, which returns a stream of geographicalFeatures:Rectangle request=Rectangle.newBuilder().setLo(Point.newBuilder().setLatitude(lowLat).setLongitude(lowLon).build()).setHi(Point.newBuilder().setLatitude(hiLat).setLongitude(hiLon).build()).build();Iterator<Feature>features=blockingStub.listFeatures(request);As you can see, it’s very similar to the simple RPC we just looked at, except instead of returning a singleFeature, the method returns anIteratorthat the client can use to read all the returnedFeatures.Client-side streaming RPCNow for something a little more complicated: the client-side streaming methodRecordRoute, where we send a stream ofPoints to the server and get back a singleRouteSummary. For this method we need to use the asynchronous stub. If you’ve already readCreating the serversome of this may look very familiar - asynchronous streaming RPCs are implemented in a similar way on both sides.privateStringrecordRoute(List<Point>points,intnumPoints,RouteGuideStub asyncStub)throwsInterruptedException,RuntimeException{finalStringBuffer logs=newStringBuffer();appendLogs(logs,"*** RecordRoute");finalCountDownLatch finishLatch=newCountDownLatch(1);StreamObserver<RouteSummary>responseObserver=newStreamObserver<RouteSummary>(){@OverridepublicvoidonNext(RouteSummary summary){appendLogs(logs,"Finished trip with {0} points. Passed {1} features. "+"Travelled {2} meters. It took {3} seconds.",summary.getPointCount(),summary.getFeatureCount(),summary.getDistance(),summary.getElapsedTime());}@OverridepublicvoidonError(Throwable t){failed=t;finishLatch.countDown();}@OverridepublicvoidonCompleted(){appendLogs(logs,"Finished RecordRoute");finishLatch.countDown();}};StreamObserver<Point>requestObserver=asyncStub.recordRoute(responseObserver);try{// Send numPoints points randomly selected from the points list.Random rand=newRandom();for(inti=0;i<numPoints;++i){intindex=rand.nextInt(points.size());Point point=points.get(index);appendLogs(logs,"Visiting point {0}, {1}",RouteGuideUtil.getLatitude(point),RouteGuideUtil.getLongitude(point));requestObserver.onNext(point);// Sleep for a bit before sending the next one.Thread.sleep(rand.nextInt(1000)+500);if(finishLatch.getCount()==0){// RPC completed or errored before we finished sending.// Sending further requests won't error, but they will just be thrown away.break;}}}catch(RuntimeException e){// Cancel RPCrequestObserver.onError(e);throwe;}// Mark the end of requestsrequestObserver.onCompleted();// Receiving happens asynchronouslyif(!finishLatch.await(1,TimeUnit.MINUTES)){thrownewRuntimeException("Could not finish rpc within 1 minute, the server is likely down");}if(failed!=null){thrownewRuntimeException(failed);}returnlogs.toString();}As you can see, to call this method we need to create aStreamObserver, which implements a special interface for the server to call with itsRouteSummaryresponse. In ourStreamObserverwe:Override theonNext()method to print out the returned information when the server writes aRouteSummaryto the message stream.Override theonCompleted()method (called when theserverhas completed the call on its side) to set aSettableFuturethat we can check to see if the server has finished writing.We then pass theStreamObserverto the asynchronous stub’srecordRoute()method and get back our ownStreamObserverrequest observer to write ourPoints to send to the server. Once we’ve finished writing points, we use the request observer’sonCompleted()method to tell gRPC that we’ve finished writing on the client side. Once we’re done, we check ourSettableFutureto check that the server has completed on its side.Bidirectional streaming RPCFinally, let’s look at our bidirectional streaming RPCRouteChat().privateStringrouteChat(RouteGuideStub asyncStub)throwsInterruptedException,RuntimeException{finalStringBuffer logs=newStringBuffer();appendLogs(logs,"*** RouteChat");finalCountDownLatch finishLatch=newCountDownLatch(1);StreamObserver<RouteNote>requestObserver=asyncStub.routeChat(newStreamObserver<RouteNote>(){@OverridepublicvoidonNext(RouteNote note){appendLogs(logs,"Got message \"{0}\" at {1}, {2}",note.getMessage(),note.getLocation().getLatitude(),note.getLocation().getLongitude());}@OverridepublicvoidonError(Throwable t){failed=t;finishLatch.countDown();}@OverridepublicvoidonCompleted(){appendLogs(logs,"Finished RouteChat");finishLatch.countDown();}});try{RouteNote[]requests={newNote("First message",0,0),newNote("Second message",0,1),newNote("Third message",1,0),newNote("Fourth message",1,1)};for(RouteNote request:requests){appendLogs(logs,"Sending message \"{0}\" at {1}, {2}",request.getMessage(),request.getLocation().getLatitude(),request.getLocation().getLongitude());requestObserver.onNext(request);}}catch(RuntimeException e){// Cancel RPCrequestObserver.onError(e);throwe;}// Mark the end of requestsrequestObserver.onCompleted();// Receiving happens asynchronouslyif(!finishLatch.await(1,TimeUnit.MINUTES)){thrownewRuntimeException("Could not finish rpc within 1 minute, the server is likely down");}if(failed!=null){thrownewRuntimeException(failed);}returnlogs.toString();}As with our client-side streaming example, we both get and return aStreamObserverresponse observer, except this time we send values via our method’s response observer while the server is still writing messages totheirmessage stream. The syntax for reading and writing here is exactly the same as for our client-streaming method. Although each side will always get the other’s messages in the order they were written, both the client and server can read and write in any order — the streams operate completely independently.Try it out!Follow the instructions in theexample directory READMEto build and run the
client and server.Last modified February 16, 2023:Update Protocol Buffers documentation URL (#1092) (852a744)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About