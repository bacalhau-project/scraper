URL: https://en.wikipedia.org/wiki/Remote_procedure_call

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1History and origins2Message passingToggle Message passing subsection2.1Sequence of events3Standard contact mechanisms4AnaloguesToggle Analogues subsection4.1Language-specific4.2Application-specific4.3General5See also6References7External linksToggle the table of contentsRemote procedure call26 languagesالعربيةCatalàČeštinaDanskDeutschEspañolEsperantoفارسیFrançais한국어ItalianoעבריתLatviešuMagyarBahasa MelayuNederlands日本語Norsk bokmålPolskiPortuguêsРусскийSuomiTürkçeУкраїнськаYorùbá中文Edit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaMechanism to allow software to execute a remote procedureIndistributed computing, aremote procedure call(RPC) is when acomputer programcauses aprocedure(subroutine) to execute in a differentaddress space(commonly on another computer on a sharedcomputer network), which is written as if it were a normal (local) procedure call, without theprogrammerexplicitly writing the details for the remote interaction. That is, the programmer writes essentially the same code whether the subroutine is local to the executing program, or remote. This is a form ofclient–server interaction(caller isclient, executor isserver), typically implemented via arequest–responsemessage passingsystem. In theobject-oriented programmingparadigm, RPCs are represented by remote method invocation (RMI). The RPC model implies a level of location transparency, namely that calling procedures are largely the same whether they are local or remote, but usually, they are not identical, so local calls can be distinguished from remote calls. Remote calls are usually orders of magnitude slower and less reliable than local calls, so distinguishing them is important.RPCs are a form ofinter-process communication(IPC), in that different processes have different address spaces: if on the same host machine, they have distinct virtual address spaces, even though the physical address space is the same; while if they are on different hosts, the physical address space is different. Many different (often incompatible) technologies have been used to implement the concept.History and origins[edit]Request–response protocols date to early distributed computing in the late 1960s, theoretical proposals of remote procedure calls as the model of network operations date to the 1970s, and practical implementations date to the early 1980s.Bruce Jay Nelsonis generally credited with coining the term "remote procedure call" in 1981.[1]Remote procedure calls used in modern operating systems trace their roots back to the RC 4000 multiprogramming system,[2]which used a request-response communication protocol for process synchronization.[3]The idea of treating network operations as remote procedure calls goes back at least to the 1970s in earlyARPANETdocuments.[4]In 1978,Per Brinch Hansenproposed Distributed Processes, a language for distributed computing based on "external requests" consisting of procedure calls between processes.[5]One of the earliest practical implementations was in 1982 byBrian Randelland colleagues for theirNewcastle Connectionbetween UNIX machines.[6]This was soon followed by "Lupine" by Andrew Birrell and Bruce Nelson in theCedarenvironment atXerox PARC.[7][8][9]Lupine automatically generated stubs, providing type-safe bindings, and used an efficient protocol for communication.[8]One of the first business uses of RPC was byXeroxunder the name "Courier" in 1981. The first popular implementation of RPC on Unix was Sun's RPC (now called ONC RPC), used as the basis for Network File System (NFS).In the 1990s, with the popularity ofobject-oriented programming, an alternative model of remote method invocation (RMI) was widely implemented, such as in Common Object Request Broker Architecture (CORBA, 1991) and Java remote method invocation. RMIs, in turn, fell in popularity with the rise of the internet, particularly in the 2000s.Message passing[edit]RPC is a request–response protocol. An RPC is initiated by theclient, which sends a request message to a known remoteserverto execute a specified procedure with supplied parameters. The remote server sends a response to the client, and the application continues its process. While the server is processing the call, the client is blocked (it waits until the server has finished processing before resuming execution), unless the client sends an asynchronous request to the server, such as an XMLHttpRequest. There are many variations and subtleties in various implementations, resulting in a variety of different (incompatible) RPC protocols.An important difference between remote procedure calls and local calls is that remote calls can fail because of unpredictable network problems. Also, callers generally must deal with such failures without knowing whether the remote procedure was actually invoked. Idempotent procedures (those that have no additional effects if called more than once) are easily handled, but enough difficulties remain that code to call remote procedures is often confined to carefully written low-level subsystems.Sequence of events[edit]The client calls the client stub. The call is a local procedure call, with parameters pushed on to the stack in the normal way.The client stub packs the parameters into a message and makes a system call to send the message. Packing the parameters is called marshalling.The client's local operating system sends the message from the client machine to the server machine.The local operating system on the server machine passes the incoming packets to the server stub.The server stub unpacks the parameters from the message. Unpacking the parameters is called unmarshalling.Finally, the server stub calls the server procedure. The reply traces the same steps in the reverse direction.Standard contact mechanisms[edit]To let different clients access servers, a number of standardized RPC systems have been created. Most of these use aninterface description language(IDL) to let various platforms call the RPC. The IDL files can then be used to generate code to interface between the client and servers.Analogues[edit]This sectionneeds additional citations forverification.Please helpimprove this articlebyadding citations to reliable sourcesin this section. Unsourced material may be challenged and removed.(December 2013)(Learn how and when to remove this message)Notable RPC implementations and analogues include:Language-specific[edit]Java's Java Remote Method Invocation (Java RMI) API provides similar functionality to standard Unix RPC methods.Goprovides package rpc for implementing RPC, with support for asynchronous calls.Modula-3's network objects, which were the basis for Java's RMI[10]RPyC implements RPC mechanisms inPython, with support for asynchronous calls.Distributed Ruby (DRb) allows Ruby programs to communicate with each other on the same machine or over a network. DRb uses remote method invocation (RMI) to pass commands and data between processes.Erlang is process oriented and natively supports distribution and RPCs via message passing between nodes and local processes alike.Elixir builds on top of the Erlang VM and allows process communication (Elixir/Erlang processes, not OS processes) of the same network out-of-the-box via Agents and message passing.Google's Rust RPC framework Tarpc lets developers define the structure of messages using Rust's structs and traits, rather than using protobuf.[11]Application-specific[edit]Action Message Format (AMF) allows Adobe Flex applications to communicate with back-ends or other applications that support AMF.Remote Function Call is the standard SAP interface for communication between SAP systems. RFC calls a function to be executed in a remote system.General[edit]NFS(Network File System) is one of the most prominent users of RPCOpen Network Computing RPC, by Sun Microsystems (also known as Sun RPC)D-Bus open source IPC program provides similar function to CORBA.SORCER provides the API and exertion-oriented language (EOL) for a federated method invocationXML-RPCis an RPC protocol that uses XML to encode its calls andHTTPas a transport mechanism.JSON-RPCis an RPC protocol that uses JSON-encoded messages.JSON-WSPis an RPC protocol that is inspired from JSON-RPC.SOAPis a successor of XML-RPC and also uses XML to encode its HTTP-based calls.ZeroC'sInternet Communications Engine(Ice) distributed computing platform.Etchframework for building network services.Apache Thrift protocol and framework.CORBAprovides remote procedure invocation through an intermediate layer called theobject request broker.Libeventprovides a framework for creating RPC servers and clients.[12]Windows Communication Foundation is an application programming interface in the .NET framework for building connected, service-oriented applications.Microsoft .NET Remoting offers RPC facilities for distributed systems implemented on the Windows platform. It has been superseded byWCF.The Microsoft DCOM uses MSRPC which is based onDCE/RPCThe Open Software Foundation DCE/RPC Distributed Computing Environment (also implemented by Microsoft).Google Protocol Buffers (protobufs)package includes an interface definition language used for its RPC protocols[13]open sourced in 2015 as gRPC.[14]WAMPcombines RPC and Publish-Subscribe into a single, transport-agnostic protocol.Google Web Toolkit uses an asynchronous RPC to communicate to the server service.[15]Apache Avro provides RPC where client and server exchange schemas in the connection handshake and code generation is not required.See also[edit]9PMicrosoft RPCLocal Inter-Process CommunicationHTTPODBCRemote evaluationExternal Data Representation(serialization format used by e.g. NFS)Network Data Representation(serialization format used by e.g. Microsoft RPC)Resource-oriented architectureDistributed object middlewareFragmented objectgRPCReferences[edit]^Bruce Jay Nelson(May 1981).Remote Procedure Call(PhD thesis). Xerox Palo Alto Research Center. PARC CSL-81-9 (Also CMU-CS-81-119).^"Per Brinch Hansen • IEEE Computer Society".www.computer.org. Retrieved2015-12-15.^Brinch Hansen, Per (1969).RC 4000 Computer Software: Multiprogramming System(PDF). Copenhagen, Denmark: Regnecentralen.^James E. White (December 23, 1975)."A High-Level Framework for Network-Based Resource Sharing".RFC 707.Augmentation Research Center.doi:10.17487/RFC0707. RetrievedJuly 11,2011.^Brinch Hansen, Per (November 1978)."Distributed processes: a concurrent programming concept"(PDF).Communications of the ACM.21(11): 934–941.CiteSeerX10.1.1.107.3108.doi:10.1145/359642.359651.S2CID11610744.^Brownbridge, David R.; Marshall, Lindsay F.;Randell, Brian(1982)."The Newcastle Connection"(PDF).Software: Practice and Experience.12(12): 1147–1162.doi:10.1002/spe.4380121206.S2CID1840438. Archived fromthe original(PDF)on 2016-08-16. Retrieved2016-08-16.^Birrell, Andrew D.; Nelson, Bruce Jay (1984)."Implementing remote procedure calls"(PDF).ACM Transactions on Computer Systems.2: 39–59.doi:10.1145/2080.357392.S2CID11525846.^ab"1994 – Andrew Birrell, Bruce Nelson: Remote Procedure Call".Software System Award citation.Association for Computing Machinery. Archived fromthe originalon April 2, 2012. RetrievedJuly 11,2011.^"SIGOPS Hall of Fame Award".Special Interest Group on Operating Systems.Association for Computing Machinery. RetrievedJuly 11,2011.^The A-Z of Programming Languages: Modula-3 - a-z of programming languagesArchived2009-01-05 at theWayback Machine. Computerworld. Retrieved on 2013-07-17.^tarpc, Google, 2023-11-02, retrieved2023-11-02^libevent: Main Page. Monkey.org. Retrieved on 2013-07-17.^"Protocol Buffers - Google's data interchange format".Google project website. RetrievedNovember 1,2011.^"gRPC open-source universal RPC framework".Google project website. RetrievedSeptember 7,2016.^"Google Web Toolkit".Google project website. RetrievedNovember 1,2011.External links[edit]RFC5531- Specifies version 2 of ONC RPC (fourth published RFC version)RFC1831- Specifies version 2 of ONC RPC (third published RFC version)RFC1057- Specifies version 2 of ONC RPC (second published RFC version)RFC1050- Specifies version 2 of ONC RPC (first published RFC version)Remote Procedure Calls (RPC)— A tutorial on ONC RPC by Dr Dave Marshall of Cardiff UniversityIntroduction to RPC Programming— A developer's introduction to RPC and XDR, from SGI IRIX documentation.Retrieved from "https://en.wikipedia.org/w/index.php?title=Remote_procedure_call&oldid=1242972591"Categories:Remote procedure callInter-process communicationMiddlewareDistributed computingHidden categories:Webarchive template wayback linksArticles with short descriptionShort description matches WikidataArticles needing additional references from December 2013All articles needing additional referencesThis page was last edited on 29 August 2024, at 19:31(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view