URL: https://grpc.io/docs/languages/python/quickstart/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issuePrerequisitesgRPCgRPC toolsDownload the exampleRun a gRPC applicationUpdate the gRPC serviceGenerate gRPC codeUpdate and run the applicationUpdate the serverUpdate the clientRun!What’s nextDocsLanguagesPythonQuick startQuick startThis guide gets you started with gRPC in Python with a simple working example.ContentsPrerequisitesgRPCgRPC toolsDownload the exampleRun a gRPC applicationUpdate the gRPC serviceGenerate gRPC codeUpdate and run the applicationUpdate the serverUpdate the clientRun!What’s nextQuick startThis guide gets you started with gRPC in Python with a simple working example.PrerequisitesPython 3.7 or higherpipversion 9.0.1 or higherIf necessary, upgrade your version ofpip:$ python -m pip install --upgrade pipIf you cannot upgradepipdue to a system-owned installation, you can
run the example in a virtualenv:$ python -m pip install virtualenv$ virtualenv venv$sourcevenv/bin/activate$ python -m pip install --upgrade pipgRPCInstall gRPC:$ python -m pip install grpcioOr, to install it system wide:$ sudo python -m pip install grpciogRPC toolsPython’s gRPC tools include the protocol buffer compilerprotocand the
special plugin for generating server and client code from.protoservice
definitions. For the first part of our quick-start example, we’ve already
generated the server and client stubs fromhelloworld.proto,
but you’ll need the tools for the rest of our quick start, as well as later
tutorials and your own projects.To install gRPC tools, run:$ python -m pip install grpcio-toolsDownload the exampleYou’ll need a local copy of the example code to work through this quick start.
Download the example code from our GitHub repository (the following command
clones the entire repository, but you just need the examples for this quick start
and other tutorials):# Clone the repository to get the example code:$ git clone -b v1.66.0 --depth1--shallow-submodules https://github.com/grpc/grpc# Navigate to the "hello, world" Python example:$cdgrpc/examples/python/helloworldRun a gRPC applicationFrom theexamples/python/helloworlddirectory:Run the server:$ python greeter_server.pyFrom another terminal, run the client:$ python greeter_client.pyCongratulations! You’ve just run a client-server application with gRPC.Update the gRPC serviceNow let’s look at how to update the application with an extra method on the
server for the client to call. Our gRPC service is defined using protocol
buffers; you can find out lots more about how to define a service in a.protofile inIntroduction to gRPCandBasics tutorial. For now all you need
to know is that both the server and the client “stub” have aSayHelloRPC
method that takes aHelloRequestparameter from the client and returns aHelloReplyfrom the server, and that this method is defined like this:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Let’s update this so that theGreeterservice has two methods. Editexamples/protos/helloworld.protoand update it with a newSayHelloAgainmethod, with the same request and response types:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}// Sends another greetingrpcSayHelloAgain (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Remember to save the file!Generate gRPC codeNext we need to update the gRPC code used by our application to use the new
service definition.From theexamples/python/helloworlddirectory, run:$ python -m grpc_tools.protoc -I../../protos --python_out=. --pyi_out=. --grpc_python_out=. ../../protos/helloworld.protoThis regenerateshelloworld_pb2.pywhich contains our generated request and
response classes andhelloworld_pb2_grpc.pywhich contains our generated
client and server classes.Update and run the applicationWe now have new generated server and client code, but we still need to implement
and call the new method in the human-written parts of our example application.Update the serverIn the same directory, opengreeter_server.py. Implement the new method like
this:classGreeter(helloworld_pb2_grpc.GreeterServicer):defSayHello(self, request, context):returnhelloworld_pb2.HelloReply(message=f"Hello,{request.name}!")defSayHelloAgain(self, request, context):returnhelloworld_pb2.HelloReply(message=f"Hello again,{request.name}!")...Update the clientIn the same directory, opengreeter_client.py. Call the new method like this:defrun():withgrpc.insecure_channel('localhost:50051')aschannel:stub=helloworld_pb2_grpc.GreeterStub(channel)response=stub.SayHello(helloworld_pb2.HelloRequest(name='you'))print("Greeter client received: "+response.message)response=stub.SayHelloAgain(helloworld_pb2.HelloRequest(name='you'))print("Greeter client received: "+response.message)Run!Just like we did before, from theexamples/python/helloworlddirectory:Run the server:$ python greeter_server.pyFrom another terminal, run the client:$ python greeter_client.pyWhat’s nextLearn how gRPC works inIntroduction to gRPCandCore concepts.Work through theBasics tutorial.Explore theAPI reference.Last modified September 7, 2023:Format python snippets (#1187) (e76a103)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About