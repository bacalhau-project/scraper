URL: https://grpc.io/docs/platforms/android/kotlin/quickstart/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issuePrerequisitesGet the example codeRun the exampleUpdate the gRPC serviceUpdate the appUpdate the serverUpdate the clientRun the updated appWhat’s nextDocsPlatformsAndroidKotlinQuick startQuick startThis guide gets you started with Kotlin gRPC on Android with a simple working example.ContentsPrerequisitesGet the example codeRun the exampleUpdate the gRPC serviceUpdate the appUpdate the serverUpdate the clientRun the updated appWhat’s nextQuick startThis guide gets you started with Kotlin gRPC on Android with a simple working example.PrerequisitesKotlinversion 1.3 or higherJDKversion 7 or higherAndroid SDK, API level 16 or higherInstallAndroid Studioor the Androidcommand-line tools.Let other tools and scripts know where to find your Android SDK by setting
the following environment variable:$exportANDROID_SDK_ROOT="<path-to-your-android-sdk>"An android device set up forUSB debuggingor anAndroid Virtual DeviceNotegRPC Kotlin does not support running a server on an Android device. For this
quick start, the Android client app will connect to a server running on your
local (non-Android) computer.Get the example codeThe example code is part of thegrpc-kotlinrepo.Download the repo as a zip fileand unzip it, or clone
the repo:$ git clone https://github.com/grpc/grpc-kotlinChange to the examples directory:$cdgrpc-kotlin/examplesRun the exampleCompile the server:$ ./gradlew installDistRun the server:$ ./server/build/install/server/bin/hello-world-serverServer started, listening on50051From another terminal, build the client and install it on your device:$ ./gradlew :android:installDebugLaunch the client app from your device.Type “Alice” in theNamebox and clickSend. You’ll see the
following response:Hello AliceCongratulations! You’ve just run a client-server application with gRPC.Update the gRPC serviceIn this section you’ll update the application by adding an extra server method.
The gRPC service is defined usingprotocol buffers. To learn more about
how to define a service in a.protofile seeBasics tutorial. For now, all
you need to know is that both the server and the client stub have aSayHello()RPC method that takes aHelloRequestparameter from the client and returns aHelloReplyfrom the server, and that the method is defined like this:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Openhelloworld/hello_world.protofrom theprotos/src/main/proto/io/grpc/examplesfolder, and add a
newSayHelloAgain()method, with the same request and response types:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}// Sends another greetingrpcSayHelloAgain (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Remember to save the file!Update the appWhen you build the example, the build process regeneratesHelloWorldProtoGrpcKt.kt,
which contains the generated gRPC client and server classes. This also
regenerates classes for populating, serializing, and retrieving our request and
response types.However, you still need to implement and call the new method in the
hand-written parts of the example app.Update the serverFollow the instructions given inUpdate the
serverof the Kotlin
quick start page.Update the clientFollow these steps:Openhelloworld/MainActivity.ktfrom theclient/src/main/kotlin/io/grpc/examplesfolder.Locate the function containing the call tosayHello(). You’ll see these
lines of code:valresponse = greeter.sayHello(request)responseText.text = response.messageAdd a call tosayHelloAgain()and change how the response message is
created. Replace the lines of code above with the following:valresponse = greeter.sayHello(request)valagainResponse = greeter.sayHelloAgain(request)valmessage ="${response.message}\n${againResponse.message}"responseText.text = messageRun the updated appRun the client and server like you did before. Execute the following commands
from theexamplesdirectory:Compile the server:$ ./gradlew installDistRun the server:$ ./server/build/install/server/bin/hello-world-serverServer started, listening on50051From another terminal, build the client and install it on your device:$ ./gradlew :android:installDebugLaunch the client app from your device.Type “Alice” in theMessagebox and clickSend. You’ll see the
following response:Hello Alice
Hello again AliceWhat’s nextLearn how gRPC works inIntroduction to gRPCandCore concepts.Work through theBasics tutorialfor Kotlin/JVM.Explore theAPI reference.Last modified October 5, 2023:Fix typo in Kotlin quickstart (#1205) (cad984c)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About