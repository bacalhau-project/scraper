URL: https://etcd.io/docs/v3.6/dev-guide/api_reference_v3/

etcdDocsBlogCommunityInstallPlayVersionsv3.6v3.5v3.4v3.3v3.2v3.1v2.3Versionsv3.6-DRAFTQuickstartDemoTutorialsHow to Set Up a Demo etcd ClusterReading from etcdWriting to etcdHow to get keys by prefixHow to delete keysHow to make multiple writes in a transactionHow to watch keysHow to create leaseHow to create locksHow to conduct leader election in etcd clusterHow to check Cluster statusHow to save the databaseHow to migrate etcd from v2 to v3How to Add and Remove MembersInstallFAQLibraries and toolsMetricsReporting bugsTuningDiscovery service protocolLogging conventionsGolang modulesLearningData modeletcd client designetcd learner designetcd v3 authentication designetcd APIetcd persistent storage filesetcd API guaranteesetcd versus other key-value storesGlossaryDeveloper guideDiscovery service protocolSet up a local clusterInteracting with etcdWhy gRPC gatewaygRPC naming and discoverySystem limitsetcd featuresAPI referenceAPI reference: concurrencyOperations guideAuthentication GuidesRole-based access controlAuthenticationConfiguration optionsTransport security modelClustering GuideRun etcd clusters as a Kubernetes StatefulSetRun etcd clusters inside containersFailure modesDisaster recoveryetcd gatewaygRPC proxyHardware recommendationsMaintenanceMonitoring etcdPerformanceDesign of runtime reconfigurationRuntime reconfigurationSupported platformsVersioningData CorruptionBenchmarksStorage Memory Usage BenchmarkWatch Memory Usage BenchmarkBenchmarking etcd v3Benchmarking etcd v2.2.0-rc-memoryBenchmarking etcd v2.2.0-rcBenchmarking etcd v2.2.0Benchmarking etcd v2.1.0UpgradingUpgrading etcd clusters and applicationsUpgrade etcd from 3.4 to 3.5Upgrade etcd from 3.3 to 3.4Upgrade etcd from 3.2 to 3.3Upgrade etcd from 3.1 to 3.2Upgrade etcd from 3.0 to 3.1Upgrade etcd from 2.3 to 3.0TriageIssue triage guidelinesPR managementv3.5QuickstartDemoTutorialsHow to Set Up a Demo etcd ClusterReading from etcdWriting to etcdHow to get keys by prefixHow to delete keysHow to make multiple writes in a transactionHow to watch keysHow to create leaseHow to create locksHow to conduct leader election in etcd clusterHow to check Cluster statusHow to save the databaseHow to migrate etcd from v2 to v3How to Add and Remove MembersInstallFAQLibraries and toolsMetricsReporting bugsTuningDiscovery service protocolLogging conventionsGolang modulesLearningData modeletcd client designetcd learner designetcd v3 authentication designetcd APIetcd persistent storage filesetcd API guaranteesetcd versus other key-value storesGlossaryDeveloper guideDiscovery service protocolSet up a local clusterInteracting with etcdWhy gRPC gatewaygRPC naming and discoverySystem limitsetcd featuresAPI referenceAPI reference: concurrencyOperations guideAuthentication GuidesRole-based access controlAuthenticationConfiguration optionsTransport security modelClustering GuideRun etcd clusters as a Kubernetes StatefulSetRun etcd clusters inside containersFailure modesDisaster recoveryetcd gatewaygRPC proxyHardware recommendationsMaintenanceMonitoring etcdPerformanceDesign of runtime reconfigurationRuntime reconfigurationSupported platformsVersioningData CorruptionBenchmarksStorage Memory Usage BenchmarkWatch Memory Usage BenchmarkBenchmarking etcd v3Benchmarking etcd v2.2.0-rc-memoryBenchmarking etcd v2.2.0-rcBenchmarking etcd v2.2.0Benchmarking etcd v2.1.0DowngradingDowngrading etcd clusters and applicationsDowngrade etcd from 3.5 to 3.4UpgradingUpgrading etcd clusters and applicationsUpgrade etcd from 3.4 to 3.5Upgrade etcd from 3.3 to 3.4Upgrade etcd from 3.2 to 3.3Upgrade etcd from 3.1 to 3.2Upgrade etcd from 3.0 to 3.1Upgrade etcd from 2.3 to 3.0TriageIssue triage guidelinesPR managementv3.4QuickstartOverviewDemoInstallFAQLibraries and toolsMetricsReporting bugsTuningDiscovery service protocolLogging conventionsLearningData modeletcd client designetcd learner designetcd v3 authentication designetcd3 APIetcd API guaranteesetcd versus other key-value storesGlossaryDeveloper guideDiscovery service protocolSet up a local clusterInteracting with etcdWhy gRPC gatewaygRPC naming and discoverySystem limitsetcd featuresAPI referenceAPI reference: concurrencyOperations guideConfiguration optionsRole-based access controlTransport security modelClustering GuideRun etcd clusters inside containersFailure modesDisaster recoveryetcd gatewaygRPC proxyHardware recommendationsMaintenancePerformanceDesign of runtime reconfigurationRuntime reconfigurationSupported platformsMigrate applications from using API v2 to API v3VersioningData CorruptionMonitoring etcdBenchmarksStorage Memory Usage BenchmarkWatch Memory Usage BenchmarkBenchmarking etcd v3Benchmarking etcd v2.2.0-rc-memoryBenchmarking etcd v2.2.0-rcBenchmarking etcd v2.2.0Benchmarking etcd v2.1.0UpgradingUpgrading etcd clusters and applicationsUpgrade etcd from 3.4 to 3.5Upgrade etcd from 3.3 to 3.4Upgrade etcd from 3.2 to 3.3Upgrade etcd from 3.1 to 3.2Upgrade etcd from 3.0 to 3.1Upgrade etcd from 2.3 to 3.0PlatformsAmazon Web ServicesContainer Linux with systemdFreeBSDTriageIssue Triage Guidelinesv3.3InstallLibraries and toolsMetricsBenchmarksBenchmarking etcd v2.1.0Benchmarking etcd v2.2.0Benchmarking etcd v2.2.0-rcBenchmarking etcd v2.2.0-rc-memoryBenchmarking etcd v3Storage Memory Usage BenchmarkWatch Memory Usage BenchmarkDemoDeveloper guideDiscovery service protocoletcd API Referenceetcd concurrency API ReferenceExperimental APIs and featuresgRPC naming and discoveryInteracting with etcdSet up a local clusterSystem limitsWhy gRPC gatewayDiscovery service protocoletcd v3 APIFrequently Asked Questions (FAQ)Learningetcd client architectureClient feature matrixData modeletcd v3 authentication designetcd versus other key-value storesetcd3 APIGlossaryKV API guaranteesLearnerLogging conventionsOperations guideMonitoring etcdVersioningClustering GuideConfiguration flagsDesign of runtime reconfigurationDisaster recoveryetcd gatewayFailure modesgRPC proxyHardware recommendationsMaintenanceMigrate applications from using API v2 to API v3PerformanceRole-based access controlRun etcd clusters inside containersRuntime reconfigurationSupported systemsTransport security modelPlatformsAmazon Web ServicesContainer Linux with systemdFreeBSDProduction usersReporting bugsTuningUpgradingUpgrade etcd from 2.3 to 3.0Upgrade etcd from 3.0 to 3.1Upgrade etcd from 3.1 to 3.2Upgrade etcd from 3.2 to 3.3Upgrade etcd from 3.3 to 3.4Upgrade etcd from 3.4 to 3.5Upgrading etcd clusters and applicationsv3.2BenchmarksBenchmarking etcd v2.1.0Benchmarking etcd v2.2.0Benchmarking etcd v2.2.0-rcBenchmarking etcd v2.2.0-rc-memoryBenchmarking etcd v3-demoStorage Memory Usage BenchmarkWatch Memory Usage BenchmarkData modelDemoDeveloper guideDiscovery service protocoletcd API referenceetcd concurrency API ReferenceExperimental APIs and featuresgRPC gatewaygRPC naming and discoveryInteracting with etcdSet up a local clusterSystem limitsetcd dev internalDiscovery service protocolLogging conventionsetcd operations guideAuthentication GuideClustering GuideConfiguration flagsDesign of runtime reconfigurationDisaster recoveryetcd gatewaygRPC proxyHardware recommendationsMaintenanceMigrate applications from using API v2 to API v3Monitoring etcdPerformanceRun etcd clusters inside containersRuntime reconfigurationSecurity modelSupported platformsUnderstand failuresVersioningetcd upgradesUpgrade etcd from 2.3 to 3.0Upgrade etcd from 3.0 to 3.1Upgrade etcd from 3.1 to 3.2Upgrade etcd from 3.2 to 3.3Upgrade etcd from 3.3 to 3.4Upgrading etcd clusters and applicationsetcd v3 authentication designetcd versus other key-value storesetcd3 APIFrequently Asked Questions (FAQ)GlossaryInstallKV API guaranteesLibraries and toolsMetricsPlatformsAmazon Web ServicesFreeBSDRun etcd on Container Linux with systemdProduction usersReporting bugsRFCetcd v3 APITuningv3.1Data modelDemoetcd benchmarksetcd v2.1.0-alpha benchmarksetcd v2.2.0 benchmarksetcd v2.2.0-rc benchmarksetcd v2.2.0-rc-memory benchmarksetcd v3-demo benchmarksStorage Memory Usage BenchmarkWatch Memory Usage Benchmarketcd developer guideDiscovery service protocoletcd API ReferenceExperimental APIs and featuresgRPC GatewaygRPC naming and discoveryInteracting with etcdSetup a local clusterSystem limitsetcd internal devDiscovery service protocolLogging conventionsetcd operations guideClustering GuideConfiguration flagsDesign of runtime reconfigurationDisaster recoveryetcd gatewaygRPC proxyHardware recommendationsMaintenanceMigrate applications from using API v2 to API v3Monitoring etcdPerformanceRun etcd clusters inside containersRuntime reconfigurationSecurity modelSupported platformsUnderstand failuresVersioningetcd3 APIFrequently Asked Questions (FAQ)GlossaryInstallKV API guaranteesLibraries and toolsMetricsPlatformsFreeBSDProduction usersReporting bugsRFCetcd v3 APITuningUpgrading etcd clusters and applicationsUpgrade etcd from 2.3 to 3.0Upgrade etcd from 3.0 to 3.1Upgrade etcd from 3.1 to 3.2Upgrade etcd from 3.2 to 3.3Upgrade etcd from 3.3 to 3.4Why etcdv2.3AdministrationAuthentication GuideBackward CompatibilityBenchmarksBenchmarking etcd v2.2.0etcd 2.1.0-alpha benchmarksetcd 2.2.0-rc benchmarksetcd 2.2.0-rc memory benchmarksetcd 3 demo benchmarksStorage Memory Usage BenchmarkWatch Memory Usage BenchmarkClustering GuideConfiguration FlagsDesign of Runtime ReconfigurationDevelopmentDiscovery Service ProtocolError Codeetcd APIetcd v3 APIFAQGlossaryLibraries and ToolsMembers APIMetricsMiscellaneous APIsPlatformsFreeBSProduction UsersProxyReporting BugsRunning etcd under DockerRuntime ReconfigurationSecurity ModelSnapshot MigrationTuningUpgrade etcd from 2.1 to 2.2Upgrade etcd from 2.1 to 2.2Upgrade etcd from 2.2 to 2.3v2 Auth and SecurityVersioningView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueVersionsv3.6-DRAFTDeveloper guideAPI referenceAPI referenceThis API reference is autogenerated from the named.protofiles.serviceAuth(api/etcdserverpb/rpc.proto)MethodRequest TypeResponse TypeDescriptionAuthEnableAuthEnableRequestAuthEnableResponseAuthEnable enables authentication.AuthDisableAuthDisableRequestAuthDisableResponseAuthDisable disables authentication.AuthStatusAuthStatusRequestAuthStatusResponseAuthStatus displays authentication status.AuthenticateAuthenticateRequestAuthenticateResponseAuthenticate processes an authenticate request.UserAddAuthUserAddRequestAuthUserAddResponseUserAdd adds a new user. User name cannot be empty.UserGetAuthUserGetRequestAuthUserGetResponseUserGet gets detailed user information.UserListAuthUserListRequestAuthUserListResponseUserList gets a list of all users.UserDeleteAuthUserDeleteRequestAuthUserDeleteResponseUserDelete deletes a specified user.UserChangePasswordAuthUserChangePasswordRequestAuthUserChangePasswordResponseUserChangePassword changes the password of a specified user.UserGrantRoleAuthUserGrantRoleRequestAuthUserGrantRoleResponseUserGrant grants a role to a specified user.UserRevokeRoleAuthUserRevokeRoleRequestAuthUserRevokeRoleResponseUserRevokeRole revokes a role of specified user.RoleAddAuthRoleAddRequestAuthRoleAddResponseRoleAdd adds a new role. Role name cannot be empty.RoleGetAuthRoleGetRequestAuthRoleGetResponseRoleGet gets detailed role information.RoleListAuthRoleListRequestAuthRoleListResponseRoleList gets lists of all roles.RoleDeleteAuthRoleDeleteRequestAuthRoleDeleteResponseRoleDelete deletes a specified role.RoleGrantPermissionAuthRoleGrantPermissionRequestAuthRoleGrantPermissionResponseRoleGrantPermission grants a permission of a specified key or range to a specified role.RoleRevokePermissionAuthRoleRevokePermissionRequestAuthRoleRevokePermissionResponseRoleRevokePermission revokes a key or range permission of a specified role.serviceCluster(api/etcdserverpb/rpc.proto)MethodRequest TypeResponse TypeDescriptionMemberAddMemberAddRequestMemberAddResponseMemberAdd adds a member into the cluster.MemberRemoveMemberRemoveRequestMemberRemoveResponseMemberRemove removes an existing member from the cluster.MemberUpdateMemberUpdateRequestMemberUpdateResponseMemberUpdate updates the member configuration.MemberListMemberListRequestMemberListResponseMemberList lists all the members in the cluster.MemberPromoteMemberPromoteRequestMemberPromoteResponseMemberPromote promotes a member from raft learner (non-voting) to raft voting member.serviceKV(api/etcdserverpb/rpc.proto)MethodRequest TypeResponse TypeDescriptionRangeRangeRequestRangeResponseRange gets the keys in the range from the key-value store.PutPutRequestPutResponsePut puts the given key into the key-value store. A put request increments the revision of the key-value store and generates one event in the event history.DeleteRangeDeleteRangeRequestDeleteRangeResponseDeleteRange deletes the given range from the key-value store. A delete request increments the revision of the key-value store and generates a delete event in the event history for every deleted key.TxnTxnRequestTxnResponseTxn processes multiple requests in a single transaction. A txn request increments the revision of the key-value store and generates events with the same revision for every completed request. It is not allowed to modify the same key several times within one txn.CompactCompactionRequestCompactionResponseCompact compacts the event history in the etcd key-value store. The key-value store should be periodically compacted or the event history will continue to grow indefinitely.serviceLease(api/etcdserverpb/rpc.proto)MethodRequest TypeResponse TypeDescriptionLeaseGrantLeaseGrantRequestLeaseGrantResponseLeaseGrant creates a lease which expires if the server does not receive a keepAlive within a given time to live period. All keys attached to the lease will be expired and deleted if the lease expires. Each expired key generates a delete event in the event history.LeaseRevokeLeaseRevokeRequestLeaseRevokeResponseLeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.LeaseKeepAliveLeaseKeepAliveRequestLeaseKeepAliveResponseLeaseKeepAlive keeps the lease alive by streaming keep alive requests from the client to the server and streaming keep alive responses from the server to the client.LeaseTimeToLiveLeaseTimeToLiveRequestLeaseTimeToLiveResponseLeaseTimeToLive retrieves lease information.LeaseLeasesLeaseLeasesRequestLeaseLeasesResponseLeaseLeases lists all existing leases.serviceMaintenance(api/etcdserverpb/rpc.proto)MethodRequest TypeResponse TypeDescriptionAlarmAlarmRequestAlarmResponseAlarm activates, deactivates, and queries alarms regarding cluster health.StatusStatusRequestStatusResponseStatus gets the status of the member.DefragmentDefragmentRequestDefragmentResponseDefragment defragments a member’s backend database to recover storage space.HashHashRequestHashResponseHash computes the hash of whole backend keyspace, including key, lease, and other buckets in storage. This is designed for testing ONLY! Do not rely on this in production with ongoing transactions, since Hash operation does not hold MVCC locks. Use “HashKV” API instead for “key” bucket consistency checks.HashKVHashKVRequestHashKVResponseHashKV computes the hash of all MVCC keys up to a given revision. It only iterates “key” bucket in backend storage.SnapshotSnapshotRequestSnapshotResponseSnapshot sends a snapshot of the entire backend from a member over a stream to a client.MoveLeaderMoveLeaderRequestMoveLeaderResponseMoveLeader requests current leader node to transfer its leadership to transferee.DowngradeDowngradeRequestDowngradeResponseDowngrade requests downgrades, verifies feasibility or cancels downgrade on the cluster version. Supported since etcd 3.5.serviceWatch(api/etcdserverpb/rpc.proto)MethodRequest TypeResponse TypeDescriptionWatchWatchRequestWatchResponseWatch watches for events happening or that have happened. Both input and output are streams; the input stream is for creating and canceling watchers and the output stream sends events. One watch RPC can watch on multiple key ranges, streaming events for several watches at once. The entire event history can be watched starting from the last compaction revision.messageAlarmMember(api/etcdserverpb/rpc.proto)FieldDescriptionTypememberIDmemberID is the ID of the member associated with the raised alarm.uint64alarmalarm is the type of alarm which has been raised.AlarmTypemessageAlarmRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypeactionaction is the kind of alarm request to issue. The action may GET alarm statuses, ACTIVATE an alarm, or DEACTIVATE a raised alarm.AlarmActionmemberIDmemberID is the ID of the member associated with the alarm. If memberID is 0, the alarm request covers all members.uint64alarmalarm is the type of alarm to consider for this request.AlarmTypemessageAlarmResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderalarmsalarms is a list of alarms associated with the alarm request.(slice of) AlarmMembermessageAuthDisableRequest(api/etcdserverpb/rpc.proto)Empty field.messageAuthDisableResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthEnableRequest(api/etcdserverpb/rpc.proto)Empty field.messageAuthEnableResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthRoleAddRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypenamename is the name of the role to add to the authentication system.stringmessageAuthRoleAddResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthRoleDeleteRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTyperolestringmessageAuthRoleDeleteResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthRoleGetRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTyperolestringmessageAuthRoleGetResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderperm(slice of) authpb.PermissionmessageAuthRoleGrantPermissionRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypenamename is the name of the role which will be granted the permission.stringpermperm is the permission to grant to the role.authpb.PermissionmessageAuthRoleGrantPermissionResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthRoleListRequest(api/etcdserverpb/rpc.proto)Empty field.messageAuthRoleListResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderroles(slice of) stringmessageAuthRoleRevokePermissionRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTyperolestringkeybytesrange_endbytesmessageAuthRoleRevokePermissionResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthStatusRequest(api/etcdserverpb/rpc.proto)Empty field.messageAuthStatusResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderenabledboolauthRevisionauthRevision is the current revision of auth storeuint64messageAuthUserAddRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypenamestringpasswordstringoptionsauthpb.UserAddOptionshashedPasswordstringmessageAuthUserAddResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthUserChangePasswordRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypenamename is the name of the user whose password is being changed.stringpasswordpassword is the new password for the user. Note that this field will be removed in the API layer.stringhashedPasswordhashedPassword is the new password for the user. Note that this field will be initialized in the API layer.stringmessageAuthUserChangePasswordResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthUserDeleteRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypenamename is the name of the user to delete.stringmessageAuthUserDeleteResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthUserGetRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypenamestringmessageAuthUserGetResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderroles(slice of) stringmessageAuthUserGrantRoleRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypeuseruser is the name of the user which should be granted a given role.stringrolerole is the name of the role to grant to the user.stringmessageAuthUserGrantRoleResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthUserListRequest(api/etcdserverpb/rpc.proto)Empty field.messageAuthUserListResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderusers(slice of) stringmessageAuthUserRevokeRoleRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypenamestringrolestringmessageAuthUserRevokeRoleResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageAuthenticateRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypenamestringpasswordstringmessageAuthenticateResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadertokentoken is an authorized token that can be used in succeeding RPCsstringmessageCompactionRequest(api/etcdserverpb/rpc.proto)CompactionRequest compacts the key-value store up to a given revision. All superseded keys with a revision less than the compaction revision will be removed.FieldDescriptionTyperevisionrevision is the key-value store revision for the compaction operation.int64physicalphysical is set so the RPC will wait until the compaction is physically applied to the local database such that compacted entries are totally removed from the backend database.boolmessageCompactionResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageCompare(api/etcdserverpb/rpc.proto)FieldDescriptionTyperesultresult is logical comparison operation for this comparison.CompareResulttargettarget is the key-value field to inspect for the comparison.CompareTargetkeykey is the subject key for the comparison operation.bytestarget_uniononeofversionversion is the version of the given keyint64create_revisioncreate_revision is the creation revision of the given keyint64mod_revisionmod_revision is the last modified revision of the given key.int64valuevalue is the value of the given key, in bytes.bytesleaselease is the lease id of the given key.int64range_endrange_end compares the given target to all keys in the range [key, range_end). See RangeRequest for more details on key ranges.bytesmessageDefragmentRequest(api/etcdserverpb/rpc.proto)Empty field.messageDefragmentResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageDeleteRangeRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypekeykey is the first key to delete in the range.bytesrange_endrange_end is the key following the last key to delete for the range [key, range_end). If range_end is not given, the range is defined to contain only the key argument. If range_end is one bit larger than the given key, then the range is all the keys with the prefix (the given key). If range_end is ‘\0’, the range is all keys greater than or equal to the key argument.bytesprev_kvIf prev_kv is set, etcd gets the previous key-value pairs before deleting it. The previous key-value pairs will be returned in the delete response.boolmessageDeleteRangeResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderdeleteddeleted is the number of keys deleted by the delete range request.int64prev_kvsif prev_kv is set in the request, the previous key-value pairs will be returned.(slice of) mvccpb.KeyValuemessageDowngradeRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypeactionaction is the kind of downgrade request to issue. The action may VALIDATE the target version, DOWNGRADE the cluster version, or CANCEL the current downgrading job.DowngradeActionversionversion is the target version to downgrade.stringmessageDowngradeResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderversionversion is the current cluster version.stringmessageHashKVRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTyperevisionrevision is the key-value store revision for the hash operation.int64messageHashKVResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderhashhash is the hash value computed from the responding member’s MVCC keys up to a given revision.uint32compact_revisioncompact_revision is the compacted revision of key-value store when hash begins.int64messageHashRequest(api/etcdserverpb/rpc.proto)Empty field.messageHashResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderhashhash is the hash value computed from the responding member’s KV’s backend.uint32messageLeaseCheckpoint(api/etcdserverpb/rpc.proto)FieldDescriptionTypeIDID is the lease ID to checkpoint.int64remaining_TTLRemaining_TTL is the remaining time until expiry of the lease.int64messageLeaseCheckpointRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypecheckpoints(slice of) LeaseCheckpointmessageLeaseCheckpointResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageLeaseGrantRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypeTTLTTL is the advisory time-to-live in seconds. Expired lease will return -1.int64IDID is the requested ID for the lease. If ID is set to 0, the lessor chooses an ID.int64messageLeaseGrantResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderIDID is the lease ID for the granted lease.int64TTLTTL is the server chosen lease time-to-live in seconds.int64errorstringmessageLeaseKeepAliveRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypeIDID is the lease ID for the lease to keep alive.int64messageLeaseKeepAliveResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderIDID is the lease ID from the keep alive request.int64TTLTTL is the new time-to-live for the lease.int64messageLeaseLeasesRequest(api/etcdserverpb/rpc.proto)Empty field.messageLeaseLeasesResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderleases(slice of) LeaseStatusmessageLeaseRevokeRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypeIDID is the lease ID to revoke. When the ID is revoked, all associated keys will be deleted.int64messageLeaseRevokeResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessageLeaseStatus(api/etcdserverpb/rpc.proto)FieldDescriptionTypeIDint64messageLeaseTimeToLiveRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypeIDID is the lease ID for the lease.int64keyskeys is true to query all the keys attached to this lease.boolmessageLeaseTimeToLiveResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderIDID is the lease ID from the keep alive request.int64TTLTTL is the remaining TTL in seconds for the lease; the lease will expire in under TTL+1 seconds.int64grantedTTLGrantedTTL is the initial granted time in seconds upon lease creation/renewal.int64keysKeys is the list of keys attached to this lease.(slice of) bytesmessageMember(api/etcdserverpb/rpc.proto)FieldDescriptionTypeIDID is the member ID for this member.uint64namename is the human-readable name of the member. If the member is not started, the name will be an empty string.stringpeerURLspeerURLs is the list of URLs the member exposes to the cluster for communication.(slice of) stringclientURLsclientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty.(slice of) stringisLearnerisLearner indicates if the member is raft learner.boolmessageMemberAddRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypepeerURLspeerURLs is the list of URLs the added member will use to communicate with the cluster.(slice of) stringisLearnerisLearner indicates if the added member is raft learner.boolmessageMemberAddResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermembermember is the member information for the added member.Membermembersmembers is a list of all members after adding the new member.(slice of) MembermessageMemberListRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypelinearizableboolmessageMemberListResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermembersmembers is a list of all members associated with the cluster.(slice of) MembermessageMemberPromoteRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypeIDID is the member ID of the member to promote.uint64messageMemberPromoteResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermembersmembers is a list of all members after promoting the member.(slice of) MembermessageMemberRemoveRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypeIDID is the member ID of the member to remove.uint64messageMemberRemoveResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermembersmembers is a list of all members after removing the member.(slice of) MembermessageMemberUpdateRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypeIDID is the member ID of the member to update.uint64peerURLspeerURLs is the new list of URLs the member will use to communicate with the cluster.(slice of) stringmessageMemberUpdateResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermembersmembers is a list of all members after updating the member.(slice of) MembermessageMoveLeaderRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypetargetIDtargetID is the node ID for the new leader.uint64messageMoveLeaderResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadermessagePutRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypekeykey is the key, in bytes, to put into the key-value store.bytesvaluevalue is the value, in bytes, to associate with the key in the key-value store.bytesleaselease is the lease ID to associate with the key in the key-value store. A lease value of 0 indicates no lease.int64prev_kvIf prev_kv is set, etcd gets the previous key-value pair before changing it. The previous key-value pair will be returned in the put response.boolignore_valueIf ignore_value is set, etcd updates the key using its current value. Returns an error if the key does not exist.boolignore_leaseIf ignore_lease is set, etcd updates the key using its current lease. Returns an error if the key does not exist.boolmessagePutResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderprev_kvif prev_kv is set in the request, the previous key-value pair will be returned.mvccpb.KeyValuemessageRangeRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypekeykey is the first key for the range. If range_end is not given, the request only looks up key.bytesrange_endrange_end is the upper bound on the requested range [key, range_end). If range_end is ‘\0’, the range is all keys >= key. If range_end is key plus one (e.g., “aa”+1 == “ab”, “a\xff”+1 == “b”), then the range request gets all keys prefixed with key. If both key and range_end are ‘\0’, then the range request returns all keys.byteslimitlimit is a limit on the number of keys returned for the request. When limit is set to 0, it is treated as no limit.int64revisionrevision is the point-in-time of the key-value store to use for the range. If revision is less or equal to zero, the range is over the newest key-value store. If the revision has been compacted, ErrCompacted is returned as a response.int64sort_ordersort_order is the order for returned sorted results.SortOrdersort_targetsort_target is the key-value field to use for sorting.SortTargetserializableserializable sets the range request to use serializable member-local reads. Range requests are linearizable by default; linearizable requests have higher latency and lower throughput than serializable requests but reflect the current consensus of the cluster. For better performance, in exchange for possible stale reads, a serializable range request is served locally without needing to reach consensus with other nodes in the cluster.boolkeys_onlykeys_only when set returns only the keys and not the values.boolcount_onlycount_only when set returns only the count of the keys in the range.boolmin_mod_revisionmin_mod_revision is the lower bound for returned key mod revisions; all keys with lesser mod revisions will be filtered away.int64max_mod_revisionmax_mod_revision is the upper bound for returned key mod revisions; all keys with greater mod revisions will be filtered away.int64min_create_revisionmin_create_revision is the lower bound for returned key create revisions; all keys with lesser create revisions will be filtered away.int64max_create_revisionmax_create_revision is the upper bound for returned key create revisions; all keys with greater create revisions will be filtered away.int64messageRangeResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderkvskvs is the list of key-value pairs matched by the range request. kvs is empty when count is requested.(slice of) mvccpb.KeyValuemoremore indicates if there are more keys to return in the requested range.boolcountcount is set to the number of keys within the range when requested.int64messageRequestOp(api/etcdserverpb/rpc.proto)FieldDescriptionTyperequestrequest is a union of request types accepted by a transaction.oneofrequest_rangeRangeRequestrequest_putPutRequestrequest_delete_rangeDeleteRangeRequestrequest_txnTxnRequestmessageResponseHeader(api/etcdserverpb/rpc.proto)FieldDescriptionTypecluster_idcluster_id is the ID of the cluster which sent the response.uint64member_idmember_id is the ID of the member which sent the response.uint64revisionrevision is the key-value store revision when the request was applied. For watch progress responses, the header.revision indicates progress. All future events received in this stream are guaranteed to have a higher revision number than the header.revision number.int64raft_termraft_term is the raft term when the request was applied.uint64messageResponseOp(api/etcdserverpb/rpc.proto)FieldDescriptionTyperesponseresponse is a union of response types returned by a transaction.oneofresponse_rangeRangeResponseresponse_putPutResponseresponse_delete_rangeDeleteRangeResponseresponse_txnTxnResponsemessageSnapshotRequest(api/etcdserverpb/rpc.proto)Empty field.messageSnapshotResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderheader has the current key-value store information. The first header in the snapshot stream indicates the point in time of the snapshot.ResponseHeaderremaining_bytesremaining_bytes is the number of blob bytes to be sent after this messageuint64blobblob contains the next chunk of the snapshot in the snapshot stream.bytesmessageStatusRequest(api/etcdserverpb/rpc.proto)Empty field.messageStatusResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderversionversion is the cluster protocol version used by the responding member.stringdbSizedbSize is the size of the backend database physically allocated, in bytes, of the responding member.int64leaderleader is the member ID which the responding member believes is the current leader.uint64raftIndexraftIndex is the current raft committed index of the responding member.uint64raftTermraftTerm is the current raft term of the responding member.uint64raftAppliedIndexraftAppliedIndex is the current raft applied index of the responding member.uint64errorserrors contains alarm/health information and status.(slice of) stringdbSizeInUsedbSizeInUse is the size of the backend database logically in use, in bytes, of the responding member.int64isLearnerisLearner indicates if the member is raft learner.boolmessageTxnRequest(api/etcdserverpb/rpc.proto)From google paxosdb paper: Our implementation hinges around a powerful primitive which we call MultiOp. All other database operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically and consists of three components: 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check for the absence or presence of a value, or compare with a given value. Two different tests in the guard may apply to the same or different entries in the database. All tests in the guard are applied and MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise it executes f op (see item 3 below). 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or lookup operation, and applies to a single database entry. Two different operations in the list may apply to the same or different entries in the database. These operations are executed if guard evaluates to true. 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.FieldDescriptionTypecomparecompare is a list of predicates representing a conjunction of terms. If the comparisons succeed, then the success requests will be processed in order, and the response will contain their respective responses in order. If the comparisons fail, then the failure requests will be processed in order, and the response will contain their respective responses in order.(slice of) Comparesuccesssuccess is a list of requests which will be applied when compare evaluates to true.(slice of) RequestOpfailurefailure is a list of requests which will be applied when compare evaluates to false.(slice of) RequestOpmessageTxnResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeadersucceededsucceeded is set to true if the compare evaluated to true or false otherwise.boolresponsesresponses is a list of responses corresponding to the results from applying success if succeeded is true or failure if succeeded is false.(slice of) ResponseOpmessageWatchCancelRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypewatch_idwatch_id is the watcher id to cancel so that no more events are transmitted.int64messageWatchCreateRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTypekeykey is the key to register for watching.bytesrange_endrange_end is the end of the range [key, range_end) to watch. If range_end is not given, only the key argument is watched. If range_end is equal to ‘\0’, all keys greater than or equal to the key argument are watched. If the range_end is one bit larger than the given key, then all keys with the prefix (the given key) will be watched.bytesstart_revisionstart_revision is an optional revision to watch from (inclusive). No start_revision is “now”.int64progress_notifyprogress_notify is set so that the etcd server will periodically send a WatchResponse with no events to the new watcher if there are no recent events. It is useful when clients wish to recover a disconnected watcher starting from a recent known revision. The etcd server may decide how often it will send notifications based on current load.boolfiltersfilters filter the events at server side before it sends back to the watcher.(slice of) FilterTypeprev_kvIf prev_kv is set, created watcher gets the previous KV before the event happens. If the previous KV is already compacted, nothing will be returned.boolwatch_idIf watch_id is provided and non-zero, it will be assigned to this watcher. Since creating a watcher in etcd is not a synchronous operation, this can be used ensure that ordering is correct when creating multiple watchers on the same stream. Creating a watcher with an ID already in use on the stream will cause an error to be returned.int64fragmentfragment enables splitting large revisions into multiple watch responses.boolmessageWatchProgressRequest(api/etcdserverpb/rpc.proto)Requests the a watch stream progress status be sent in the watch response stream as soon as possible.Empty field.messageWatchRequest(api/etcdserverpb/rpc.proto)FieldDescriptionTyperequest_unionrequest_union is a request to either create a new watcher or cancel an existing watcher.oneofcreate_requestWatchCreateRequestcancel_requestWatchCancelRequestprogress_requestWatchProgressRequestmessageWatchResponse(api/etcdserverpb/rpc.proto)FieldDescriptionTypeheaderResponseHeaderwatch_idwatch_id is the ID of the watcher that corresponds to the response.int64createdcreated is set to true if the response is for a create watch request. The client should record the watch_id and expect to receive events for the created watcher from the same stream. All events sent to the created watcher will attach with the same watch_id.boolcanceledcanceled is set to true if the response is for a cancel watch request. No further events will be sent to the canceled watcher.boolcompact_revisioncompact_revision is set to the minimum index if a watcher tries to watch at a compacted index. This happens when creating a watcher at a compacted revision or the watcher cannot catch up with the progress of the key-value store. The client should treat the watcher as canceled and should not try to create any watcher with the same start_revision again.int64cancel_reasoncancel_reason indicates the reason for canceling the watcher.stringfragmentframgment is true if large watch response was split over multiple responses.boolevents(slice of) mvccpb.EventmessageEvent(api/mvccpb/kv.proto)FieldDescriptionTypetypetype is the kind of event. If type is a PUT, it indicates new data has been stored to the key. If type is a DELETE, it indicates the key was deleted.EventTypekvkv holds the KeyValue for the event. A PUT event contains current kv pair. A PUT event with kv.Version=1 indicates the creation of a key. A DELETE/EXPIRE event contains the deleted key with its modification revision set to the revision of deletion.KeyValueprev_kvprev_kv holds the key-value pair before the event happens.KeyValuemessageKeyValue(api/mvccpb/kv.proto)FieldDescriptionTypekeykey is the key in bytes. An empty key is not allowed.bytescreate_revisioncreate_revision is the revision of last creation on this key.int64mod_revisionmod_revision is the revision of last modification on this key.int64versionversion is the version of the key. A deletion resets the version to zero and any modification of the key increases its version.int64valuevalue is the value held by the key, in bytes.bytesleaselease is the ID of the lease that attached to key. When the attached lease expires, the key will be deleted. If lease is 0, then no lease is attached to the key.int64messageLease(server/lease/leasepb/lease.proto)FieldDescriptionTypeIDint64TTLint64RemainingTTLint64messageLeaseInternalRequest(server/lease/leasepb/lease.proto)FieldDescriptionTypeLeaseTimeToLiveRequestetcdserverpb.LeaseTimeToLiveRequestmessageLeaseInternalResponse(server/lease/leasepb/lease.proto)FieldDescriptionTypeLeaseTimeToLiveResponseetcdserverpb.LeaseTimeToLiveResponsemessagePermission(api/authpb/auth.proto)Permission is a single entityFieldDescriptionTypepermTypeTypekeybytesrange_endbytesmessageRole(api/authpb/auth.proto)Role is a single entry in the bucket authRolesFieldDescriptionTypenamebyteskeyPermission(slice of) PermissionmessageUser(api/authpb/auth.proto)User is a single entry in the bucket authUsersFieldDescriptionTypenamebytespasswordbytesroles(slice of) stringoptionsUserAddOptionsmessageUserAddOptions(api/authpb/auth.proto)FieldDescriptionTypeno_passwordboolFeedbackWas this page helpful?YesNoGlad to hear it! Pleasetell us how we can improve.Sorry to hear that. Pleasetell us how we can improve.Last modified April 9, 2022:Fix typos (a2da31e)©
2013–2024etcd AuthorsTerms|Privacy|Trademarks|LicenseAll Rights Reserved