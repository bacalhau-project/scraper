URL: https://cassandra.apache.org/doc/latest/cassandra/getting-started/production.html

Get StartedCassandra BasicsQuickstartEcosystemDocumentationCommunityWelcomeDiscussionsGovernanceContributeMeet the CommunityCatalyst ProgramEventsLearnCassandra 5.0Case StudiesResourcesBlogDownload NowCassandra DocumentationVersion:5.0mastertrunk5.04.14.03.11MainGlossaryHow to report bugsContact usDevelopmentGetting startedBuilding and IDE integrationTestingContributing code changesCode styleReview checklistHow to commitWorking on documentationJenkins CI environmentDependency managementRelease processCassandraFAQGetting StartedCassandra QuickstartSAI QuickstartVector Search QuickstartInstalling CassandraConfiguring CassandraInserting and queryingClient driversProduction recommendationsWhat’s newSupport for JavaArchitectureOverviewDynamoStorage EngineGuaranteesImproved Internode MessagingImproved StreamingData ModelingIntroductionConceptual data modelingRDBMS designDefining application queriesLogical data modelingPhysical data modelingEvaluating and refining data modelsDefining database schemaCassandra data modeling toolsCassandra Query Language (CQL)DefinitionsData typesData definition (DDL)Data manipulation (DML)Dynamic Data Masking (DDM)OperatorsIndexing conceptsSAI OverviewConceptsSAI QuickstartSAI FAQWorking with SAISAI operationsSecondary indexes (2i) overviewConceptsWorking with 2iRebuild 2iMaterialized viewsFunctionsJSONSecurityTriggersAppendicesChangesSASISingle file of CQL informationVector Search overviewConceptsData ModelingVector Search QuickstartWorking with Vector SearchManagingConfiguringcassandra.yamlcassandra-rackdc.propertiescassandra-env.shcassandra-topologies.propertiescommitlog-archiving.propertieslogback.xmljvm-* filesLiberating cassandra.yaml Parameters' Names from Their UnitsOperatingBackupsBloom filtersBulk loadingChange Data Capture (CDC)CompactionCompressionHardwareHintsLoggingAudit loggingAudit logging 2Full query loggingMonitoring metricsRepairRead repairSecuritySnitchesTopology changesTransient replicationVirtual tablesToolscqlsh: the CQL shellnodetoolSSTable toolscassandra-stressTroubleshootingFinding misbehaving nodesReading Cassandra logsUsing nodetoolUsing external tools to deep-diveReferenceALTER TABLECREATE INDEXCREATE CUSTOM INDEXCREATE TABLEDROP INDEXDROP TABLEPlug-insYou are viewing the documentation for a prerelease version.CassandraGetting StartedProduction recommendationsEditProduction recommendationsThecassandra.yamlandjvm.optionsfiles have a number of notes and
recommendations for production usage.
This page expands on some of the information in the files.TokensUsing more than one token-range per node is referred to as virtual nodes, or vnodes.vnodesfacilitate flexible expansion with more streaming peers when a new node bootstraps
into a cluster.
Limiting the negative impact of streaming (I/O and CPU overhead) enables incremental cluster expansion.
However, more tokens leads to sharing data with more peers, and results in decreased availability.
These two factors must be balanced based on a cluster’s characteristic reads and writes.
To learn more,Cassandra Availability in Virtual Nodes, Joseph Lynch and Josh Snyderis recommended reading.Change the number of tokens using the setting in thecassandra.yamlfile:num_tokens: 16Here are the most common token counts with a brief explanation of when
and why you would use each one.Token CountDescription1Maximum availablility, maximum cluster size, fewest peers, but
inflexible expansion. Must always double size of cluster to expand and
remain balanced.4A healthy mix of elasticity and availability. Recommended for
clusters which will eventually reach over 30 nodes. Requires adding
approximately 20% more nodes to remain balanced. Shrinking a cluster may
result in cluster imbalance.8Using 8 vnodes distributes the workload between systems with a ~10% variance
and has minimal impact on performance.16Best for heavily elastic clusters which expand and shrink
regularly, but may have issues availability with larger clusters. Not
recommended for clusters over 50 nodes.In addition to setting the token count, it’s extremely important thatallocate_tokens_for_local_replication_factorincassandra.yamlis set to an
appropriate number of replicates, to ensure even token allocation.Read aheadRead ahead is an operating system feature that attempts to keep as much
data as possible loaded in the page cache.
Spinning disks can have long seek times causing high latency, so additional
throughput on reads using page cache can improve performance.
By leveraging read ahead, the OS can pull additional data into memory without
the cost of additional seeks.
This method works well when the available RAM is greater than the size of the
hot dataset, but can be problematic when the reverse is true (dataset > RAM).
The larger the hot dataset, the less read ahead is useful.Read ahead is definitely not useful in the following cases:Small partitions, such as tables with a single partition keySolid state drives (SSDs)Read ahead can actually increase disk usage, and in some cases result in as much
as a 5x latency and throughput performance penalty.
Read-heavy, key/value tables with small (under 1KB) rows are especially prone
to this problem.The recommended read ahead settings are:HardwareInitial RecommendationSpinning Disks64KBSSD4KBRead ahead can be adjusted on Linux systems using theblockdevtool.For example, set the read ahead of the disk/dev/sda1to 4KB:$ blockdev --setra 8 /dev/sda1Theblockdevsetting sets the number of 512 byte sectors to read ahead.
The argument of 8 above is equivalent to 4KB, or 8 * 512 bytes.All systems are different, so use these recommendations as a starting point and
tune, based on your SLA and throughput requirements.
To understand how read ahead impacts disk resource usage, we recommend carefully
reading through theDiving Deep, using external toolssection.CompressionCompressed data is stored by compressing fixed-size byte buffers and writing the
data to disk.
The buffer size is determined by thechunk_length_in_kbelement in the compression
map of a table’s schema settings forWITH COMPRESSION.
The default setting is 16KB starting with Cassandra 4.0.Since the entire compressed buffer must be read off-disk, using a compression
chunk length that is too large can lead to significant overhead when reading small records.
Combined with the default read ahead setting, the result can be massive
read amplification for certain workloads. Therefore, picking an appropriate
value for this setting is important.LZ4Compressor is the default and recommended compression algorithm.
If you need additional information on compression, readThe Last Pickle blogpost on compression performance.CompactionThere are differentcompactionstrategies available
for different workloads.
We recommend reading about the different strategies to understand which is the
best for your environment.
Different tables may, and frequently do use different compaction strategies in
the same cluster.EncryptionIt is significantly better to set up peer-to-peer encryption and client server
encryption when setting up your production cluster.
Setting it up after the cluster is serving production traffic is challenging
to do correctly.
If you ever plan to use network encryption of any type, we recommend setting it
up when initially configuring your cluster.
Changing these configurations later is not impossible, but mistakes can
result in downtime or data loss.Ensure keyspaces are created with NetworkTopologyStrategyProduction clusters should never useSimpleStrategy.
Production keyspaces should use theNetworkTopologyStrategy(NTS).
For example:CREATE KEYSPACE mykeyspace WITH replication =     {
   'class': 'NetworkTopologyStrategy',
   'datacenter1': 3
};Cassandra clusters initialized withNetworkTopologyStrategycan take advantage
of the ability to configure multiple racks and data centers.Configure racks and snitchCorrectly configuring or changing racks after a cluster has been provisioned is an unsupported process.
Migrating from a single rack to multiple racks is also unsupported and can
result in data loss.
UsingGossipingPropertyFileSnitchis the most flexible solution for
on-premise or mixed cloud environments.Ec2Snitchis reliable for AWS EC2 only environments.Get started with Cassandra, fast.Quickstart GuideApache Cassandrapowers mission-critical deployments with improved performance and unparalleled levels of scale in the cloud.HomeCassandra BasicsQuickstartEcosystemDocumentationCommunityCase StudiesResourcesBlogFoundationEventsLicenseThanksSecurityPrivacySponsorshipÂ© 2009-The Apache Software Foundationunder the terms of the Apache License 2.0.  Apache, the Apache feather logo, Apache Cassandra, Cassandra, and the Cassandra logo, are either registered trademarks or trademarks of The Apache Software Foundation.