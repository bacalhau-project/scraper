Source: kubernetes_io
URL: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/

Kubernetes API Aggregation Layer
The aggregation layer allows Kubernetes to be extended with additional APIs, beyond what is
offered by the core Kubernetes APIs.
The additional APIs can either be ready-made solutions such as a
[metrics server](https://github.com/kubernetes-sigs/metrics-server), or APIs that you develop yourself.
The aggregation layer is different from
[Custom Resource Definitions](/docs/concepts/extend-kubernetes/api-extension/custom-resources/),
which are a way to make the [kube-apiserver](/docs/concepts/architecture/#kube-apiserver)
recognise new kinds of object.
Aggregation layer
The aggregation layer runs in-process with the kube-apiserver. Until an extension resource is
registered, the aggregation layer will do nothing. To register an API, you add an APIService
object, which "claims" the URL path in the Kubernetes API. At that point, the aggregation layer
will proxy anything sent to that API path (e.g. /apis/myextension.mycompany.io/v1/â€¦
) to the
registered APIService.
The most common way to implement the APIService is to run an extension API server in Pod(s) that
run in your cluster. If you're using the extension API server to manage resources in your cluster,
the extension API server (also written as "extension-apiserver") is typically paired with one or
more [controllers](/docs/concepts/architecture/controller/). The apiserver-builder
library provides a skeleton for both extension API servers and the associated controller(s).
Response latency
Extension API servers should have low latency networking to and from the kube-apiserver. Discovery requests are required to round-trip from the kube-apiserver in five seconds or less.
If your extension API server cannot achieve that latency requirement, consider making changes that let you meet it.
What's next
- To get the aggregator working in your environment,
[configure the aggregation layer](/docs/tasks/extend-kubernetes/configure-aggregation-layer/). - Then,
[setup an extension api-server](/docs/tasks/extend-kubernetes/setup-extension-api-server/)to work with the aggregation layer. - Read about
[APIService](/docs/reference/kubernetes-api/cluster-resources/api-service-v1/)in the API reference
Alternatively: learn how to
[extend the Kubernetes API using Custom Resource Definitions](/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/).
[Update the apiserver-aggregation.md (#47165) (98861dd726)](https://github.com/kubernetes/website/commit/98861dd7263f3ce6072a76c4f2cbc260d0fb17db)