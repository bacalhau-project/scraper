URL: https://en.wikipedia.org/wiki/PACELC_theorem

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Overview2History3Database PACELC ratings4See also5Notes6References7External linksToggle the table of contentsPACELC theorem2 languagesItalianoРусскийEdit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaTheorem in theoretical computer scienceThe tradeoff between availability, consistency and latency, as described by the PACELC theorem.Indatabase theory, thePACELC theoremis an extension to theCAP theorem. It states that in case of network partitioning (P) in a distributed computer system, one has to choose between availability (A) and consistency (C) (as per the CAP theorem), but else (E), even when the system is running normally in the absence of partitions, one has to choose between latency (L) and loss of consistency (C).Overview[edit]TheCAP theoremcan be phrased as "PAC", theimpossibility theoremthat nodistributed data storecan be both consistent and available in executions that contains partitions. This can be proved by examining latency: if a system ensures consistency, then operation latencies grow with message delays, and hence operations cannot terminate eventually if the network is partitioned, i.e. the system cannot ensure availability.[1]In the absence of partitions, both consistency and availability can be satisfied.[2]PACELC therefore goes further and examines how the system replicates data. Specifically, in the absence of partitions, an additionaltrade-off(ELC) exists between latency and consistency.[3]If the store is atomically consistent, then the sum of the read and write delay is at least the message delay. In practice, most systems rely on explicit acknowledgments rather than timed delays to ensure delivery, requiring a full network round trip and therefore message delay on both reads and writes to ensure consistency.[1]In low latency systems, in contrast, consistency is relaxed in order to reduce latency.[2]There are four configurations or tradeoffs in the PACELC space:PA/EL - prioritize availability and latency over consistencyPA/EC - when there is a partition, choose availability; else, choose consistencyPC/EL - when there is a partition, choose consistency; else, choose latencyPC/EC - choose consistency at all timesPC/EC and PA/EL provide natural cognitive models for an application developer. A PC/EC system provides a firm guarantee of atomic consistency, as in ACID, while PA/EL provides high availability and low latency with a more complex consistency model. In contrast, PA/EC and PC/EL systems only make conditional guarantees of consistency. The developer still has to write code to handle the cases where the guarantee is not upheld. PA/EC systems are rare outside of the in-memory data grid industry, where systems are localized to geographic regions and the latency vs. consistency tradeoff is not significant.[4]PC/EL is even more tricky to understand. PC does not indicate that the system is fully consistent; rather it indicates that the system does not reduce consistency beyond the baseline consistency level when a network partition occurs—instead, it reduces availability.[3]History[edit]The PACELC theorem was first described byDaniel AbadifromYale Universityin 2010 in a blog post,[2]which he later clarified in a paper in 2012.[3]The purpose of PACELC is to address his thesis that "Ignoring the consistency/latency trade-off of replicated systems is a major oversight [in CAP], as it is present at all times during system operation, whereas CAP is only relevant in the arguably rare case of a network partition." The PACELC theorem was proved formally in 2018 in a SIGACT News article.[1]Database PACELC ratings[edit][3]Original database PACELC ratings are from.[5]Subsequent updates contributed by wikipedia community.The default versions ofAmazon's early (internal) Dynamo,Cassandra,Riak, andCosmos DBare PA/EL systems: if a partition occurs, they give up consistency for availability, and under normal operation they give up consistency for lower latency.Fully ACID systems such asVoltDB/H-Store, Megastore,MySQL Cluster, andPostgreSQLare PC/EC: they refuse to give up consistency, and will pay the availability and latency costs to achieve it.Bigtableand related systems such asHBaseare also PC/EC.Amazon DynamoDB (launched January 2012) is quite different from theearly (Amazon internal) Dynamowhich was considered for the PACELC paper.[5]DynamoDB follows a strong leader model, where every write is strictly serialized (and conditional writes carry no penalty) and supports read-after-write consistency. This guarantee does not apply to "Global Tables[6]" across regions. The DynamoDB SDKs use eventually consistent reads by default (improved availability and throughput), but when a consistent read is requested the service will return either a current view to the item or an error.Couchbase provides a range of consistency and availability options during a partition, and equally a range of latency and consistency options with no partition. Unlike most other databases, Couchbase doesn't have a single API set nor does it scale/replicate all data services homogeneously. For writes, Couchbase favors Consistency over Availability making it formally CP, but on read there is more user-controlled variability depending on index replication, desired consistency level and type of access (single document lookup vs range scan vs full-text search, etc.). On top of that, there is then further variability depending on cross-datacenter-replication (XDCR) which takes multiple CP clusters and connects them with asynchronous replication and Couchbase Lite which is an embedded database and creates a fully multi-master (with revision tracking) distributed topology.Cosmos DBsupports five tunable consistency levels that allow for tradeoffs between C/A during P, and L/C during E.Cosmos DBnever violates the specified consistency level, so it's formally CP.MongoDBcan be classified as a PA/EC system. In the baseline case, the system guarantees reads and writes to be consistent.PNUTS is a PC/EL system.Hazelcast IMDG and indeed most in-memory data grids are an implementation of a PA/EC system; Hazelcast can be configured to be EL rather than EC.[7]Concurrency primitives (Lock, AtomicReference, CountDownLatch, etc.) can be either PC/EC or PA/EC.[8]FaunaDB implements Calvin, a transaction protocol created by Dr. Daniel Abadi, the author[3]of the PACELC theorem, and offers users adjustable controls for LC tradeoff. It is PC/EC for strictly serializable transactions, and EL for serializable reads.DDBSP+AP+CE+LE+CAerospike[9]paid onlyoptionalBigtable/HBaseCassandra[a][a]Cosmos DB[b]CouchbaseDynamo[a]DynamoDBFaunaDB[11]Hazelcast IMDG[7][8]MegastoreMongoDBMySQL ClusterPNUTSPostgreSQLRiak[a]SpiceDB[12]VoltDB/H-StoreSee also[edit]CAP theoremConsistency modelFallacies of distributed computingLambda architecture(solution)Paxos (computer science)Project management triangleRaft (algorithm)TrilemmaNotes[edit]^abcdDynamo, Cassandra, and Riak have user-adjustable settings to control the LC tradeoff.[5]^Cosmos DB has five selectable consistency levels to control the LC tradeoff.[10]References[edit]^abcGolab, Wojciech (2018)."Proving PACELC".ACM SIGACT News.49(1): 73–81.doi:10.1145/3197406.3197420.S2CID3989621.^abcAbadi, Daniel J. (2010-04-23)."DBMS Musings: Problems with CAP, and Yahoo's little known NoSQL system". Retrieved2016-09-11.^abcdeAbadi, Daniel J."Consistency Tradeoffs in Modern Distributed Database System Design"(PDF). Yale University.^Abadi, Daniel (15 July 2019)."The dangers of conditional consistency guarantees".DBMS Musings. Retrieved29 August2024.^abcAbadi, Daniel J.; Murdopo, Arinto (2012-04-17)."Consistency Tradeoffs in Modern Distributed Database System Design". Retrieved2022-07-18.^"Global tables - multi-Region replication for DynamoDB".AWS Documentation. Retrieved4 January2023.^abAbadi, Daniel (2017-10-08)."DBMS Musings: Hazelcast and the Mythical PA/EC System".DBMS Musings. Retrieved2017-10-20.^ab"Hazelcast IMDG Reference Manual".docs.hazelcast.org. Retrieved2020-09-17.^Porter, Kevin (29 March 2023)."Where does aerospike fall in PACELC?".Aerospike Community Forum. Retrieved30 March2023.^"Consistency Levels in Azure Cosmos DB". Retrieved2021-06-21.^Abadi, Daniel (2018-09-21)."DBMS Musings: NewSQL database systems are failing to guarantee consistency, and I blame Spanner".DBMS Musings. Retrieved2019-02-23.^Zelinskie, Jimmy (2024-04-23)."SpiceDB Concepts: Consistency".SpiceDB documentation. Retrieved2024-05-02.External links[edit]"Consistency Tradeoffs in Modern Distributed Database System Design", by Daniel J. Abadi, Yale UniversityOriginal paper that formalized PACELC"Problems with CAP, and Yahoo's little known NoSQL system", by Daniel J. Abadi, Yale University. Original blog post that first described PACELC"Proving PACELC", by Wojciech Golab, University of WaterlooFormal proof of the PACELC theoremRetrieved from "https://en.wikipedia.org/w/index.php?title=PACELC_theorem&oldid=1242936433"Categories:Distributed computingDatabase theoryHidden categories:Articles with short descriptionShort description matches WikidataThis page was last edited on 29 August 2024, at 15:36(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view