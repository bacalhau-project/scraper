URL: https://docs.bacalhau.org/setting-up/workload-onboarding/index-4

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+ KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookGenerate Synthetic Data using Sparkov Data Generation techniqueIntroductionA synthetic dataset is generated by algorithms or simulations which has similar characteristics to real-world data. Collecting real-world data, especially data that contains sensitive user data like credit card information, is not possible due to security and privacy concerns. If a data scientist needs to train a model to detect credit fraud, they can use synthetically generated data instead of using real data without compromising the privacy of users.The advantage of using Bacalhau is that you can generate terabytes of synthetic data without having to install any dependencies or store the data locally.In this example, we will learn how to run Bacalhau on a synthetic dataset. We will generate synthetic credit card transaction data using the Sparkov program and store the results in IPFS.PrerequisiteTo get started, you need to install the Bacalhau client, see more informationhere1. Running Sparkov Locally​To run Sparkov locally, you'll need to clone the repo and install dependencies:Copygitclonehttps://github.com/js-ts/Sparkov_Data_Generation/pip3install-rSparkov_Data_Generation/requirements.txtGo to theSparkov_Data_Generationdirectory:CopycdSparkov_Data_GenerationCreate a temporary directory (outputs) to store the outputs:Copymkdir../outputs2. Running the scriptCopypython3datagen.py-n1000-o../outputs"01-01-2022""10-01-2022"The command above executes the Python scriptdatagen.py, passing the following arguments to it:-n 1000: Number of customers to generate-o ../outputs: path to store the outputs"01-01-2022": Start date"10-01-2022": End dateThus, this command uses a Python script to generate synthetic credit card transaction data for the period from01-01-2022to10-01-2022and saves the results in the../outputsdirectory.To see the full list of options, use:Copypythondatagen.py-h3. Containerize Script using DockerTo build your own docker container, create aDockerfile, which contains instructions to build your image:CopyFROMpython:3.8RUNapt update && apt install gitRUNgit clone https://github.com/js-ts/Sparkov_Data_Generation/WORKDIR/Sparkov_Data_Generation/RUNpip3 install -r requirements.txtThese commands specify how the image will be built, and what extra requirements will be included. We usepython:3.8as the base image, installgit, clone theSparkov_Data_Generationrepository from GitHub, set the working directory inside the container to/Sparkov_Data_Generation/, and install Python dependencies listed in therequirements.txtfile."See more information on how to containerize your script/apphereBuild the containerWe will rundocker buildcommand to build the container:Copydocker build -t <hub-user>/<repo-name>:<tag> .Before running the command replace:hub-userwith your docker hub username. If you don’t have a docker hub accountfollow these instructions to create docker account, and use the username of the account you createdrepo-namewith the name of the container, you can name it anything you wanttagthis is not required but you can use thelatesttagIn our case:Copydockerbuild-tjsacex/sparkov-data-generation.Push the containerNext, upload the image to the registry. This can be done by using the Docker hub username, repo name or tag.Copydockerpush<hub-user>/<repo-name>:<tag>In our case:Copydockerpushjsacex/sparkov-data-generationAfter the repo image has been pushed to Docker Hub, we can now use the container for running on Bacalhau4. Running a Bacalhau JobNow we're ready to run a Bacalhau job:CopyexportJOB_ID=$(bacalhaudockerrun\--id-only\--wait\jsacex/sparkov-data-generation\--python3datagen.py-n1000-o../outputs"01-01-2022""10-01-2022")Structure of the command:bacalhau docker run: call to Bacalhaujsacex/sparkov-data-generation: the name of the docker image we are using-- python3 datagen.py -n 1000 -o ../outputs "01-01-2022" "10-01-2022": the arguments passed into the container, specifying the execution of the Python scriptdatagen.pywith specific parameters, such as the amount of data, output path, and time range.When a job is submitted, Bacalhau prints out the relatedjob_id. We store that in an environment variable so that we can reuse it later on:5. Checking the State of your JobsJob status: You can check the status of the job usingbacalhau job list.Copybacalhaujoblist--id-filter${JOB_ID}When it saysPublishedorCompleted, that means the job is done, and we can get the results.Job information: You can find out more information about your job by usingbacalhau job describe.Copybacalhaujobdescribe${JOB_ID}Job download: You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (results) and downloaded our job output to be stored in that directory.Copyrm-rfresults&&mkdir-presultsbacalhaujobget${JOB_ID}--output-dirresults6. Viewing your Job OutputTo view the contents of the current directory, run the following command:Copylsresults/outputsSupportIf you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousRunning Rust programs as WebAssembly (WASM)NextData IngestionLast updated2 months agoOn this pageWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.IntroductionPrerequisite1. Running Sparkov Locally​2. Running the script3. Containerize Script using DockerBuild the containerPush the container4. Running a Bacalhau JobStructure of the command:5. Checking the State of your Jobs6. Viewing your Job OutputSupport