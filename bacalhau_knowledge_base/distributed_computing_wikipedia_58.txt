URL: https://en.wikipedia.org/wiki/Message_passing

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Overview2Synchronous versus asynchronous message passingToggle Synchronous versus asynchronous message passing subsection2.1Synchronous message passing2.2Asynchronous message passing2.3Hybrids3Distributed objects4Mathematical models5Examples6See also7References8Further reading9External linksToggle the table of contentsMessage passing19 languagesБеларуская (тарашкевіца)CatalàČeštinaDeutschEspañolفارسیFrançais한국어Italianoעברית日本語Norsk bokmålPortuguêsРусскийSimple EnglishУкраїнськаTiếng Việt粵語中文Edit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaTechnique for running a program on a computer without directly calling itThis article is about the computer science concept. For other uses, seeMessage passing (disambiguation).Incomputer science,message passingis a technique for invoking behavior (i.e., running aprogram) on acomputer. The invoking program sends a message to aprocess(which may be anactororobject) and relies on that process and its supporting infrastructure to then select and run some appropriate code. Message passing differs from conventional programming where a process,subroutine, or function is directly invoked by name. Message passing is key to somemodels of concurrencyandobject-oriented programming.Message passing is ubiquitous in modern computersoftware.[citation needed]It is used as a way for the objects that make up a program to work with each other and as a means for objects and systems running on different computers (e.g., theInternet) to interact. Message passing may be implemented by various mechanisms, includingchannels.Overview[edit]Message passing is a technique for invoking behavior (i.e., running a program) on a computer. In contrast to the traditional technique of calling a program by name, message passing uses anobject modelto distinguish the general function from the specific implementations. The invoking program sends a message and relies on the object to select and execute the appropriate code. The justifications for using an intermediate layer essentially falls into two categories: encapsulation and distribution.Encapsulationis the idea that software objects should be able to invoke services on other objects without knowing or caring about how those services are implemented. Encapsulation can reduce the amount of coding logic and make systems more maintainable. E.g., rather than having IF-THEN statements that determine which subroutine or function to call a developer can just send a message to the object and the object will select the appropriate code based on its type.One of the first examples of how this can be used was in the domain of computer graphics. There are various complexities involved in manipulating graphic objects. For example, simply using the right formula to compute the area of an enclosed shape will vary depending on if the shape is a triangle, rectangle, ellipse, or circle. In traditional computer programming this would result in long IF-THEN statements testing what sort of object the shape was and calling the appropriate code. The object-oriented way to handle this is to define a class calledShapewith subclasses such asRectangleandEllipse(which in turn have subclassesSquareandCircle) and then to simply send a message to anyShapeasking it to compute its area. EachShapeobject will then invoke the subclass's method with the formula appropriate for that kind of object.[1]Distributed message passing provides developers with a layer of the architecture that provides common services to build systems made up of sub-systems that run on disparate computers in different locations and at different times. When a distributed object is sending a message, the messaging layer can take care of issues such as:Finding the process using different operating systems and programming languages, at different locations from where the message originated.Saving the message on a queue if the appropriate object to handle the message is not currently running and then invoking the message when the object is available. Also, storing the result if needed until the sending object is ready to receive it.Controlling various transactional requirements for distributed transactions, e.g.atomicity,consistency,isolation,durability(ACID) testing the data.[2]Synchronous versus asynchronous message passing[edit]This sectionrelies largely or entirely on asingle source.Relevant discussion may be found on thetalk page. Please helpimprove this articlebyintroducing  citations to additional sources.Find sources:"Message passing"–news·newspapers·books·scholar·JSTOR(February 2015)Synchronous message passing[edit]Synchronous message passing occurs between objects that are running at the same time. It is used by object-oriented programming languages such asJavaandSmalltalk.Synchronous messaging is analogous to a synchronous function call; just as the function caller waits until the function completes, the sending process waits until the receiving process completes. This can make synchronous communication unworkable for some applications. For example, large, distributed systems may not perform well enough to be usable. Such large, distributed systems may need to operate while some of their subsystems are down for maintenance, etc.Imagine a busy business office having 100 desktop computers that send emails to each other using synchronous message passing exclusively. One worker turning off their computer can cause the other 99 computers to freeze until the worker turns their computer back on to process a single email.Asynchronous message passing[edit]With asynchronous message passing the receiving object can be down or busy when the requesting object sends the message. Continuing the function call analogy, it is like a function call that returns immediately, without waiting for the called function to complete. Messages are sent to a queue where they are stored until the receiving process requests them. The receiving process processes its messages and sends results to a queue for pickup by the original process (or some designated next process).[3]Asynchronous messaging requires additional capabilities for storing and retransmitting data for systems that may not run concurrently, and are generally handled by an intermediary level of software (often calledmiddleware); a common type being Message-oriented middleware (MOM).The buffer required inasynchronous communicationcan cause problems when it is full. A decision has to be made whether to block the sender or whether to discard future messages. A blocked sender may lead todeadlock. If messages are dropped, communication is no longer reliable.Hybrids[edit]Synchronous communication can be built on top of asynchronous communication by using aSynchronizer. For example, the α-Synchronizer works by ensuring that the sender always waits for an acknowledgement message from the receiver. The sender only sends the next message after the acknowledgement has been received. On the other hand, asynchronous communication can also be built on top of synchronous communication. For example, modernmicrokernelsgenerally only provide asynchronous messagingprimitive[citation needed]and asynchronous messaging can be implemented on top by usinghelper threads.Distributed objects[edit]Main article:Distributed objectMessage-passing systems use either distributed or local objects. With distributed objects the sender and receiver may be on different computers, running different operating systems, using different programming languages, etc. In this case the bus layer takes care of details about converting data from one system to another, sending and receiving data across the network, etc. TheRemote Procedure Call(RPC) protocol inUnixwas an early example of this. With this type of message passing it is not a requirement that sender nor receiver use object-oriented programming. Procedural language systems can be wrapped and treated as large grained objects capable of sending and receiving messages.[4]Examples of systems that support distributed objects are:Emerald,ONC RPC,CORBA,Java RMI,DCOM,SOAP,.NET Remoting,CTOS,QNX Neutrino RTOS,OpenBinderandD-Bus. Distributed object systems have been called "shared nothing" systems because the message passing abstraction hides underlying state changes that may be used in the implementation of sending messages.This sectiondoes notciteanysources.Please helpimprove this sectionbyadding citations to reliable sources. Unsourced material may be challenged andremoved.(February 2015)(Learn how and when to remove this message)This sectionneeds attention from an expert in Computer science. The specific problem is:Section mixes between local and distributed message-passing, eg. to imply thatlocalmessage passing cannot be performed with pass-by-reference and has to include entire objects, which is actually only partially correct fordistributedsystems.WikiProject Computer sciencemay be able to help recruit an expert.(April 2015)Distributed, or asynchronous, message-passing has additional overhead compared to calling a procedure. In message-passing, arguments must be copied to the new message. Some arguments can contain megabytes of data, all of which must be copied and transmitted to the receiving object.Traditionalprocedure callsdiffer from message-passing in terms of memory usage,transfer timeand locality. Arguments are passed to the receiver typically bygeneral-purpose registersrequiring no additional storage nor transfer time, or in aparameterlist containing the arguments' addresses (a few bits). Address-passing is not possible for distributed systems since the systems use separate address spaces.Webbrowsersandweb serversare examples of processes that communicate by message-passing. AURLis an example of referencing a resource without exposing process internals.Asubroutinecall ormethodinvocation will not exit until the invoked computation has terminated. Asynchronous message-passing, by contrast, can result in a response arriving a significant time after the request message was sent.A message-handler will, in general, process[5]messages from more than one sender. This means its state can change for reasons unrelated to the behavior of a single sender or client process. This is in contrast to the typical behavior of an object upon which methods are being invoked: the latter is expected to remain in the same state between method invocations. In other words, the message-handler behaves analogously to avolatile object.Mathematical models[edit]The prominent mathematical models of message passing are theActor modelandPi calculus.[6][7]In mathematical terms a message is the single means to pass control to an object. If the object responds to the message, it has amethodfor that message.Alan Kayhas argued that message passing is more important than objects in OOP, and that objects themselves are often over-emphasized. Thelive distributed objectsprogramming model builds upon this observation; it uses the concept of adistributed data flowto characterize the behavior of a complex distributed system in terms of message patterns, using high-level, functional-style specifications.[8]Examples[edit]Actor model implementationAmorphous computingCommunicating sequential processesFlow-based programmingSOAPSee also[edit]Active messageDistributed computingEvent loopMessaging patternMessage passing in computer clustersMessage Passing InterfaceParallel Virtual Machine(PVM)Programming languages that include message passing as a centric feature:AppleScriptErlangElixirHyperCard,LiveCodeGoObjective-CRust[9]ScalaSmalltalkSelfConcurrent MLReferences[edit]^Goldberg, Adele; David Robson (1989).Smalltalk-80 The Language. Addison Wesley. pp. 5–16.ISBN0-201-13688-0.^Orfali, Robert (1996).The Essential Client/Server Survival Guide. New York: Wiley Computer Publishing. pp.1–22.ISBN0-471-15325-7.^Orfali, Robert (1996).The Essential Client/Server Survival Guide. New York: Wiley Computer Publishing. pp.95–133.ISBN0-471-15325-7.^Orfali, Robert (1996).The Essential Client/Server Survival Guide. New York: Wiley Computer Publishing. pp.375–397.ISBN0-471-15325-7.^"Process of Hide messages".Message. 2022-04-13. Retrieved2022-04-12.^Milner, Robin (Jan 1993)."Elements of interaction: Turing award lecture".Communications of the ACM.36(1): 78–89.doi:10.1145/151233.151240.^Carl Hewitt; Peter Bishop; Richard Steiger (1973). "A Universal Modular Actor Formalism for Artificial Intelligence". IJCAI.{{cite journal}}:Cite journal requires|journal=(help)^Kay, Alan."prototypes vs classes was: Re: Sun's HotSpot".lists.squeakfoundation.org. Retrieved2 January2014.^"Using Message Passing to Transfer Data Between Threads - The Rust Programming Language".Rust-lang.org.Further reading[edit]Ramachandran, U.; M. Solomon; M. Vernon (1987)."Hardware support for interprocess communication".Proceedings of the 14th annual international symposium on Computer architecture. ACM Press.Dally, William."The Jellybean Machine". Retrieved7 June2013.McQuillan, John M.; David C. Walden (1975)."Some considerations for a high performance message-based interprocess communication system".Proceedings of the 1975 ACM SIGCOMM/SIGOPS workshop on Interprocess communications. ACM Press.Shimizu, Toshiyuki; Takeshi Horie; Hiroaki Ishihata (1992)."Low-latency message communication support for the AP1000".Proceedings of the 19th annual international symposium on Computer architecture. ACM Press.External links[edit]A Packet History of Message PassingvteInter-process communicationDataexchange amongthreadsincomputer programsMethodsFileMemory-mapped fileMessage passingMessage queue and mailboxNamed pipeAnonymous pipePipeSemaphoreShared memorySignalSocketsNetworkUnixProtocolsandstandardsApple eventsCOM+CORBAD-BusDDSDCEICEOpenBinderSun RPCPOSIX(various methods)SOAPRESTThriftTIPCXML-RPCSoftware librariesandframeworksD-BuslibeventSIMPLLINXRetrieved from "https://en.wikipedia.org/w/index.php?title=Message_passing&oldid=1241386434"Categories:Distributed computing architectureInter-process communicationHidden categories:CS1 errors: missing periodicalArticles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from April 2021Articles needing additional references from February 2015All articles needing additional referencesArticles with unsourced statements from April 2015Articles needing expert attention from April 2015All articles needing expert attentionComputer science articles needing expert attentionThis page was last edited on 20 August 2024, at 21:21(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view