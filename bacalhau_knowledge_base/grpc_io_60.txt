URL: https://grpc.io/docs/languages/objective-c/quickstart/

gRPCAboutMeetDocsGuidesShowcaseBlogCommunitygRPConf 2024 is happening NEXT WEEK onAug. 27th!-Register nowand get 25% off with the code GOOGLE25.DocsWhat is gRPC?IntroductionCore conceptsFAQLanguagesC# / .NETAPI (legacy)Daily builds (legacy)C++Quick startBasics tutorialAsync-API tutorialAsynchronous Callback API TutorialBest Practices for gRPC C++ API and FAQALTSAPIDartQuick startBasics tutorialAPIGoQuick startBasics tutorialALTSAPIGenerated codeJavaQuick startBasics tutorialALTSAPIGenerated codeKotlinQuick startBasics tutorialAPINodeQuick startBasics tutorialAPIObjective-CQuick startBasics tutorialOAuth2APIPHPQuick startBasics tutorialAPIDaily buildsPythonQuick startBasics tutorialALTSGenerated codeAPIDaily buildsRubyQuick startBasics tutorialAPIDaily buildsPlatformsAndroidJavaQuick startBasics tutorialAPIKotlinQuick startAPIWebQuick startBasics tutorialGuidesAuthenticationBenchmarkingCancellationCompressionCustom Backend MetricsCustom Load Balancing PoliciesCustom Name ResolutionDeadlinesDebuggingError handlingFlow ControlHealth CheckingInterceptorsKeepaliveMetadataOpenTelemetry MetricsPerformance Best PracticesReflectionRequest HedgingRetryService ConfigStatus CodesWait-for-ReadyView page sourceEdit this pageCreate child pageCreate documentation issueCreate project issueBefore you beginSystem requirementsPrerequisitesDownload the exampleInstall gRPC plugins and librariesInstall protoc compilerRun the server:Run the client:Generate client libraries and dependenciesRun the client appUpdate the gRPC serviceUpdate the client and serverUpdate the serverUpdate the clientBuild and runTroubleshootingWhat’s nextDocsLanguagesObjective-CQuick startQuick startThis guide gets you started with gRPC on the iOS platform in Objective-C with a simple working example.ContentsBefore you beginSystem requirementsPrerequisitesDownload the exampleInstall gRPC plugins and librariesInstall protoc compilerRun the server:Run the client:Generate client libraries and dependenciesRun the client appUpdate the gRPC serviceUpdate the client and serverUpdate the serverUpdate the clientBuild and runTroubleshootingWhat’s nextQuick startThis guide gets you started with gRPC on the iOS platform in Objective-C with a simple working example.Before you beginSystem requirementsmacOS version 10.11 (El Capitan) or higheriOS version 7.0 or higherPrerequisitesCocoaPods version 1.0 or higherCheck the status and version of CocoaPods on your system:$ pod --versionIf CocoaPods is not installed, follow theCocoaPods install
instructions.Xcode version 7.2 or higherCheck your Xcode version by running Xcode from Lauchpad, then selectXcode > About Xcodein the menu.Make sure the command line developer tools are installed:$ xcode-select --installHomebrewautoconf,automake,libtool,pkg-config$ brew install autoconf automake libtool pkg-configDownload the exampleYou’ll need a local copy of the sample app source code to work through this
Quickstart. Copy the source code from GitHubrepository:$ git clone --recursive -b v1.66.0 --depth1--shallow-submodules https://github.com/grpc/grpcInstall gRPC plugins and libraries$cdgrpc$ make$[sudo]make installInstall protoc compiler$ brew tap grpc/grpc$ brew install protobufRun the server:For this sample app, we need a gRPC server running on the local machine. gRPC
Objective-C API supports creating gRPC clients but not gRPC servers. Therefore
instead we build and run the C++ server in the same repository:$cdexamples/cpp/helloworld$ make$ ./greeter_server &Run the client:Generate client libraries and dependenciesHave CocoaPods generate and install the client library from our .proto files, as
well as installing several dependencies:$cd../../objective-c/helloworld$ pod install(This might have to compile OpenSSL, which takes around 15 minutes if Cocoapods
doesn’t have it yet on your computer’s cache.)Run the client appOpen the Xcode workspace created by CocoaPods:$ open HelloWorld.xcworkspaceThis will open the app project with Xcode. Run the app in an iOS simulator
by pressing the Run button on the top left corner of Xcode window. You can check
the calling code inmain.mand see the results in Xcode’s console.The code sends aHLWHelloRequestcontaining the string “Objective-C” to a
local server. The server responds with aHLWHelloResponse, which contains a
string “Hello Objective-C” that is then output to the console.Congratulations! You’ve just run a client-server application with gRPC.Update the gRPC serviceNow let’s look at how to update the application with an extra method on the
server for the client to call. Our gRPC service is defined using Protocol
Buffers; you can find out lots more about how to define a service in a.protofile in Protocol Bufferswebsite. For now all you
need to know is that both the server and the client “stub” have aSayHelloRPC method that takes aHelloRequestparameter from the client and returns aHelloResponsefrom the server, and that this method is defined like this:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Let’s update this so that theGreeterservice has two methods. Editexamples/protos/helloworld.protoand update it with a newSayHelloAgainmethod, with the same request and response types:// The greeting service definition.serviceGreeter {// Sends a greetingrpcSayHello (HelloRequest)returns(HelloReply) {}// Sends another greetingrpcSayHelloAgain (HelloRequest)returns(HelloReply) {}}// The request message containing the user's name.messageHelloRequest{stringname=1;}// The response message containing the greetingsmessageHelloReply{stringmessage=1;}Remember to save the file!Update the client and serverWe now have a new gRPC service definition, but we still need to implement and
call the new method in the human-written parts of our example application.Update the serverAs you remember, gRPC doesn’t provide a server API for Objective-C. Instead, we
need to update the C++ sample server. Openexamples/cpp/helloworld/greeter_server.cc. Implement the new method like this:classGreeterServiceImplfinal:publicGreeter::Service {StatusSayHello(ServerContext*context,constHelloRequest*request,HelloReply*reply)override{std::string prefix("Hello ");reply->set_message(prefix+request->name());returnStatus::OK;}StatusSayHelloAgain(ServerContext*context,constHelloRequest*request,HelloReply*reply)override{std::string prefix("Hello again ");reply->set_message(prefix+request->name());returnStatus::OK;}};Update the clientEdit the main function inexamples/objective-c/helloworld/main.mto call the new method like this:intmain(intargc,char*argv[]) {@autoreleasepool {HLWGreeter*client=[[HLWGreeter alloc]initWithHost:kHostAddress];HLWHelloRequest*request=[HLWHelloRequest message];request.name=@"Objective-C";GRPCMutableCallOptions*options=[[GRPCMutableCallOptions alloc] init];// this example does not use TLS (secure channel); use insecure channel insteadoptions.transport=GRPCDefaultTransportImplList.core_insecure;options.userAgentPrefix=@"HelloWorld/1.0";[[clientsayHelloWithMessage:requestresponseHandler:[[HLWResponseHandler alloc] init]callOptions:options] start];[[clientsayHelloAgainWithMessage:requestresponseHandler:[[HLWResponseHandler alloc] init]callOptions:options] start];returnUIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));}}Build and runFirst terminate the server process already running in the background:$ pkill greeter_serverThen in directoryexamples/cpp/helloworld, build and run the updated server
with the following commands:$ make$ ./greeter_server &Change directory toexamples/objective-c/helloworld, then clean up and
reinstall Pods for the client app with the following commands:$ rm -Rf Pods$ rm Podfile.lock$ rm -Rf HelloWorld.xcworkspace$ pod installThis regenerates files inPods/HelloWorldbased on the new proto file we wrote
above. Open the client Xcode project in Xcode:$ open HelloWorld.xcworkspaceand run the client app. If you look at the console messages, You’ll see two RPC calls,
one to SayHello and one to SayHelloAgain.TroubleshootingWhen installing CocoaPods, erroractivesupport requires Ruby version >= 2.2.2Install an older version ofactivesupport, then install CocoaPods:$[sudo]gem install activesupport -v 4.2.6$[sudo]gem install cocoapodsWhen installing dependencies with CocoaPods, errorUnable to find a specification for !ProtoCompiler-gRPCPluginUpdate the local clone of spec repo by runningpod repo updateCompiler error when compilingobjective_c_plugin.ccRemovingprotobufpackage with Homebrew before building gRPC may solve this
problem. We are working on a more elegant fix.When building HellowWorld, errorld: unknown option: --no-as-neededThis problem is due to linkerldin Apple LLVM not supporting the--no-as-neededoption. We are working on a fix right now and will merge the
fix very soon.When building grpc, errorcannot find install-sh install.sh or shtoolRemove the gRPC directory, clone a new one and try again. It is likely that
some auto generated files are corrupt; remove and rebuild may solve the
problem.When building grpc, errorCan't exec "aclocal"The packageautomakeis missing. Installautomakeshould solve this problem.When building grpc, errorpossibly undefined macro: AC_PROG_LIBTOOLThe packagelibtoolis missing. Installlibtoolshould solve this problem.When building grpc, errorcannot find install-sh, install.sh, or shtoolSome of the auto generated files are corrupt. Remove the entire gRPC
directory, clone from GitHub, and build again.Cannot findprotocwhen building HelloWorldRunbrew install protobufto get theprotoccompiler.What’s nextLearn how gRPC works inIntroduction to gRPCandCore concepts.Work through theBasics tutorial.Explore theAPI reference.Last modified February 16, 2023:Update Protocol Buffers documentation URL (#1092) (852a744)View page sourceEdit this pageCreate child pageCreate documentation issueCreate project issue© 2024 gRPC AuthorsTerms|Privacy|Trademarks|License|About