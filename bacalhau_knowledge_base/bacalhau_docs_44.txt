URL: https://docs.bacalhau.org/setting-up/workload-onboarding/index-3

Bacalhau Docsv.1.4.0v.1.3.0v.1.3.1v.1.3.2v.1.4.0GitHubSlackContactMoreGitHubSlackContactAsk or SearchCtrl+â€†KWelcomeGetting StartedHow Bacalhau WorksInstallationCreate NetworkHardware SetupContainer OnboardingDocker WorkloadsWebAssembly (Wasm) WorkloadsSetting UpRunning NodesNode OnboardingGPU InstallationJob selection policyAccess ManagementNode persistenceConnect StorageConfiguration ManagementConfiguring Transport Level SecurityLimits and TimeoutsTest Network LocallyBacalhau WebUIWorkload OnboardingContainerDocker Workload OnboardingWebAssembly (Wasm) WorkloadsBacalhau Docker ImageHow To Work With Custom Containers in BacalhauPythonBuilding and Running Custom Python ContainerRunning Pandas on BacalhauRunning a Python ScriptRunning Jupyter Notebooks on BacalhauScripting Bacalhau with PythonR (language)Building and Running your Custom R Containers on BacalhauRunning a Simple R Script on BacalhauRun CUDA programs on BacalhauRunning a Prolog ScriptReading Data from Multiple S3 Buckets using BacalhauRunning Rust programs as WebAssembly (WASM)Generate Synthetic Data using Sparkov Data Generation techniqueData IngestionCopy Data from URL to Public StoragePinning DataRunning a Job over S3 dataNetworking InstructionsAccessing the Internet from JobsUtilizing NATS.io within BacalhauGPU Workloads SetupAutomatic Update CheckingMarketplace DeploymentsGoogle Cloud MarketplaceGuidesWrite a config.yamlWrite a SpecConfigExamplesData EngineeringUsing Bacalhau with DuckDBEthereum Blockchain Analysis with Ethereum-ETL and BacalhauConvert CSV To Parquet Or AvroSimple Image ProcessingOceanography - Data ConversionVideo ProcessingModel InferenceEasyOCR (Optical Character Recognition) on BacalhauRunning Inference on Dolly 2.0 Model with Hugging FaceSpeech Recognition using WhisperStable Diffusion on a GPUStable Diffusion on a CPUObject Detection with YOLOv5 on BacalhauGenerate Realistic Images using StyleGAN3 and BacalhauStable Diffusion Checkpoint InferenceRunning Inference on a Model stored on S3Model TrainingTraining Pytorch Model with BacalhauTraining Tensorflow ModelStable Diffusion Dreambooth (Finetuning)Molecular DynamicsRunning BIDS Apps on BacalhauCoresets On BacalhauGenomics Data GenerationGromacs for AnalysisMolecular Simulation with OpenMM and BacalhauReferencesJobs GuideJob SpecificationJob TypesTask SpecificationEnginesDocker Engine SpecificationWebAssembly (WASM) Engine SpecificationPublishersIPFS Publisher SpecificationLocal Publisher SpecificationS3 Publisher SpecificationSourcesIPFS Source SpecificationLocal Source SpecificationS3 Source SpecificationURL Source SpecificationNetwork SpecificationInput Source SpecificationResources SpecificationResultPath SpecificationConstraint SpecificationLabels SpecificationMeta SpecificationJob TemplatesQueuing & TimeoutsJob QueuingTimeouts SpecificationJob ResultsStateCLI GuideSingle CLI commandsAgentAgent OverviewAgent AliveAgent NodeAgent VersionConfigConfig OverviewConfig Auto-ResourcesConfig DefaultConfig ListConfig SetJobJob OverviewJob DescribeJob ExecJob ExecutionsJob HistoryJob ListJob LogsJob RunJob StopNodeNode OverviewNode ApproveNode DeleteNode ListNode DescribeNode RejectCLI Commands OverviewCommand MigrationAPI GuideBacalhau API overviewBest PracticesAgent EndpointOrchestrator EndpointMigration APINode ManagementAuthentication & AuthorizationDatabase IntegrationDebuggingDebugging Failed JobsDebugging LocallyOpen Telemetry in BacalhauRunning locally in 'devstack'Setting up Dev EnvironmentHelp & FAQBacalhau FAQsRelease NotesGlossaryIntegrationsApache Airflow Provider for BacalhauLilypadBacalhau Python SDKObservability for WebAssembly WorkloadsCommunitySocial MediaStyle GuideWays to ContributePowered by GitBookRunning Rust programs as WebAssembly (WASM)Bacalhau supports running jobs as aWebAssembly (WASM)program. This example demonstrates how to compile aRustproject into WebAssembly and run the program on Bacalhau.PrerequisitesTo get started, you need to install the Bacalhau client, see more informationhere.A working Rust installation with thewasm32-wasitarget. For example, you can userustupto install Rust and configure it to build WASM targets. For those using the notebook, these are installed in hidden cells below.1. Develop a Rust Program LocallyWe can usecargo(which will have been installed byrustup) to start a new project (my-program) and compile it:Copycargoinitmy-programWe can then write a Rust program. Rust programs that run on Bacalhau can read and write files, access a simple clock, and make use of pseudo-random numbers. They cannot memory-map files or run code on multiple threads.The program below will use the Rustimageproccrate to resize an image through seam carving, based onan example from their repository.Copy// ./my-program/src/main.rsuseimage::{open,GrayImage,Luma,Pixel};useimageproc::definitions::Clamp;useimageproc::gradients::sobel_gradient_map;useimageproc::map::map_colors;useimageproc::seam_carving::*;usestd::path::Path;fnmain() {letinput_path="inputs/image0.JPG";letoutput_dir="outputs/";letinput_path=Path::new(&input_path);letoutput_dir=Path::new(&output_dir);// Load image and convert to grayscaleletinput_image=open(input_path).expect(&format!("Could not load image at {:?}", input_path)).to_rgb8();// Save original image in output directoryletoriginal_path=output_dir.join("original.png");input_image.save(&original_path).unwrap();// We will reduce the image width by this amount, removing one seam at a time.letseams_to_remove:u32=input_image.width()/6;letmutshrunk=input_image.clone();letmutseams=Vec::new();// Record each removed seam so that we can draw them on the original image later.foriin0..seams_to_remove {ifi%100==0{println!("Removing seam {}", i);}letvertical_seam=find_vertical_seam(&shrunk);shrunk=remove_vertical_seam(&mutshrunk,&vertical_seam);seams.push(vertical_seam);}// Draw the seams on the original image.letgray_image=map_colors(&input_image,|p|p.to_luma());letannotated=draw_vertical_seams(&gray_image,&seams);letannotated_path=output_dir.join("annotated.png");annotated.save(&annotated_path).unwrap();// Draw the seams on the gradient magnitude image.letgradients=sobel_gradient_map(&input_image,|p|{letmean=(p[0]+p[1]+p[2])/3;Luma([meanasu32])});letclamped_gradients:GrayImage=map_colors(&gradients,|p|Luma([Clamp::clamp(p[0])]));letannotated_gradients=draw_vertical_seams(&clamped_gradients,&seams);letgradients_path=output_dir.join("gradients.png");clamped_gradients.save(&gradients_path).unwrap();letannotated_gradients_path=output_dir.join("annotated_gradients.png");annotated_gradients.save(&annotated_gradients_path).unwrap();// Save the shrunk image.letshrunk_path=output_dir.join("shrunk.png");shrunk.save(&shrunk_path).unwrap();}In the main functionmain()an image is loaded, the original is saved, and then a loop is performed to reduce the width of the image by removing "seams." The results of the process are saved, including the original image with drawn seams and a gradient image with highlighted seams.We also need to install theimageprocandimagelibraries and switch off the default features to make sure that multi-threading is disabled (default-features = false). After disabling the default features, you need to explicitly specify only the features that you need:Copy// ./my-program/Cargo.toml[package]name="my-program"version="0.1.0"edition="2021"[dependencies.image]version="0.24.4"default-features=falsefeatures=["png","jpeg","bmp"][dependencies.imageproc]version="0.23.0"default-features=falseWe can now build the Rust program into a WASM blob usingcargo:Copycdmy-program&&cargobuild--targetwasm32-wasi--releaseThis command navigates to themy-programdirectory and builds the project using Cargo with the target set towasm32-wasiin release mode.This will generate a WASM file at./my-program/target/wasm32-wasi/release/my-program.wasmwhich can now be run on Bacalhau.2. Running WASM on BacalhauNow that we have a WASM binary, we can upload it to IPFS and use it as input to a Bacalhau job.The-iflag allows specifying a URI to be mounted as a named volume in the job, which can be an IPFS CID, HTTP URL, or S3 object.For this example, we are using an image of the Statue of Liberty that has been pinned to a storage facility.CopyexportJOB_ID=$(bacalhauwasmrun\./my-program/target/wasm32-wasi/release/my-program.wasm_start\--id-only\-iipfs://bafybeifdpl6dw7atz6uealwjdklolvxrocavceorhb3eoq6y53cbtitbeu:/inputs)Structure of the Commandsbacalhau wasm run: call to Bacalhau./my-program/target/wasm32-wasi/release/my-program.wasm: the path to the WASM file that will be executed_start: the entry point of the WASM program, where its execution begins--id-only: this flag indicates that only the identifier of the executed job should be returned-i ipfs://bafybeifdpl6dw7atz6uealwjdklolvxrocavceorhb3eoq6y53cbtitbeu:/inputs: input data volume that will be accessible within the job at the specified destination pathWhen a job is submitted, Bacalhau prints out the related job_id. We store that in an environment variable so that we can reuse it later on:You can download your job results directly by usingbacalhau job get. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory (wasm_results) and downloaded our job output to be stored in that directory.We can now get the results.Copyrm-rfwasm_results&&mkdir-pwasm_resultsbacalhaujobget${JOB_ID}--output-dirwasm_resultsViewing Job OutputWhen we view the files, we can see the original image, the resulting shrunk image, and the seams that were removed.Copy./wasm_results/outputs/original.pngCopy./wasm_results/outputs/annotated_gradients.pngCopy./wasm_results/outputs/shrunk.pngSupportIf you have questions or need support or guidance, please reach out to theBacalhau team via Slack(#generalchannel).PreviousReading Data from Multiple S3 Buckets using BacalhauNextGenerate Synthetic Data using Sparkov Data Generation techniqueLast updated2 months agoOn this pagePrerequisites1. Develop a Rust Program Locally2. Running WASM on BacalhauStructure of the CommandsViewing Job OutputSupportWas this helpful?Edit on GitHubExport as PDFGet SupportExpansoSupportUse CasesDistributed ETLEdge MLDistributed Data WarehousingFlett ManagementAbout UsWho we areWhat we valueNews & BlogBlogNewsExpanso (2024). All Rights Reserved.pngpngpng