Source: bacalhau_docs
URL: https://docs.bacalhau.org/examples/model-training/training-pytorch-model-with-bacalhau

Training Pytorch Model with Bacalhau
Introduction
In this example tutorial, we will show you how to train a PyTorch RNN MNIST neural network model with Bacalhau. PyTorch is a framework developed by Facebook AI Research for deep learning, featuring both beginner-friendly debugging tools and a high level of customization for advanced users, with researchers and practitioners using it across companies like Facebook and Tesla. Applications include computer vision, natural language processing, cryptography, and more.
TL;DR
Prerequisite
To get started, you need to install the Bacalhau client, see more information [here](/getting-started/installation)
Training the Model Locally
To train our model locally, we will start by cloning the Pytorch examples [repo](https://github.com/pytorch/examples):
Install the following:
Next, we run the command below to begin the training of the mnist_rnn
model. We added the --save-model
flag to save the model
Next, the downloaded MNIST dataset is saved in the data
folder.
Uploading Dataset to IPFS
Now that we have downloaded our dataset, the next step is to upload it to IPFS. The simplest way to upload the data to IPFS is to use a third-party service to "pin" data to the IPFS network, to ensure that the data exists and is available. To do this you need an account with a pinning service like [Pinata](https://pinata.cloud/) or [NFT.Storage](https://nft.storage/). Once registered you can use their UI or API or SDKs to upload files.
Once you have uploaded your data, you'll be finished copying the CID. [Here](https://gateway.pinata.cloud/ipfs/QmdeQjz1HQQdT9wT2NHX86Le9X6X6ySGxp8dfRUKPtgziw/?filename=data) is the dataset we have uploaded.
Running a Bacalhau Job
After the repo image has been pushed to Docker Hub, we can now use the container for running on Bacalhau. To submit a job, run the following Bacalhau command:
Structure of the command
export JOB_ID=$( ... )
exports the job ID as environment variablebacalhau docker run
: call to bacalhauThe
--gpu 1
flag is set to specify hardware requirements, a GPU is needed to run such a jobpytorch/pytorch
: Using the official pytorch Docker imageThe
-i ipfs://QmdeQjz1HQQd.....
: flag is used to mount the uploaded datasetThe
-i https://raw.githubusercontent.com/py..........
: flag is used to mount our training script. We will use the URL to this[Pytorch example](https://github.com/pytorch/examples/blob/main/mnist_rnn/main.py)-w /outputs:
Our working directory is /outputs. This is the folder where we will save the model as it will automatically get uploaded to IPFS as outputspython ../inputs/main.py --save-model
: URL script gets mounted to the/inputs
folder in the container
When a job is submitted, Bacalhau prints out the related job_id
. We store that in an environment variable so that we can reuse it later on.
Declarative job description
The same job can be presented in the [declarative](/references/jobs/job) format. In this case, the description will look like this:
The job description should be saved in .yaml
format, e.g. torch.yaml
, and then run with the command:
Checking the State of your Jobs
Job status
You can check the status of the job using bacalhau job list
.
When it says Completed
, that means the job is done, and we can get the results.
Job information
You can find out more information about your job by using bacalhau job describe
.
Job download
You can download your job results directly by using bacalhau job get
. Alternatively, you can choose to create a directory to store your results. In the command below, we created a directory and downloaded our job output to be stored in that directory.
After the download has finished you should see the following contents in results directory
Viewing your Job Output
Now you can find results in the results/outputs
folder. To view them, run the following command:
Last updated