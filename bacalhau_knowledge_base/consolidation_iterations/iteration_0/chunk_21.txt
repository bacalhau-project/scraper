Task: Compress the following text to approximately 100 tokens for use as an AI system prompt.
Rules:
1. Prioritize key information, concepts, and technical details.
2. Remove redundancies and verbose explanations.
3. Use concise language and technical terminology.
4. Maintain factual accuracy and important specifics.
5. Aim for 100 tokens, but do not go below this target.

Text to compress:
Source: grpc_io
URL: https://grpc.io/docs/languages/cpp/basics/

Basics tutorial
A basic tutorial introduction to gRPC in C++.
Basics tutorial
This tutorial provides a basic C++ programmer’s introduction to working with gRPC.
By walking through this example you’ll learn how to:
- Define a service in a
.proto
file. - Generate server and client code using the protocol buffer compiler.
- Use the C++ gRPC API to write a simple client and server for your service.
It assumes that you have read the [Introduction to gRPC](/docs/what-is-grpc/introduction/) and are familiar
with [protocol
buffers](https://protobuf.dev/overview). Note
that the example in this tutorial uses the proto3 version of the protocol
buffers language: you can find out more in
the [proto3 language
guide](https://protobuf.dev/programming-guides/proto3) and [C++
generated code
guide](https://protobuf.dev/reference/cpp/cpp-generated).
Why use gRPC?
Our example is a simple route mapping application that lets clients get information about features on their route, create a summary of their route, and exchange route information such as traffic updates with the server and other clients.
With gRPC we can define our service once in a.proto
file and generate clients
and servers in any of gRPC’s supported languages, which in turn can be run in
environments ranging from servers inside a large data center to your own tablet —
all the complexity of communication between different languages and environments is
handled for you by gRPC. We also get all the advantages of working with protocol
buffers, including efficient serialization, a simple IDL, and easy interface
updating.
Example code and setup
The example code is part of the grpc
repo under [examples/cpp/route_guide](https://github.com/grpc/grpc/tree/v1.66.0/examples/cpp/route_guide).
Get the example code and build gRPC:
Follow the Quick start instructions to
[build and locally install gRPC from source](/docs/languages/cpp/quickstart/#install-grpc).From the repo folder, change to the route guide example directory:
$ cd examples/cpp/route_guide
Run
cmake
$ mkdir -p cmake/build $ cd cmake/build $ cmake -DCMAKE_PREFIX_PATH=$MY_INSTALL_DIR../..
Defining the service
Our first step (as you’ll know from the [Introduction to gRPC](/docs/what-is-grpc/introduction/)) is to
define the gRPC service and the method request and response types using
[protocol buffers](https://protobuf.dev/overview).
You can see the complete.proto
file in
[ examples/protos/route_guide.proto](https://github.com/grpc/grpc/blob/v1.66.0/examples/protos/route_guide.proto).
To define a service, you specify a named service
in your.proto
file:
service RouteGuide {
...
}
Then you define rpc
methods inside your service definition, specifying their
request and response types. gRPC lets you define four kinds of service method,
all of which are used in the RouteGuide
service:
A simple RPC where the client sends a request to the server using the stub and waits for a response to come back, just like a normal function call.
// Obtains the feature at a given position. rpc GetFeature(Point) returns (Feature) {}
A server-side streaming RPC where the client sends a request to the server and gets a stream to read a sequence of messages back. The client reads from the returned stream until there are no more messages. As you can see in our example, you specify a server-side streaming method by placing the
stream
keyword before the response type.//