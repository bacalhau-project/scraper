URL: https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/UnixShellGuide.html

Wiki|git|Apache Hadoop| Last Published: 2024-03-04
               | Version: 3.4.0GeneralOverviewSingle Node SetupCluster SetupCommands ReferenceFileSystem ShellCompatibility SpecificationDownstream Developer's GuideAdmin Compatibility GuideInterface ClassificationFileSystem SpecificationCommonCLI Mini ClusterFair Call QueueNative LibrariesProxy UserRack AwarenessSecure ModeService Level AuthorizationHTTP AuthenticationCredential Provider APIHadoop KMSTracingUnix Shell GuideRegistryAsync ProfilerHDFSArchitectureUser GuideCommands ReferenceNameNode HA With QJMNameNode HA With NFSObserver NameNodeFederationViewFsViewFsOverloadSchemeSnapshotsEdits ViewerImage ViewerPermissions and HDFSQuotas and HDFSlibhdfs (C API)WebHDFS (REST API)HttpFSShort Circuit Local ReadsCentralized Cache ManagementNFS GatewayRolling UpgradeExtended AttributesTransparent EncryptionMultihomingStorage PoliciesMemory Storage SupportSynthetic Load GeneratorErasure CodingDisk BalancerUpgrade DomainDataNode AdminRouter FederationProvided StorageMapReduceTutorialCommands ReferenceCompatibility with 1.xEncrypted ShufflePluggable Shuffle/SortDistributed Cache DeploySupport for YARN Shared CacheMapReduce REST APIsMR Application MasterMR History ServerYARNArchitectureCommands ReferenceCapacity SchedulerFair SchedulerResourceManager RestartResourceManager HAResource ModelNode LabelsNode AttributesWeb Application ProxyTimeline ServerTimeline Service V.2Writing YARN ApplicationsYARN Application SecurityNodeManagerRunning Applications in Docker ContainersRunning Applications in runC ContainersUsing CGroupsSecure ContainersReservation SystemGraceful DecommissionOpportunistic ContainersYARN FederationShared CacheUsing GPUUsing FPGAPlacement ConstraintsYARN UI2YARN REST APIsIntroductionResource ManagerNode ManagerTimeline ServerTimeline Service V.2YARN ServiceOverviewQuickStartConceptsYarn Service APIService DiscoverySystem ServicesHadoop Compatible File SystemsAliyun OSSAmazon S3Azure Blob StorageAzure Data Lake StorageTencent COSHuaweicloud OBSAuthOverviewExamplesConfigurationBuildingToolsHadoop StreamingHadoop ArchivesHadoop Archive LogsDistCpHDFS Federation BalanceGridMixRumenResource Estimator ServiceScheduler Load SimulatorHadoop BenchmarkingDynamometerReferenceChangelog and Release NotesJava API docsUnix Shell APIMetricsConfigurationcore-default.xmlhdfs-default.xmlhdfs-rbf-default.xmlmapred-default.xmlyarn-default.xmlkms-default.xmlhttpfs-default.xmlDeprecated PropertiesUnix Shell GuideImportant End-User Environment VariablesHADOOP_CLIENT_OPTS(command)_(subcommand)_OPTSHADOOP_CLASSPATHAuto-setting of VariablesAdministrator Environment(command)_(subcommand)_OPTS(command)_(subcommand)_USERDeveloper and Advanced Administrator EnvironmentShell ProfilesShell APIUser-level API AccessDynamic SubcommandsRunning with Privilege (Secure Mode)Much of Apache Hadoop’s functionality is controlled viathe shell.  There are several ways to modify the default behavior of how these commands execute.Important End-User Environment VariablesApache Hadoop has many environment variables that control various aspects of the software.  (Seehadoop-env.shand related files.)  Some of these environment variables are dedicated to helping end users manage their runtime.HADOOP_CLIENT_OPTSThis environment variable is used for all end-user, non-daemon operations.  It can be used to set any Java options as well as any Apache Hadoop options via a system property definition. For example:HADOOP_CLIENT_OPTS="-Xmx1g -Dhadoop.socks.server=localhost:4000" hadoop fs -ls /tmpwill increase the memory and send this command via a SOCKS proxy server.NOTE: If ‘YARN_CLIENT_OPTS’ is defined, it will replace ‘HADOOP_CLIENT_OPTS’ when commands are run with ‘yarn’.(command)_(subcommand)_OPTSIt is also possible to set options on a per subcommand basis.  This allows for one to create special options for particular cases.  The first part of the pattern is the command being used, but all uppercase.  The second part of the command is the subcommand being used.  Then finally followed by the string_OPT.For example, to configuremapred distcpto use a 2GB heap, one would use:MAPRED_DISTCP_OPTS="-Xmx2g"These options will appearafterHADOOP_CLIENT_OPTSduring execution and will generally take precedence.HADOOP_CLASSPATHNOTE: Site-wide settings should be configured via a shellprofile entry and permanent user-wide settings should be configured via ${HOME}/.hadooprc using thehadoop_add_classpathfunction. See below for more information.The Apache Hadoop scripts have the capability to inject more content into the classpath of the running command by setting this environment variable.  It should be a colon delimited list of directories, files, or wildcard locations.HADOOP_CLASSPATH=${HOME}/lib/myjars/*.jar hadoop classpathA user can provides hints to the location of the paths via theHADOOP_USER_CLASSPATH_FIRSTvariable.  Setting this to any value will tell the system to try and push these paths near the front.Auto-setting of VariablesIf a user has a common set of settings, they can be put into the${HOME}/.hadoop-envfile.  This file is always read to initialize and override any variables that the user may want to customize.  It uses bash syntax, similar to the.bashrcfile:For example:#
# my custom Apache Hadoop settings!
#

HADOOP_CLIENT_OPTS="-Xmx1g"
MAPRED_DISTCP_OPTS="-Xmx2g"
HADOOP_DISTCP_OPTS="-Xmx2g"The.hadoop-envfile can also be used to extend functionality and teach Apache Hadoop new tricks.  For example, to run hadoop commands accessing the server referenced in the environment variable${HADOOP_SERVER}, the following in the.hadoop-envwill do just that:if [[ -n ${HADOOP_SERVER} ]]; then
  HADOOP_CONF_DIR=/etc/hadoop.${HADOOP_SERVER}
fiOne word of warning:  not all of Unix Shell API routines are available or work correctly in.hadoop-env.  See below for more information on.hadooprc.Administrator EnvironmentIn addition to the various XML files, there are two key capabilities for administrators to configure Apache Hadoop when using the Unix Shell:Many environment variables that impact how the system operates.  This guide will only highlight some key ones.  There is generally more information in the various*-env.shfiles.Supplement or do some platform-specific changes to the existing scripts.  Apache Hadoop provides the capabilities to do function overrides so that the existing code base may be changed in place without all of that work.  Replacing functions is covered later under the Shell API documentation.(command)_(subcommand)_OPTSBy far, the most important are the series of_OPTSvariables that control how daemons work.  These variables should contain all of the relevant settings for those daemons.Similar to the user commands above, all daemons will honor the(command)_(subcommand)_OPTSpattern.  It is generally recommended that these be set inhadoop-env.shto guarantee that the system will know which settings it should use on restart.  Unlike user-facing subcommands, daemons willNOThonorHADOOP_CLIENT_OPTS.In addition, daemons that run in an extra security mode also support(command)_(subcommand)_SECURE_EXTRA_OPTS.  These options aresupplementalto the generic*_OPTSand will appear after, therefore generally taking precedence.(command)_(subcommand)_USERApache Hadoop provides a way to do a user check per-subcommand.  While this method is easily circumvented and should not be considered a security-feature, it does provide a mechanism by which to prevent accidents.  For example, settingHDFS_NAMENODE_USER=hdfswill make thehdfs namenodeandhdfs --daemon start namenodecommands verify that the user running the commands are the hdfs user by checking theUSERenvironment variable.  This also works for non-daemons.  SettingHADOOP_DISTCP_USER=janewill verify thatUSERis set tojanebefore being allowed to execute thehadoop distcpcommand.If a _USER environment variable exists and commands are run with a privilege (e.g., as root; see hadoop_privilege_check in the API documentation), execution will switch to the specified user first.  For commands that support user account switching for security reasons and therefore have a SECURE_USER variable (see more below), the base _USER variable needs to be the user that is expected to be used to switch to the SECURE_USER account.  For example:HDFS_DATANODE_USER=root
HDFS_DATANODE_SECURE_USER=hdfswill force ‘hdfs –daemon start datanode’ to be root, but will eventually switch to the hdfs user after the privileged work has been completed.Be aware that if the --workers flag is used, the user switch happensafterssh is invoked.  The multi-daemon start and stop commands in sbin will, however, switch (if appropriate) prior and will therefore use the keys of the specified _USER.Developer and Advanced Administrator EnvironmentShell ProfilesApache Hadoop allows for third parties to easily add new features through a variety of pluggable interfaces.  This includes a shell code subsystem that makes it easy to inject the necessary content into the base installation.Core to this functionality is the concept of a shell profile.  Shell profiles are shell snippets that can do things such as add jars to the classpath, configure Java system properties and more.Shell profiles may be installed in either${HADOOP_CONF_DIR}/shellprofile.dor${HADOOP_HOME}/libexec/shellprofile.d.  Shell profiles in thelibexecdirectory are part of the base installation and cannot be overridden by the user.  Shell profiles in the configuration directory may be ignored if the end user changes the configuration directory at runtime.An example of a shell profile is in the libexec directory.Shell APIApache Hadoop’s shell code has afunction librarythat is open for administrators and developers to use to assist in their configuration and advanced feature management.  These APIs follow the standardApache Hadoop Interface Classification, with one addition: Replaceable.The shell code allows for core functions to be overridden. However, not all functions can be or are safe to be replaced.  If a function is not safe to replace, it will have an attribute of Replaceable: No.  If a function is safe to replace, it will have the attribute of Replaceable: Yes.In order to replace a function, create a file calledhadoop-user-functions.shin the${HADOOP_CONF_DIR}directory.  Simply define the new, replacement function in this file and the system will pick it up automatically.  There may be as many replacement functions as needed in this file.  Examples of function replacement are in thehadoop-user-functions.sh.examplefile.Functions that are marked Public and Stable are safe to use in shell profiles as-is.  Other functions may change in a minor release.User-level API AccessIn addition to.hadoop-env, which allows individual users to overridehadoop-env.sh, user’s may also use.hadooprc.  This is called after the Apache Hadoop shell environment has been configured and allows the full set of shell API function calls.For example:hadoop_add_classpath /some/path/custom.jarwould go into.hadooprcDynamic SubcommandsUtilizing the Shell API, it is possible for third parties to add their own subcommands to the primary Hadoop shell scripts (hadoop, hdfs, mapred, yarn).Prior to executing a subcommand, the primary scripts will check for the existence of a (scriptname)_subcommand_(subcommand) function.  This function gets executed with the parameters set to all remaining command line arguments.  For example, if the following function is defined:function yarn_subcommand_hello
{
  echo "$@"
  exit $?
}then executingyarn --debug hello world I see youwill activate script debugging and call theyarn_subcommand_hellofunction as:yarn_subcommand_hello world I see youwhich will result in the output of:world I see youIt is also possible to add the new subcommands to the usage output. Thehadoop_add_subcommandfunction adds text to the usage output.  Utilizing the standard HADOOP_SHELL_EXECNAME variable, we can limit which command gets our new function.if [[ "${HADOOP_SHELL_EXECNAME}" = "yarn" ]]; then
  hadoop_add_subcommand "hello" client "Print some text to the screen"
fiWe set the subcommand type to be “client” as there are no special restrictions, extra capabilities, etc.  This functionality may also be use to override the built-ins.  For example, defining:function hdfs_subcommand_fetchdt
{
  ...
}… will replace the existinghdfs fetchdtsubcommand with a custom one.Some key environment variables for Dynamic Subcommands:HADOOP_CLASSNAMEThis is the name of the Java class to use when program execution continues.HADOOP_PRIV_CLASSNAMEThis is the name of the Java class to use when a daemon is expected to be run in a privileged mode.  (See more below.)HADOOP_SHELL_EXECNAMEThis is the name of the script that is being executed.  It will be one of hadoop, hdfs, mapred, or yarn.HADOOP_SUBCMDThis is the subcommand that was passed on the command line.HADOOP_SUBCMD_ARGSThis array contains the argument list after the Apache Hadoop common argument processing has taken place and is the same list that is passed to the subcommand function as arguments.  For example, ifhadoop --debug subcmd 1 2 3has been executed on the command line, then${HADOOP_SUBCMD_ARGS[0]}will be 1 andhadoop_subcommand_subcmdwill also have $1 equal to 1.  This array list MAY be modified by subcommand functions to add or delete values from the argument list for further processing.HADOOP_SECURE_CLASSNAMEIf this subcommand runs a service that supports the secure mode, this variable should be set to the classname of the secure version.HADOOP_SUBCMD_SECURESERVICESetting this to true will force the subcommand to run in secure mode regardless of hadoop_detect_priv_subcmd.  It is expected that HADOOP_SECURE_USER will be set to the user that will be executing the final process. See more about secure mode.HADOOP_SUBCMD_SUPPORTDAEMONIZATIONIf this command can be executed as a daemon, set this to true.HADOOP_USER_PARAMSThis is the full content of the command line, prior to any parsing done. It will contain flags such as--debug.  It MAY NOT be manipulated.The Apache Hadoop runtime facilities require functions exit if no further processing is required.  For example, in the hello example above, Java and other facilities were not required so a simpleexit $?was sufficient.  However, if the function were to utilizeHADOOP_CLASSNAME, then program execution must continue so that Java with the Apache Hadoop-specific parameters will be launched against the given Java class. Another example would be in the case of an unrecoverable error.  It is the function’s responsibility to print an appropriate message (preferably using the hadoop_error API call) and exit appropriately.Running with Privilege (Secure Mode)Some daemons, such as the DataNode and the NFS gateway, may be run in a privileged mode.  This means that they are expected to be launched as root and (by default) switched to another userid via jsvc.  This allows for these daemons to grab a low, privileged port and then drop superuser privileges during normal execution. Running with privilege is also possible for 3rd parties utilizing Dynamic Subcommands. If the following are true:(command)_(subcommand)_SECURE_USER environment variable is defined and points to a valid usernameHADOOP_SECURE_CLASSNAME is defined and points to a valid Java classthen the shell scripts will attempt to run the class as a command with privilege as it would the built-ins.  In general, users are expected to define the _SECURE_USER variable and developers define the _CLASSNAME in their shell script bootstrap.©            2008-2024
              Apache Software Foundation
            
                          -Privacy Policy.
        Apache Maven, Maven, Apache, the Apache feather logo, and the Apache Maven project logos are trademarks of The Apache Software Foundation.