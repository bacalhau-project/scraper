URL: https://en.wikipedia.org/wiki/State_machine_replication

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1Problem definitionToggle Problem definition subsection1.1Distributed service1.2State machine1.3Fault Tolerance1.3.1Special Case: Fail-Stop1.3.2Special Case: Byzantine Failure2The State Machine ApproachToggle The State Machine Approach subsection2.1Ordering Inputs2.2Sending Outputs2.3System Failure2.4Auditing and Failure Detection3Appendix: extensionsToggle Appendix: extensions subsection3.1Input log3.2Checkpoints3.3Reconfiguration3.4Quitting3.5Joining3.6State Transfer3.6.1Optimizing State Transfer3.7Leader Election (for Paxos)3.7.1Conflict resolution4Historical background5References6External linksToggle the table of contentsState machine replication2 languages한국어中文Edit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaComputer science conceptIncomputer science,state machine replication(SMR) orstate machine approachis a general method for implementing a fault-tolerant service by replicating servers and coordinating client interactions with server replicas. The approach also provides a framework for understanding and designing replication management protocols.[1]Problem definition[edit]Distributed service[edit]In terms of clients and services, each service comprises one or more servers and exports operations that clients invoke by making requests. Although using a single, centralized server is the simplest way to implement a service, the resulting service can only be as fault tolerant as the processor executing that server. If this level of fault tolerance is unacceptable, then multiple servers that fail independently can be used. Usually, replicas of a single server are executed on separate processors of a distributed system, and protocols are used to coordinate client interactions with these replicas.State machine[edit]Main article:Finite-state machineFor the subsequent discussion aState Machinewill be defined as the following tuple of values[2](See alsoMealy machineandMoore Machine):A set ofStatesA set ofInputsA set ofOutputsA transition function (Input × State → State)An output function (Input × State → Output)A distinguished State called Start.A State Machine begins at the State labeled Start. Each Input received is passed through the transition and output function to produce a new State and an Output. The State is held stable until a new Input is received, while the Output is communicated to the appropriate receiver.This discussion requires a State Machine to bedeterministic: multiple copies of the same State Machine begin in the Start state, and receiving the same Inputs in the same order will arrive at the same State having generated the same Outputs.Typically, systems based on State Machine Replication voluntarily restrict their implementations to usefinite-state machinesto simplify error recovery.Fault Tolerance[edit]Determinism is an ideal characteristic for providing fault-tolerance. Intuitively, if multiple copies of a system exist, a fault in one would be noticeable as a difference in the State or Output from the others.A little deduction shows the minimum number of copies needed for fault-tolerance is three; one which has a fault, and two others to whom we compare State and Output. Two copies are not enough as there is no way to tell which copy is the faulty one.Further deduction shows a three-copy system can support at most one failure (after which it must repair or replace the faulty copy). If more than one of the copies were to fail, all three States and Outputs might differ, and there would be no way to choose which is the correct one.In general, a system which supports F failures must have 2F+1 copies (also called replicas).[3]The extra copies are used as evidence to decide which of the copies are correct and which are faulty. Special cases can improve these bounds.[4]All of this deduction pre-supposes that replicas are experiencing only random independent faults such as memory errors or hard-drive crash. Failures caused by replicas which attempt to lie, deceive, or collude can also be handled by the State Machine Approach, with isolated changes.Failed replicas are not required to stop; they may continue operating, including generating spurious or incorrect Outputs.Special Case: Fail-Stop[edit]Theoretically, if a failed replica is guaranteed to stop without generating outputs, only F+1 replicas are required, and clients may accept the first output generated by the system. No existing systems achieve this limit, but it is often used when analyzing systems built on top of a fault-tolerant layer (Since the fault-tolerant layer provides fail-stop semantics to all layers above it).Special Case: Byzantine Failure[edit]Faults where a replica sends different values in different directions (for instance, the correct Output to some of its fellow replicas and incorrect Outputs to others) are calledByzantine Failures.[5]Byzantine failures may be random, spurious faults, or malicious, intelligent attacks. 2F+1 replicas, with non-cryptographic hashes suffices to survive all non-malicious Byzantine failures (with high probability). Malicious attacks require cryptographic primitives to achieve 2F+1 (using message signatures), or non-cryptographic techniques can be applied but the number of replicas must be increased to 3F+1.[5]The State Machine Approach[edit]The preceding intuitive discussion implies simple technique for implementing a fault-tolerant service in terms of a State Machine:Place copies of the State Machine on multiple, independent servers.Receive client requests, interpreted as Inputs to the State Machine.Choose an ordering for the Inputs.Execute Inputs in the chosen order on each server.Respond to clients with the Output from the State Machine.Monitor replicas for differences in State or Output.The remainder of this article develops the details of this technique.Step 1 and 2 are outside the scope of this article.Step 3 is the critical operation, seeOrdering Inputs.Step 4 is covered by theState machine definition.Step 5, seeSending Outputs.Step 6, seeAuditing and Failure Detection.The appendix contains discussion on typical extensions used in real-world systems such asLogging,Checkpoints,Reconfiguration, andState Transfer.Ordering Inputs[edit]The critical step in building a distributed system of State Machines is choosing an order for the Inputs to be processed. Since all non-faulty replicas will arrive at the same State and Output if given the same Inputs, it is imperative that the Inputs are submitted in an equivalent order at each replica. Many solutions have been proposed in the literature.[2][6][7][8][9]AVisible Channelis a communication path between two entities actively participating in the system (such as clients and servers).
	Example: client to server, server to serverAHidden Channelis a communication path which is not revealed to the system.
Example: client to client channels are usually hidden; such as users communicating over a telephone, or a process writing files to disk which are read by another process.When all communication paths are visible channels and no hidden channels exist, a partial global order (Causal Order) may be inferred from the pattern of communications.[8][10]Causal Order may be derived independently by each server. Inputs to the State Machine may be executed in Causal Order, guaranteeing consistent State and Output for all non-faulty replicas.In open systems, hidden channels are common and a weaker form of ordering must be used. An order of Inputs may be defined using a voting protocol whose results depend only on the visible channels.The problem of voting for asinglevalue by a group of independent entities is calledConsensus. By extension, aseriesof values may be chosen by a series of consensus instances. This problem becomes difficult when the participants or their communication medium may experience failures.[3]Inputs may be ordered by their position in the series of consensus instances (Consensus Order).[7]Consensus Order may be derived independently by each server. Inputs to the State Machine may be executed in Consensus Order, guaranteeing consistent State and Output for all non-faulty replicas.Optimizing Causal & Consensus OrderingIn some cases additional information is available (such as real-time clocks). In these cases, it is possible to achieve more efficient causal or consensus ordering for the Inputs, with a reduced number of messages, fewer message rounds, or smaller message sizes. See references for details[1][4][6][11]Further optimizations are available when the semantics of State Machine operations are accounted for (such as Read vs Write operations). See referencesGeneralized Paxos.[2][12]Sending Outputs[edit]Client requests are interpreted as Inputs to the State Machine, and processed into Outputs in the appropriate order. Each replica will generate an Output independently. Non-faulty replicas will always produce the same Output. Before the client response can be sent, faulty Outputs must be filtered out. Typically, a majority of the Replicas will return the same Output, and this Output is sent as the response to the client.System Failure[edit]If there is no majority of replicas with the same Output, or if less than a majority of replicas returns an Output, a system failure has occurred. The client response must be the unique Output: FAIL.Auditing and Failure Detection[edit]The permanent, unplanned compromise of a replica is called aFailure. Proof of failure is difficult to obtain, as the replica may simply be slow to respond,[13]or even lie about its status.[5]Non-faulty replicas will always contain the same State and produce the same Outputs. This invariant enables failure detection by comparing States and Outputs of all replicas. Typically, a replica with State or Output which differs from the majority of replicas is declared faulty.A common implementation is to pass checksums of the current replica State and recent Outputs among servers. An Audit process at each server restarts the local replica if a deviation is detected.[14]Cryptographic security is not required for checksums.It is possible that the local server is compromised, or that the Audit process is faulty, and the replica continues to operate incorrectly. This case is handled safely by the Output filter described previously (seeSending Outputs).Appendix: extensions[edit]Input log[edit]In a system with no failures, the Inputs may be discarded after being processed by the State Machine. Realistic deployments must compensate for transient non-failure behaviors of the system such as message loss, network partitions, and slow processors.[14]One technique is to store the series of Inputs in a log. During times of transient behavior, replicas may request copies of a log entry from another replica in order to fill in missing Inputs.[7]In general the log is not required to be persistent (it may be held in memory). A persistent log may compensate for extended transient periods, or support additional system features such asCheckpoints, andReconfiguration.Checkpoints[edit]If left unchecked a log will grow until it exhausts all available storage resources. For continued operation, it is necessary to forget log entries. In general a log entry may be forgotten when its contents are no longer relevant (for instance if all replicas have processed an Input, the knowledge of the Input is no longer needed).A common technique to control log size is store a duplicate State (called aCheckpoint), then discard any log entries which contributed to the checkpoint. This saves space when the duplicated State is smaller than the size of the log.Checkpoints may be added to any State Machine by supporting an additional Input calledCHECKPOINT. Each replica maintains a checkpoint in addition to the current State value. When the log grows large, a replica submits the CHECKPOINT command just like a client request. The system will ensure non-faulty replicas process this command in the same order, after which all log entries before the checkpoint may be discarded.In a system with checkpoints, requests for log entries occurring before the checkpoint are ignored. Replicas which cannot locate copies of a needed log entry are faulty and must re-join the system (seeReconfiguration).Reconfiguration[edit]Reconfiguration allows replicas to be added and removed from a system while client requests continue to be processed. Planned maintenance and replica failure are common examples of reconfiguration. Reconfiguration involvesQuittingandJoining.Quitting[edit]When a server detects its State or Output is faulty (seeAuditing and Failure Detection), it may selectively exit the system. Likewise, an administrator may manually execute a command to remove a replica for maintenance.A new Input is added to the State Machine calledQUIT.[2][6]A replica submits this command to the system just like a client request. All non-faulty replicas remove the quitting replica from the system upon processing this Input. During this time, the replica may ignore all protocol messages. If a majority of non-faulty replicas remain, the quit is successful. If not, there is aSystem Failure.Joining[edit]After quitting, a failed server may selectively restart or re-join the system. Likewise, an administrator may add a new replica to the group for additional capacity.A new Input is added to the State Machine calledJOIN. A replica submits this command to the system just like a client request. All non-faulty replicas add the joining node to the system upon processing this Input. A new replica must be up-to-date on the system's State before joining (seeState Transfer).State Transfer[edit]When a new replica is made available or an old replica is restarted, it must be brought up to the current State before processing Inputs (seeJoining). Logically, this requires applying every Input from the dawn of the system in the appropriate order.Typical deployments short-circuit the logical flow by performing a State Transfer of the most recent Checkpoint (seeCheckpoints). This involves directly copying the State of one replica to another using an out-of-band protocol.A checkpoint may be large, requiring an extended transfer period. During this time, new Inputs may be added to the log. If this occurs, the new replica must also receive the new Inputs and apply them after the checkpoint is received. Typical deployments add the new replica as an observer to the ordering protocol before beginning the state transfer, allowing the new replica to collect Inputs during this period.Optimizing State Transfer[edit]Common deployments reduce state transfer times by sending only State components which differ. This requires knowledge of the State Machine internals. Since state transfer is usually an out-of-band protocol, this assumption is not difficult to achieve.Compression is another feature commonly added to state transfer protocols, reducing the size of the total transfer.Leader Election (for Paxos)[edit]Paxos[7]is a protocol for solving consensus, and may be used as the protocol for implementing Consensus Order.Paxos requires a single leader to ensure liveness.[7]That is, one of the replicas must remain leader long enough to achieve consensus on the next operation of the state machine. System behavior is unaffected if the leader changes after every instance, or if the leader changes multiple times per instance. The only requirement is that one replica remains leader long enough to move the system forward.Conflict resolution[edit]In general, a leader is necessary only when there is disagreement about which operation to perform,[11]and if those operations conflict in some way (for instance, if they do not commute).[12]When conflicting operations are proposed, the leader acts as the single authority to set the record straight, defining an order for the operations, allowing the system to make progress.With Paxos, multiple replicas may believe they are leaders at the same time. This property makes Leader Election for Paxos very simple, and any algorithm which guarantees an 'eventual leader' will work.Historical background[edit]A number of researchers published articles on the replicated state machine approach in the early 1980s.Anita Borgdescribed an implementation of a fault tolerant operating system based on replicated state machines in a 1983 paper"A message system supporting fault tolerance".Leslie Lamportalso proposed the state machine approach, in his 1984 paper on"Using Time Instead of Timeout In Distributed Systems". Fred Schneider later elaborated the approach in his paper"Implementing Fault-Tolerant Services Using the State Machine Approach: A Tutorial".Ken Birmandeveloped thevirtual synchronymodel in a series of papers published between 1985 and 1987. The primary reference to this work is"Exploiting Virtual Synchrony in Distributed Systems", which describes the Isis Toolkit, a system that was used to build the New York and Swiss Stock Exchanges, French Air Traffic Control System, US Navy AEGIS Warship, and other applications.Recent work by Miguel Castro andBarbara Liskovused the state machine approach in what they call a"Practical Byzantine fault tolerance"architecture that replicates especially sensitive services using a version of Lamport's original state machine approach, but with optimizations that substantially improve performance.Most recently, there has also been the creation of the BFT-SMaRt library,[15]a high-performance Byzantine fault-tolerant state machine replication library developed in Java. This library implements a protocol very similar to PBFT's, plus complementary protocols which offer state transfer and on-the-fly reconfiguration of hosts (i.e., JOIN and LEAVE operations). BFT-SMaRt is the most recent effort to implement state machine replication, still being actively maintained.Raft, a consensus based algorithm, was developed in 2013.Motivated by PBFT, Tendermint BFT[16]was introduced for partial asynchronous networks and it is mainly used for Proof of Stake blockchains.References[edit]^abSchneider, Fred (1990)."Implementing Fault-Tolerant Services Using the State Machine Approach: A Tutorial"(PS).ACM Computing Surveys.22(4): 299–319.CiteSeerX10.1.1.69.1536.doi:10.1145/98163.98167.S2CID678818.^abcdLamport, Leslie (1978)."The Implementation of Reliable Distributed Multiprocess Systems".Computer Networks.2(2): 95–114.doi:10.1016/0376-5075(78)90045-4. Retrieved2008-03-13.^abLamport, Leslie (2004)."Lower Bounds for Asynchronous Consensus".^abLamport, Leslie; Mike Massa (2004). "Cheap Paxos".International Conference on Dependable Systems and Networks, 2004. pp. 307–314.doi:10.1109/DSN.2004.1311900.ISBN978-0-7695-2052-0.S2CID1325830.^abcLamport, Leslie; Robert Shostak; Marshall Pease (July 1982)."The Byzantine Generals Problem".ACM Transactions on Programming Languages and Systems.4(3): 382–401.CiteSeerX10.1.1.64.2312.doi:10.1145/357172.357176.S2CID55899582. Retrieved2007-02-02.^abcLamport, Leslie (1984)."Using Time Instead of Timeout for Fault-Tolerant Distributed Systems".ACM Transactions on Programming Languages and Systems.6(2): 254–280.CiteSeerX10.1.1.71.1078.doi:10.1145/2993.2994.S2CID402171. Retrieved2008-03-13.^abcdeLamport, Leslie (May 1998)."The Part-Time Parliament".ACM Transactions on Computer Systems.16(2): 133–169.doi:10.1145/279227.279229.S2CID421028. Retrieved2007-02-02.^abBirman, Kenneth; Thomas Joseph (1987). "Exploiting virtual synchrony in distributed systems".ACM Sigops Operating Systems Review.21(5): 123–138.doi:10.1145/37499.37515.hdl:1813/6651.^Lampson, Butler (1996)."How to Build a Highly Available System Using Consensus". Retrieved2008-03-13.^Lamport, Leslie (July 1978)."Time, Clocks and the Ordering of Events in a Distributed System".Communications of the ACM.21(7): 558–565.doi:10.1145/359545.359563.S2CID215822405. Retrieved2007-02-02.^abLamport, Leslie (2005)."Fast Paxos".^abLamport, Leslie (2005)."Generalized Consensus and Paxos".{{cite journal}}:Cite journal requires|journal=(help)^Fischer, Michael J.; Nancy A. Lynch; Michael S. Paterson (1985)."Impossibility of Distributed Consensus with One Faulty Process".Journal of the Association for Computing Machinery.32(2): 347–382.doi:10.1145/3149.214121.S2CID207660233. Retrieved2008-03-13.^abChandra, Tushar; Robert Griesemer; Joshua Redstone (2007). "Paxos made live".Proceedings of the twenty-sixth annual ACM symposium on Principles of distributed computing(PDF). pp. 398–407.doi:10.1145/1281100.1281103.ISBN9781595936165.S2CID207164635.^BFT-SMaRt. Google Code repository for the BFT-SMaRt replication library.^Buchman, E.; Kwon, J.; Milosevic, Z. (2018). "The latest gossip on BFT consensus".arXiv:1807.04938[cs.DC].External links[edit]Replicated state machines video on MIT TechTVApache Bookkeepera replicated log service which can be used to build replicated state machinesRetrieved from "https://en.wikipedia.org/w/index.php?title=State_machine_replication&oldid=1223419210"Categories:Distributed computing problemsData synchronizationFault-tolerant computer systemsHidden categories:CS1 errors: missing periodicalArticles with short descriptionShort description matches WikidataThis page was last edited on 12 May 2024, at 00:29(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view