URL: https://en.wikipedia.org/wiki/Lambda_architecture

Jump to contentMain menuMain menumove to sidebarhideNavigationMain pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonateContributeHelpLearn to editCommunity portalRecent changesUpload fileSearchSearchAppearanceCreate accountLog inPersonal toolsCreate accountLog inPages for logged out editorslearn moreContributionsTalkContentsmove to sidebarhide(Top)1OverviewToggle Overview subsection1.1Batch layer1.2Speed layer1.3Serving layer2Optimizations3Lambda architecture in use4Criticism and alternativesToggle Criticism and alternatives subsection4.1Kappa architecture5See also6ReferencesToggle the table of contentsLambda architecture4 languagesCatalàFrançais한국어УкраїнськаEdit linksArticleTalkEnglishReadEditView historyToolsToolsmove to sidebarhideActionsReadEditView historyGeneralWhat links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata itemPrint/exportDownload as PDFPrintable versionIn other projectsAppearancemove to sidebarhideFrom Wikipedia, the free encyclopediaData-processing architectureFlow of data through the processing and serving layers of a generic lambda architectureLambda architectureis adata-processingarchitecture designed to handle massive quantities of data by taking advantage of bothbatchandstream-processingmethods. This approach to architecture attempts to balancelatency,throughput, andfault-toleranceby using batch processing to provide comprehensive and accurate views of batch data, while simultaneously using real-time stream processing to provide views of online data. The two view outputs may be joined before presentation. The rise of lambda architecture is correlated with the growth ofbig data, real-time analytics, and the drive to mitigate the latencies ofmap-reduce.[1]Lambda architecture depends on a data model with an append-only, immutable data source that serves as a system of record.[2]: 32It is intended for ingesting and processing timestamped events that are appended to existing events rather than overwriting them. State is determined from the natural time-based ordering of the data.Overview[edit]Lambda architecture describes a system consisting of three layers: batch processing, speed (or real-time) processing, and a serving layer for responding to queries.[3]: 13The processing layers ingest from an immutable master copy of the entire data set. This paradigm was first described by Nathan Marz in a blog post titled "How to beat theCAP theorem" in which he originally termed it the "batch/realtime architecture".[4]Batch layer[edit]The batch layer precomputes results using a distributed processing system that can handle very large quantities of data. The batch layer aims at perfect accuracy by being able to processallavailable data when generating views. This means it can fix any errors by recomputing based on the complete data set, then updating existing views. Output is typically stored in a read-only database, with updates completely replacing existing precomputed views.[3]: 18By 2014,Apache Hadoopwas estimated to be a leading batch-processing system.[5]Later, other, relational databases likeSnowflake, Redshift, Synapse and Big Query were also used in this role.Speed layer[edit]Diagram showing the flow of data through the processing and serving layers of lambda architecture. Example named components are shown.The speed layer processes data streams in real time and without the requirements of fix-ups or completeness. This layer sacrifices throughput as it aims to minimize latency by providing real-time views into the most recent data. Essentially, the speed layer is responsible for filling the "gap" caused by the batch layer's lag in providing views based on the most recent data. This layer's views may not be as accurate or complete as the ones eventually produced by the batch layer, but they are available almost immediately after data is received, and can be replaced when the batch layer's views for the same data become available.[3]: 203Stream-processing technologies typically used in this layer includeApache Kafka,Amazon Kinesis,Apache Storm,SQLstream,Apache Samza,Apache Spark,Azure Stream Analytics,Apache Flink. Output is typically stored on fast NoSQL databases.,[6][7]or as a commit log.[8]Serving layer[edit]Diagram showing a lambda architecture with a Druid data store.Output from the batch and speed layers are stored in the serving layer, which responds to ad-hoc queries by returning precomputed views or building views from the processed data.Examples of technologies used in the serving layer includeApache Druid,Apache Pinot,ClickHouseandTinybirdwhich provide a single platform to handle output from both layers.[9]Dedicated stores used in the serving layer includeApache Cassandra,Apache HBase,Azure Cosmos DB,MongoDB,VoltDBorElasticsearchfor speed-layer output, andElephant DB,Apache Impala,SAP HANAorApache Hivefor batch-layer output.[2]: 45[6]Optimizations[edit]To optimize the data set and improve query efficiency, various rollup and aggregation techniques are executed on raw data,[9]: 23while estimation techniques are employed to further reduce computation costs.[10]And while expensive full recomputation is required for fault tolerance, incremental computation algorithms may be selectively added to increase efficiency, and techniques such aspartial computationand resource-usage optimizations can effectively help lower latency.[3]: 93, 287, 293Lambda architecture in use[edit]Metamarkets, which provides analytics for companies in the programmatic advertising space, employs a version of the lambda architecture that usesDruidfor storing and serving both the streamed and batch-processed data.[9]: 42For running analytics on its advertising data warehouse,Yahoohas taken a similar approach, also usingApache Storm,Apache Hadoop, andDruid.[11]: 9, 16TheNetflixSuro project has separate processing paths for data, but does not strictly follow lambda architecture since the paths may be intended to serve different purposes and not necessarily to provide the same type of views.[12]Nevertheless, the overall idea is to make selected real-time event data available to queries with very low latency, while the entire data set is also processed via a batch pipeline. The latter is intended for applications that are less sensitive to latency and require a map-reduce type of processing.Criticism and alternatives[edit]Criticism of lambda architecture has focused on its inherent complexity and its limiting influence. The batch and streaming sides each require a different code base that must be maintained and kept in sync so that processed data produces the same result from both paths. Yet attempting to abstract the code bases into a single framework puts many of the specialized tools in the batch and real-time ecosystems out of reach.[13]Kappa architecture[edit]Jay Kreps introduced the kappa architecture to use a pure streaming approach with a single code base.[13]In a technical discussion over the merits of employing a pure streaming approach, it was noted that using a flexible streaming framework such asApache Samzacould provide some of the same benefits as batch processing without the latency.[14]Such a streaming framework could allow for collecting and processing arbitrarily large windows of data, accommodate blocking, and handle state.See also[edit]Event stream processingAWS Lambda, a specific service from Amazon Web Services, in which only actual execution time is chargedReferences[edit]^Schuster, Werner."Nathan Marz on Storm, Immutability in the Lambda Architecture, Clojure".www.infoq.com.Interview with Nathan Marz, 6 April 2014^abBijnens, Nathan."A real-time architecture using Hadoop and Storm". 11 December 2013.^abcdMarz, Nathan; Warren, James.Big Data: Principles and best practices of scalable realtime data systems. Manning Publications, 2013.^Marz, Nathan."How to beat the CAP theorem". 13 October 2011.^Kar, Saroj."Hadoop Sector will Have Annual Growth of 58% for 2013-2020"Archived2014-08-26 atarchive.today, 28 May 2014.Cloud Times.^abKinley, James."The Lambda architecture: principles for architecting realtime Big Data systems"Archived2014-09-04 at theWayback Machine, retrieved 26 August 2014.^Ferrera Bertran, Pere."Lambda Architecture: A state-of-the-art". 17 January 2014, Datasalt.^Confluent."Kafka and Events – Key/Value Pairs", retrieved 06 October 2022.^abcYang, Fangjin, and Merlino, Gian."Real-time Analytics with Open Source Technologies". 30 July 2014.^Ray, Nelson."The Art of Approximating Distributions: Histograms and Quantiles at Scale". 12 September 2013. Metamarkets.^Rao, Supreeth; Gupta, Sunil."Interactive Analytics in Human Time". 17 June 2014^Bae, Jae Hyeon; Yuan, Danny; Tonse, Sudhir."Announcing Suro: Backbone of Netflix's Data Pipeline",Netflix, 9 December 2013^abKreps, Jay."Questioning the Lambda Architecture".radar.oreilly.com. Oreilly. Retrieved15 August2014.^Hacker Newsretrieved 20 August 2014[1]^"Lambda vs Kappa Architecture".www.interlinkjobs.com. Retrieved2024-08-01.Retrieved from "https://en.wikipedia.org/w/index.php?title=Lambda_architecture&oldid=1237944800"Categories:Data processingBig dataData managementFree software projectsSoftware architectureHidden categories:Webarchive template archiveis linksWebarchive template wayback linksArticles with short descriptionShort description matches WikidataThis page was last edited on 1 August 2024, at 08:34(UTC).Text is available under theCreative Commons Attribution-ShareAlike License 4.0;
additional terms may apply. By using this site, you agree to theTerms of UseandPrivacy Policy. Wikipedia® is a registered trademark of theWikimedia Foundation, Inc., a non-profit organization.Privacy policyAbout WikipediaDisclaimersContact WikipediaCode of ConductDevelopersStatisticsCookie statementMobile view