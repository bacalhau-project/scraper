URL: https://nats.io/blog/nats-dotnet-v2-alpha-release/

AboutDownloadDocumentationBlogCommunitySupportPrivacyNATS .NET Client v2 Alpha Released with Core NATS SupportZiya Suzen— July 13, 2023Back to BlogStarting in 2018 with.NET Core 2.1, the .NET platform began to receive serious performance improvements in every major release. This excited many .NET developers, who have been enjoying faster and more efficient runtimes just by upgrading their project targets with every new .NET release. In 2021,.NET 6became the first LTS release under Microsoft’s new.NET and .NET Core Support Policy.The original NATS .NET client, calledNATS.Client v1on NuGet, pre-dates these advancements and Microsoft’s new LTS roadmap - it was originally released in 2015! Backwards compatibility remains a large commitment in NATS.Client v1, which would make it difficult to port in order to take advantage of new APIs.NATS community members started to take note, and develop client libraries for NATS based on modern .NET APIs. One notable client library that emerged was theAlterNatslibrary by Cysharp, which includes a fully asynchronous API, leveragesSpan<T>, and supports client-side WebSockets from browsers inBlazor. NATS maintainers and AlterNats maintainers agreed that AlterNats would make a great starting point for NATS.Client v2!Today, we’re excited to announce our first developer preview release ofNATS.Client.Core v2, which supportsCore NATS. JetStream support is under development and will be coming soon!What’s Supported?NATS.Client.Core v2is a complete implementation of all Core NATS features including headers. We take full advantage of async/await, IAsyncDisposable, Channels, IAsyncEnumerable and ValueTask to provide a great developer experience and high performance.Publish-SubscribeusingNATS.Client.Core;// Create a new connectionawaitusingvarnats=newNatsConnection();// Create a subscription on subject "foo"awaitusingsub=awaitnats.SubscribeAsync<int>("foo");// Publish 10 messages on subject "foo"for(inti=0;i<10;i++){Console.WriteLine($" Publishing {i}...");awaitnats.PublishAsync<int>("foo",i);}// Read messages from the subscriptionawaitforeach(varmsginsub.Msgs.ReadAllAsync()){Console.WriteLine($"Received {msg.Subject}: {msg.Data}\n");}Request-ReplyusingNATS.Client.Core;// Create a new connectionawaitusingvarnats=newNatsConnection();// Create subscription (service) that will be responding to requestsawaitusingvarsub=awaitconn.SubscribeAsync<int>("math.double");awaitforeach(varmsginsub.Msgs.ReadAllAsync()){Console.WriteLine($"Received request: {msg.Data}");// Reply to the sender of the message via the reply subjectawaitmsg.ReplyAsync($"Answer is: { 2 * msg.Data }");}awaitusingvarnats=newNatsConnection();// Send a request (message), expecting a reply. The client automatically// creates an inbox subscription to receive this message.varreply=awaitnats.RequestAsync<int,string>("math.double",2);Console.WriteLine($"Received reply: {reply}")Queue GroupsusingNATS.Client.Core;awaitusingvarnats=newNatsConnection();varsubs=newList<NatsSubBase>();varreplyTasks=newList<Task>();for(inti=0;i<3;i++){// Create three subscriptions all on the same queue groupvaropts=newNatsSubOpts{QueueGroup="maths-service"};varsub=awaitnats.SubscribeAsync<int>("math.double",opts);subs.Add(sub);// Create a background message loop for every subscriptionvarreplyTaskId=i;replyTasks.Add(Task.Run(async()=>{// Retrieve messages until unsubscribedawaitforeach(varmsginsub.Msgs.ReadAllAsync()){Console.WriteLine($"[{replyTaskId}] Received request: {msg.Data}");awaitmsg.ReplyAsync($"Answer is: {2 * msg.Data}");}Console.WriteLine($"[{replyTaskId}] Done");}));}// Send a few requestsfor(inti=0;i<10;i++){varreply=awaitnats.RequestAsync<int,string>("math.double",i);Console.WriteLine($"Reply: '{reply}'");}Console.WriteLine("Stopping...");// Unsubscribing or disposing will complete the message loopsforeach(varsubinsubs)awaitsub.UnsubscribeAsync();// Make sure all tasks finished cleanlyawaitTask.WhenAll(replyTasks);Console.WriteLine("Bye");Version Numbers, Packages and .NET TargetsNATS.Client v1 will continue to be supported, and will target .NET Framework / NETStandard. It already includes full-featured implementations of Core NATS, JetStream, Key Value, Object Store.NATS.Client.Core v2 (alpha) launches targeting .NET 6 and will follow the .NET LTS support policy going forward. NATS.Client.Hosting v2 (alpha) supporting .NET Hosting APIs has also been launched.What’s Next?Our first priority is implementing JetStream on top of NATS.Client.Core v2. This will be followed by Key Value and Object Store implementations.We are also interested in learning more about .NET ecosystem packages that could benefit from NATS integrations.SignalR Core ScaleoutandOrleansare two examples that come to mind.Try it TodayNATS.Client.Core v2 (alpha) is available onNuGetand the source code is available onGitHub. GeneratedAPI documentationis also available.We would love community feedback! Please open issues or discussions on thenats-io/nats.net.v2GitHub repository or ask questions in the NATS#dotnet Slackchannel!About the AuthorZiya Suzen is a Software Engineer at Synadia and maintainer of the NATS .NET v2 Client.Back to BlogCopyright © NATS Authors 2024NATS is aCloud Native Computing Foundationincubating projectThe Linux Foundation has registered trademarks and uses trademarks.For a list of trademarks of The Linux Foundation, please seeTrademark Usage page.